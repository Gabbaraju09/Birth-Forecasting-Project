{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Gabbaraju09/USbirthsproject/blob/main/group_project.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import datetime\n",
        "import sqlite3\n",
        "from sqlite3 import Error\n",
        "import os\n",
        "\n",
        "\n",
        "def create_connection(db_file,delete_db=False):\n",
        "    if delete_db and os.path.exists(db_file):\n",
        "        os.remove(db_file)\n",
        "    conn=None\n",
        "    try:\n",
        "        conn = sqlite3.connect(db_file)\n",
        "        conn.execute(\"PRAGMA foreign_keys = 1\")\n",
        "    except csv.Error as e:\n",
        "        print(e)\n",
        "    return conn\n",
        "def create_table(conn,create_table_sql,drop_table_name=None):\n",
        "   if drop_table_name: # You can optionally pass drop_table_name to drop the table.\n",
        "        try:\n",
        "            c = conn.cursor()\n",
        "            c.execute(\"\"\"DROP TABLE IF EXISTS %s\"\"\" % (drop_table_name))\n",
        "        except Error as e:\n",
        "            print(e)\n",
        "\n",
        "   try:\n",
        "        c = conn.cursor()\n",
        "        c.execute(create_table_sql)\n",
        "   except Error as e:\n",
        "        print(e)\n",
        "def execute_sql_statement(sql_statement,conn):\n",
        "    cur=conn.cursor()\n",
        "    cur.execute(sql_statement)\n",
        "    rows=cur.fetchall()\n",
        "    return rows"
      ],
      "metadata": {
        "id": "FNI9Xjq0RVL0"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hBzgC0KpFl1m",
        "outputId": "e6acf59b-775a-4332-a475-b782ac8f60f4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "date [(1, '1994-01-01', 6), (2, '1994-01-02', 7), (3, '1994-01-03', 1), (4, '1994-01-04', 2), (5, '1994-01-05', 3), (6, '1994-01-06', 4), (7, '1994-01-07', 5), (8, '1994-01-08', 6), (9, '1994-01-09', 7), (10, '1994-01-10', 1), (11, '1994-01-11', 2), (12, '1994-01-12', 3), (13, '1994-01-13', 4), (14, '1994-01-14', 5), (15, '1994-01-15', 6), (16, '1994-01-16', 7), (17, '1994-01-17', 1), (18, '1994-01-18', 2), (19, '1994-01-19', 3), (20, '1994-01-20', 4), (21, '1994-01-21', 5), (22, '1994-01-22', 6), (23, '1994-01-23', 7), (24, '1994-01-24', 1), (25, '1994-01-25', 2), (26, '1994-01-26', 3), (27, '1994-01-27', 4), (28, '1994-01-28', 5), (29, '1994-01-29', 6), (30, '1994-01-30', 7), (31, '1994-01-31', 1), (32, '1994-02-01', 2), (33, '1994-02-02', 3), (34, '1994-02-03', 4), (35, '1994-02-04', 5), (36, '1994-02-05', 6), (37, '1994-02-06', 7), (38, '1994-02-07', 1), (39, '1994-02-08', 2), (40, '1994-02-09', 3), (41, '1994-02-10', 4), (42, '1994-02-11', 5), (43, '1994-02-12', 6), (44, '1994-02-13', 7), (45, '1994-02-14', 1), (46, '1994-02-15', 2), (47, '1994-02-16', 3), (48, '1994-02-17', 4), (49, '1994-02-18', 5), (50, '1994-02-19', 6), (51, '1994-02-20', 7), (52, '1994-02-21', 1), (53, '1994-02-22', 2), (54, '1994-02-23', 3), (55, '1994-02-24', 4), (56, '1994-02-25', 5), (57, '1994-02-26', 6), (58, '1994-02-27', 7), (59, '1994-02-28', 1), (60, '1994-03-01', 2), (61, '1994-03-02', 3), (62, '1994-03-03', 4), (63, '1994-03-04', 5), (64, '1994-03-05', 6), (65, '1994-03-06', 7), (66, '1994-03-07', 1), (67, '1994-03-08', 2), (68, '1994-03-09', 3), (69, '1994-03-10', 4), (70, '1994-03-11', 5), (71, '1994-03-12', 6), (72, '1994-03-13', 7), (73, '1994-03-14', 1), (74, '1994-03-15', 2), (75, '1994-03-16', 3), (76, '1994-03-17', 4), (77, '1994-03-18', 5), (78, '1994-03-19', 6), (79, '1994-03-20', 7), (80, '1994-03-21', 1), (81, '1994-03-22', 2), (82, '1994-03-23', 3), (83, '1994-03-24', 4), (84, '1994-03-25', 5), (85, '1994-03-26', 6), (86, '1994-03-27', 7), (87, '1994-03-28', 1), (88, '1994-03-29', 2), (89, '1994-03-30', 3), (90, '1994-03-31', 4), (91, '1994-04-01', 5), (92, '1994-04-02', 6), (93, '1994-04-03', 7), (94, '1994-04-04', 1), (95, '1994-04-05', 2), (96, '1994-04-06', 3), (97, '1994-04-07', 4), (98, '1994-04-08', 5), (99, '1994-04-09', 6), (100, '1994-04-10', 7), (101, '1994-04-11', 1), (102, '1994-04-12', 2), (103, '1994-04-13', 3), (104, '1994-04-14', 4), (105, '1994-04-15', 5), (106, '1994-04-16', 6), (107, '1994-04-17', 7), (108, '1994-04-18', 1), (109, '1994-04-19', 2), (110, '1994-04-20', 3), (111, '1994-04-21', 4), (112, '1994-04-22', 5), (113, '1994-04-23', 6), (114, '1994-04-24', 7), (115, '1994-04-25', 1), (116, '1994-04-26', 2), (117, '1994-04-27', 3), (118, '1994-04-28', 4), (119, '1994-04-29', 5), (120, '1994-04-30', 6), (121, '1994-05-01', 7), (122, '1994-05-02', 1), (123, '1994-05-03', 2), (124, '1994-05-04', 3), (125, '1994-05-05', 4), (126, '1994-05-06', 5), (127, '1994-05-07', 6), (128, '1994-05-08', 7), (129, '1994-05-09', 1), (130, '1994-05-10', 2), (131, '1994-05-11', 3), (132, '1994-05-12', 4), (133, '1994-05-13', 5), (134, '1994-05-14', 6), (135, '1994-05-15', 7), (136, '1994-05-16', 1), (137, '1994-05-17', 2), (138, '1994-05-18', 3), (139, '1994-05-19', 4), (140, '1994-05-20', 5), (141, '1994-05-21', 6), (142, '1994-05-22', 7), (143, '1994-05-23', 1), (144, '1994-05-24', 2), (145, '1994-05-25', 3), (146, '1994-05-26', 4), (147, '1994-05-27', 5), (148, '1994-05-28', 6), (149, '1994-05-29', 7), (150, '1994-05-30', 1), (151, '1994-05-31', 2), (152, '1994-06-01', 3), (153, '1994-06-02', 4), (154, '1994-06-03', 5), (155, '1994-06-04', 6), (156, '1994-06-05', 7), (157, '1994-06-06', 1), (158, '1994-06-07', 2), (159, '1994-06-08', 3), (160, '1994-06-09', 4), (161, '1994-06-10', 5), (162, '1994-06-11', 6), (163, '1994-06-12', 7), (164, '1994-06-13', 1), (165, '1994-06-14', 2), (166, '1994-06-15', 3), (167, '1994-06-16', 4), (168, '1994-06-17', 5), (169, '1994-06-18', 6), (170, '1994-06-19', 7), (171, '1994-06-20', 1), (172, '1994-06-21', 2), (173, '1994-06-22', 3), (174, '1994-06-23', 4), (175, '1994-06-24', 5), (176, '1994-06-25', 6), (177, '1994-06-26', 7), (178, '1994-06-27', 1), (179, '1994-06-28', 2), (180, '1994-06-29', 3), (181, '1994-06-30', 4), (182, '1994-07-01', 5), (183, '1994-07-02', 6), (184, '1994-07-03', 7), (185, '1994-07-04', 1), (186, '1994-07-05', 2), (187, '1994-07-06', 3), (188, '1994-07-07', 4), (189, '1994-07-08', 5), (190, '1994-07-09', 6), (191, '1994-07-10', 7), (192, '1994-07-11', 1), (193, '1994-07-12', 2), (194, '1994-07-13', 3), (195, '1994-07-14', 4), (196, '1994-07-15', 5), (197, '1994-07-16', 6), (198, '1994-07-17', 7), (199, '1994-07-18', 1), (200, '1994-07-19', 2), (201, '1994-07-20', 3), (202, '1994-07-21', 4), (203, '1994-07-22', 5), (204, '1994-07-23', 6), (205, '1994-07-24', 7), (206, '1994-07-25', 1), (207, '1994-07-26', 2), (208, '1994-07-27', 3), (209, '1994-07-28', 4), (210, '1994-07-29', 5), (211, '1994-07-30', 6), (212, '1994-07-31', 7), (213, '1994-08-01', 1), (214, '1994-08-02', 2), (215, '1994-08-03', 3), (216, '1994-08-04', 4), (217, '1994-08-05', 5), (218, '1994-08-06', 6), (219, '1994-08-07', 7), (220, '1994-08-08', 1), (221, '1994-08-09', 2), (222, '1994-08-10', 3), (223, '1994-08-11', 4), (224, '1994-08-12', 5), (225, '1994-08-13', 6), (226, '1994-08-14', 7), (227, '1994-08-15', 1), (228, '1994-08-16', 2), (229, '1994-08-17', 3), (230, '1994-08-18', 4), (231, '1994-08-19', 5), (232, '1994-08-20', 6), (233, '1994-08-21', 7), (234, '1994-08-22', 1), (235, '1994-08-23', 2), (236, '1994-08-24', 3), (237, '1994-08-25', 4), (238, '1994-08-26', 5), (239, '1994-08-27', 6), (240, '1994-08-28', 7), (241, '1994-08-29', 1), (242, '1994-08-30', 2), (243, '1994-08-31', 3), (244, '1994-09-01', 4), (245, '1994-09-02', 5), (246, '1994-09-03', 6), (247, '1994-09-04', 7), (248, '1994-09-05', 1), (249, '1994-09-06', 2), (250, '1994-09-07', 3), (251, '1994-09-08', 4), (252, '1994-09-09', 5), (253, '1994-09-10', 6), (254, '1994-09-11', 7), (255, '1994-09-12', 1), (256, '1994-09-13', 2), (257, '1994-09-14', 3), (258, '1994-09-15', 4), (259, '1994-09-16', 5), (260, '1994-09-17', 6), (261, '1994-09-18', 7), (262, '1994-09-19', 1), (263, '1994-09-20', 2), (264, '1994-09-21', 3), (265, '1994-09-22', 4), (266, '1994-09-23', 5), (267, '1994-09-24', 6), (268, '1994-09-25', 7), (269, '1994-09-26', 1), (270, '1994-09-27', 2), (271, '1994-09-28', 3), (272, '1994-09-29', 4), (273, '1994-09-30', 5), (274, '1994-10-01', 6), (275, '1994-10-02', 7), (276, '1994-10-03', 1), (277, '1994-10-04', 2), (278, '1994-10-05', 3), (279, '1994-10-06', 4), (280, '1994-10-07', 5), (281, '1994-10-08', 6), (282, '1994-10-09', 7), (283, '1994-10-10', 1), (284, '1994-10-11', 2), (285, '1994-10-12', 3), (286, '1994-10-13', 4), (287, '1994-10-14', 5), (288, '1994-10-15', 6), (289, '1994-10-16', 7), (290, '1994-10-17', 1), (291, '1994-10-18', 2), (292, '1994-10-19', 3), (293, '1994-10-20', 4), (294, '1994-10-21', 5), (295, '1994-10-22', 6), (296, '1994-10-23', 7), (297, '1994-10-24', 1), (298, '1994-10-25', 2), (299, '1994-10-26', 3), (300, '1994-10-27', 4), (301, '1994-10-28', 5), (302, '1994-10-29', 6), (303, '1994-10-30', 7), (304, '1994-10-31', 1), (305, '1994-11-01', 2), (306, '1994-11-02', 3), (307, '1994-11-03', 4), (308, '1994-11-04', 5), (309, '1994-11-05', 6), (310, '1994-11-06', 7), (311, '1994-11-07', 1), (312, '1994-11-08', 2), (313, '1994-11-09', 3), (314, '1994-11-10', 4), (315, '1994-11-11', 5), (316, '1994-11-12', 6), (317, '1994-11-13', 7), (318, '1994-11-14', 1), (319, '1994-11-15', 2), (320, '1994-11-16', 3), (321, '1994-11-17', 4), (322, '1994-11-18', 5), (323, '1994-11-19', 6), (324, '1994-11-20', 7), (325, '1994-11-21', 1), (326, '1994-11-22', 2), (327, '1994-11-23', 3), (328, '1994-11-24', 4), (329, '1994-11-25', 5), (330, '1994-11-26', 6), (331, '1994-11-27', 7), (332, '1994-11-28', 1), (333, '1994-11-29', 2), (334, '1994-11-30', 3), (335, '1994-12-01', 4), (336, '1994-12-02', 5), (337, '1994-12-03', 6), (338, '1994-12-04', 7), (339, '1994-12-05', 1), (340, '1994-12-06', 2), (341, '1994-12-07', 3), (342, '1994-12-08', 4), (343, '1994-12-09', 5), (344, '1994-12-10', 6), (345, '1994-12-11', 7), (346, '1994-12-12', 1), (347, '1994-12-13', 2), (348, '1994-12-14', 3), (349, '1994-12-15', 4), (350, '1994-12-16', 5), (351, '1994-12-17', 6), (352, '1994-12-18', 7), (353, '1994-12-19', 1), (354, '1994-12-20', 2), (355, '1994-12-21', 3), (356, '1994-12-22', 4), (357, '1994-12-23', 5), (358, '1994-12-24', 6), (359, '1994-12-25', 7), (360, '1994-12-26', 1), (361, '1994-12-27', 2), (362, '1994-12-28', 3), (363, '1994-12-29', 4), (364, '1994-12-30', 5), (365, '1994-12-31', 6), (366, '1995-01-01', 7), (367, '1995-01-02', 1), (368, '1995-01-03', 2), (369, '1995-01-04', 3), (370, '1995-01-05', 4), (371, '1995-01-06', 5), (372, '1995-01-07', 6), (373, '1995-01-08', 7), (374, '1995-01-09', 1), (375, '1995-01-10', 2), (376, '1995-01-11', 3), (377, '1995-01-12', 4), (378, '1995-01-13', 5), (379, '1995-01-14', 6), (380, '1995-01-15', 7), (381, '1995-01-16', 1), (382, '1995-01-17', 2), (383, '1995-01-18', 3), (384, '1995-01-19', 4), (385, '1995-01-20', 5), (386, '1995-01-21', 6), (387, '1995-01-22', 7), (388, '1995-01-23', 1), (389, '1995-01-24', 2), (390, '1995-01-25', 3), (391, '1995-01-26', 4), (392, '1995-01-27', 5), (393, '1995-01-28', 6), (394, '1995-01-29', 7), (395, '1995-01-30', 1), (396, '1995-01-31', 2), (397, '1995-02-01', 3), (398, '1995-02-02', 4), (399, '1995-02-03', 5), (400, '1995-02-04', 6), (401, '1995-02-05', 7), (402, '1995-02-06', 1), (403, '1995-02-07', 2), (404, '1995-02-08', 3), (405, '1995-02-09', 4), (406, '1995-02-10', 5), (407, '1995-02-11', 6), (408, '1995-02-12', 7), (409, '1995-02-13', 1), (410, '1995-02-14', 2), (411, '1995-02-15', 3), (412, '1995-02-16', 4), (413, '1995-02-17', 5), (414, '1995-02-18', 6), (415, '1995-02-19', 7), (416, '1995-02-20', 1), (417, '1995-02-21', 2), (418, '1995-02-22', 3), (419, '1995-02-23', 4), (420, '1995-02-24', 5), (421, '1995-02-25', 6), (422, '1995-02-26', 7), (423, '1995-02-27', 1), (424, '1995-02-28', 2), (425, '1995-03-01', 3), (426, '1995-03-02', 4), (427, '1995-03-03', 5), (428, '1995-03-04', 6), (429, '1995-03-05', 7), (430, '1995-03-06', 1), (431, '1995-03-07', 2), (432, '1995-03-08', 3), (433, '1995-03-09', 4), (434, '1995-03-10', 5), (435, '1995-03-11', 6), (436, '1995-03-12', 7), (437, '1995-03-13', 1), (438, '1995-03-14', 2), (439, '1995-03-15', 3), (440, '1995-03-16', 4), (441, '1995-03-17', 5), (442, '1995-03-18', 6), (443, '1995-03-19', 7), (444, '1995-03-20', 1), (445, '1995-03-21', 2), (446, '1995-03-22', 3), (447, '1995-03-23', 4), (448, '1995-03-24', 5), (449, '1995-03-25', 6), (450, '1995-03-26', 7), (451, '1995-03-27', 1), (452, '1995-03-28', 2), (453, '1995-03-29', 3), (454, '1995-03-30', 4), (455, '1995-03-31', 5), (456, '1995-04-01', 6), (457, '1995-04-02', 7), (458, '1995-04-03', 1), (459, '1995-04-04', 2), (460, '1995-04-05', 3), (461, '1995-04-06', 4), (462, '1995-04-07', 5), (463, '1995-04-08', 6), (464, '1995-04-09', 7), (465, '1995-04-10', 1), (466, '1995-04-11', 2), (467, '1995-04-12', 3), (468, '1995-04-13', 4), (469, '1995-04-14', 5), (470, '1995-04-15', 6), (471, '1995-04-16', 7), (472, '1995-04-17', 1), (473, '1995-04-18', 2), (474, '1995-04-19', 3), (475, '1995-04-20', 4), (476, '1995-04-21', 5), (477, '1995-04-22', 6), (478, '1995-04-23', 7), (479, '1995-04-24', 1), (480, '1995-04-25', 2), (481, '1995-04-26', 3), (482, '1995-04-27', 4), (483, '1995-04-28', 5), (484, '1995-04-29', 6), (485, '1995-04-30', 7), (486, '1995-05-01', 1), (487, '1995-05-02', 2), (488, '1995-05-03', 3), (489, '1995-05-04', 4), (490, '1995-05-05', 5), (491, '1995-05-06', 6), (492, '1995-05-07', 7), (493, '1995-05-08', 1), (494, '1995-05-09', 2), (495, '1995-05-10', 3), (496, '1995-05-11', 4), (497, '1995-05-12', 5), (498, '1995-05-13', 6), (499, '1995-05-14', 7), (500, '1995-05-15', 1), (501, '1995-05-16', 2), (502, '1995-05-17', 3), (503, '1995-05-18', 4), (504, '1995-05-19', 5), (505, '1995-05-20', 6), (506, '1995-05-21', 7), (507, '1995-05-22', 1), (508, '1995-05-23', 2), (509, '1995-05-24', 3), (510, '1995-05-25', 4), (511, '1995-05-26', 5), (512, '1995-05-27', 6), (513, '1995-05-28', 7), (514, '1995-05-29', 1), (515, '1995-05-30', 2), (516, '1995-05-31', 3), (517, '1995-06-01', 4), (518, '1995-06-02', 5), (519, '1995-06-03', 6), (520, '1995-06-04', 7), (521, '1995-06-05', 1), (522, '1995-06-06', 2), (523, '1995-06-07', 3), (524, '1995-06-08', 4), (525, '1995-06-09', 5), (526, '1995-06-10', 6), (527, '1995-06-11', 7), (528, '1995-06-12', 1), (529, '1995-06-13', 2), (530, '1995-06-14', 3), (531, '1995-06-15', 4), (532, '1995-06-16', 5), (533, '1995-06-17', 6), (534, '1995-06-18', 7), (535, '1995-06-19', 1), (536, '1995-06-20', 2), (537, '1995-06-21', 3), (538, '1995-06-22', 4), (539, '1995-06-23', 5), (540, '1995-06-24', 6), (541, '1995-06-25', 7), (542, '1995-06-26', 1), (543, '1995-06-27', 2), (544, '1995-06-28', 3), (545, '1995-06-29', 4), (546, '1995-06-30', 5), (547, '1995-07-01', 6), (548, '1995-07-02', 7), (549, '1995-07-03', 1), (550, '1995-07-04', 2), (551, '1995-07-05', 3), (552, '1995-07-06', 4), (553, '1995-07-07', 5), (554, '1995-07-08', 6), (555, '1995-07-09', 7), (556, '1995-07-10', 1), (557, '1995-07-11', 2), (558, '1995-07-12', 3), (559, '1995-07-13', 4), (560, '1995-07-14', 5), (561, '1995-07-15', 6), (562, '1995-07-16', 7), (563, '1995-07-17', 1), (564, '1995-07-18', 2), (565, '1995-07-19', 3), (566, '1995-07-20', 4), (567, '1995-07-21', 5), (568, '1995-07-22', 6), (569, '1995-07-23', 7), (570, '1995-07-24', 1), (571, '1995-07-25', 2), (572, '1995-07-26', 3), (573, '1995-07-27', 4), (574, '1995-07-28', 5), (575, '1995-07-29', 6), (576, '1995-07-30', 7), (577, '1995-07-31', 1), (578, '1995-08-01', 2), (579, '1995-08-02', 3), (580, '1995-08-03', 4), (581, '1995-08-04', 5), (582, '1995-08-05', 6), (583, '1995-08-06', 7), (584, '1995-08-07', 1), (585, '1995-08-08', 2), (586, '1995-08-09', 3), (587, '1995-08-10', 4), (588, '1995-08-11', 5), (589, '1995-08-12', 6), (590, '1995-08-13', 7), (591, '1995-08-14', 1), (592, '1995-08-15', 2), (593, '1995-08-16', 3), (594, '1995-08-17', 4), (595, '1995-08-18', 5), (596, '1995-08-19', 6), (597, '1995-08-20', 7), (598, '1995-08-21', 1), (599, '1995-08-22', 2), (600, '1995-08-23', 3), (601, '1995-08-24', 4), (602, '1995-08-25', 5), (603, '1995-08-26', 6), (604, '1995-08-27', 7), (605, '1995-08-28', 1), (606, '1995-08-29', 2), (607, '1995-08-30', 3), (608, '1995-08-31', 4), (609, '1995-09-01', 5), (610, '1995-09-02', 6), (611, '1995-09-03', 7), (612, '1995-09-04', 1), (613, '1995-09-05', 2), (614, '1995-09-06', 3), (615, '1995-09-07', 4), (616, '1995-09-08', 5), (617, '1995-09-09', 6), (618, '1995-09-10', 7), (619, '1995-09-11', 1), (620, '1995-09-12', 2), (621, '1995-09-13', 3), (622, '1995-09-14', 4), (623, '1995-09-15', 5), (624, '1995-09-16', 6), (625, '1995-09-17', 7), (626, '1995-09-18', 1), (627, '1995-09-19', 2), (628, '1995-09-20', 3), (629, '1995-09-21', 4), (630, '1995-09-22', 5), (631, '1995-09-23', 6), (632, '1995-09-24', 7), (633, '1995-09-25', 1), (634, '1995-09-26', 2), (635, '1995-09-27', 3), (636, '1995-09-28', 4), (637, '1995-09-29', 5), (638, '1995-09-30', 6), (639, '1995-10-01', 7), (640, '1995-10-02', 1), (641, '1995-10-03', 2), (642, '1995-10-04', 3), (643, '1995-10-05', 4), (644, '1995-10-06', 5), (645, '1995-10-07', 6), (646, '1995-10-08', 7), (647, '1995-10-09', 1), (648, '1995-10-10', 2), (649, '1995-10-11', 3), (650, '1995-10-12', 4), (651, '1995-10-13', 5), (652, '1995-10-14', 6), (653, '1995-10-15', 7), (654, '1995-10-16', 1), (655, '1995-10-17', 2), (656, '1995-10-18', 3), (657, '1995-10-19', 4), (658, '1995-10-20', 5), (659, '1995-10-21', 6), (660, '1995-10-22', 7), (661, '1995-10-23', 1), (662, '1995-10-24', 2), (663, '1995-10-25', 3), (664, '1995-10-26', 4), (665, '1995-10-27', 5), (666, '1995-10-28', 6), (667, '1995-10-29', 7), (668, '1995-10-30', 1), (669, '1995-10-31', 2), (670, '1995-11-01', 3), (671, '1995-11-02', 4), (672, '1995-11-03', 5), (673, '1995-11-04', 6), (674, '1995-11-05', 7), (675, '1995-11-06', 1), (676, '1995-11-07', 2), (677, '1995-11-08', 3), (678, '1995-11-09', 4), (679, '1995-11-10', 5), (680, '1995-11-11', 6), (681, '1995-11-12', 7), (682, '1995-11-13', 1), (683, '1995-11-14', 2), (684, '1995-11-15', 3), (685, '1995-11-16', 4), (686, '1995-11-17', 5), (687, '1995-11-18', 6), (688, '1995-11-19', 7), (689, '1995-11-20', 1), (690, '1995-11-21', 2), (691, '1995-11-22', 3), (692, '1995-11-23', 4), (693, '1995-11-24', 5), (694, '1995-11-25', 6), (695, '1995-11-26', 7), (696, '1995-11-27', 1), (697, '1995-11-28', 2), (698, '1995-11-29', 3), (699, '1995-11-30', 4), (700, '1995-12-01', 5), (701, '1995-12-02', 6), (702, '1995-12-03', 7), (703, '1995-12-04', 1), (704, '1995-12-05', 2), (705, '1995-12-06', 3), (706, '1995-12-07', 4), (707, '1995-12-08', 5), (708, '1995-12-09', 6), (709, '1995-12-10', 7), (710, '1995-12-11', 1), (711, '1995-12-12', 2), (712, '1995-12-13', 3), (713, '1995-12-14', 4), (714, '1995-12-15', 5), (715, '1995-12-16', 6), (716, '1995-12-17', 7), (717, '1995-12-18', 1), (718, '1995-12-19', 2), (719, '1995-12-20', 3), (720, '1995-12-21', 4), (721, '1995-12-22', 5), (722, '1995-12-23', 6), (723, '1995-12-24', 7), (724, '1995-12-25', 1), (725, '1995-12-26', 2), (726, '1995-12-27', 3), (727, '1995-12-28', 4), (728, '1995-12-29', 5), (729, '1995-12-30', 6), (730, '1995-12-31', 7), (731, '1996-01-01', 1), (732, '1996-01-02', 2), (733, '1996-01-03', 3), (734, '1996-01-04', 4), (735, '1996-01-05', 5), (736, '1996-01-06', 6), (737, '1996-01-07', 7), (738, '1996-01-08', 1), (739, '1996-01-09', 2), (740, '1996-01-10', 3), (741, '1996-01-11', 4), (742, '1996-01-12', 5), (743, '1996-01-13', 6), (744, '1996-01-14', 7), (745, '1996-01-15', 1), (746, '1996-01-16', 2), (747, '1996-01-17', 3), (748, '1996-01-18', 4), (749, '1996-01-19', 5), (750, '1996-01-20', 6), (751, '1996-01-21', 7), (752, '1996-01-22', 1), (753, '1996-01-23', 2), (754, '1996-01-24', 3), (755, '1996-01-25', 4), (756, '1996-01-26', 5), (757, '1996-01-27', 6), (758, '1996-01-28', 7), (759, '1996-01-29', 1), (760, '1996-01-30', 2), (761, '1996-01-31', 3), (762, '1996-02-01', 4), (763, '1996-02-02', 5), (764, '1996-02-03', 6), (765, '1996-02-04', 7), (766, '1996-02-05', 1), (767, '1996-02-06', 2), (768, '1996-02-07', 3), (769, '1996-02-08', 4), (770, '1996-02-09', 5), (771, '1996-02-10', 6), (772, '1996-02-11', 7), (773, '1996-02-12', 1), (774, '1996-02-13', 2), (775, '1996-02-14', 3), (776, '1996-02-15', 4), (777, '1996-02-16', 5), (778, '1996-02-17', 6), (779, '1996-02-18', 7), (780, '1996-02-19', 1), (781, '1996-02-20', 2), (782, '1996-02-21', 3), (783, '1996-02-22', 4), (784, '1996-02-23', 5), (785, '1996-02-24', 6), (786, '1996-02-25', 7), (787, '1996-02-26', 1), (788, '1996-02-27', 2), (789, '1996-02-28', 3), (790, '1996-02-29', 4), (791, '1996-03-01', 5), (792, '1996-03-02', 6), (793, '1996-03-03', 7), (794, '1996-03-04', 1), (795, '1996-03-05', 2), (796, '1996-03-06', 3), (797, '1996-03-07', 4), (798, '1996-03-08', 5), (799, '1996-03-09', 6), (800, '1996-03-10', 7), (801, '1996-03-11', 1), (802, '1996-03-12', 2), (803, '1996-03-13', 3), (804, '1996-03-14', 4), (805, '1996-03-15', 5), (806, '1996-03-16', 6), (807, '1996-03-17', 7), (808, '1996-03-18', 1), (809, '1996-03-19', 2), (810, '1996-03-20', 3), (811, '1996-03-21', 4), (812, '1996-03-22', 5), (813, '1996-03-23', 6), (814, '1996-03-24', 7), (815, '1996-03-25', 1), (816, '1996-03-26', 2), (817, '1996-03-27', 3), (818, '1996-03-28', 4), (819, '1996-03-29', 5), (820, '1996-03-30', 6), (821, '1996-03-31', 7), (822, '1996-04-01', 1), (823, '1996-04-02', 2), (824, '1996-04-03', 3), (825, '1996-04-04', 4), (826, '1996-04-05', 5), (827, '1996-04-06', 6), (828, '1996-04-07', 7), (829, '1996-04-08', 1), (830, '1996-04-09', 2), (831, '1996-04-10', 3), (832, '1996-04-11', 4), (833, '1996-04-12', 5), (834, '1996-04-13', 6), (835, '1996-04-14', 7), (836, '1996-04-15', 1), (837, '1996-04-16', 2), (838, '1996-04-17', 3), (839, '1996-04-18', 4), (840, '1996-04-19', 5), (841, '1996-04-20', 6), (842, '1996-04-21', 7), (843, '1996-04-22', 1), (844, '1996-04-23', 2), (845, '1996-04-24', 3), (846, '1996-04-25', 4), (847, '1996-04-26', 5), (848, '1996-04-27', 6), (849, '1996-04-28', 7), (850, '1996-04-29', 1), (851, '1996-04-30', 2), (852, '1996-05-01', 3), (853, '1996-05-02', 4), (854, '1996-05-03', 5), (855, '1996-05-04', 6), (856, '1996-05-05', 7), (857, '1996-05-06', 1), (858, '1996-05-07', 2), (859, '1996-05-08', 3), (860, '1996-05-09', 4), (861, '1996-05-10', 5), (862, '1996-05-11', 6), (863, '1996-05-12', 7), (864, '1996-05-13', 1), (865, '1996-05-14', 2), (866, '1996-05-15', 3), (867, '1996-05-16', 4), (868, '1996-05-17', 5), (869, '1996-05-18', 6), (870, '1996-05-19', 7), (871, '1996-05-20', 1), (872, '1996-05-21', 2), (873, '1996-05-22', 3), (874, '1996-05-23', 4), (875, '1996-05-24', 5), (876, '1996-05-25', 6), (877, '1996-05-26', 7), (878, '1996-05-27', 1), (879, '1996-05-28', 2), (880, '1996-05-29', 3), (881, '1996-05-30', 4), (882, '1996-05-31', 5), (883, '1996-06-01', 6), (884, '1996-06-02', 7), (885, '1996-06-03', 1), (886, '1996-06-04', 2), (887, '1996-06-05', 3), (888, '1996-06-06', 4), (889, '1996-06-07', 5), (890, '1996-06-08', 6), (891, '1996-06-09', 7), (892, '1996-06-10', 1), (893, '1996-06-11', 2), (894, '1996-06-12', 3), (895, '1996-06-13', 4), (896, '1996-06-14', 5), (897, '1996-06-15', 6), (898, '1996-06-16', 7), (899, '1996-06-17', 1), (900, '1996-06-18', 2), (901, '1996-06-19', 3), (902, '1996-06-20', 4), (903, '1996-06-21', 5), (904, '1996-06-22', 6), (905, '1996-06-23', 7), (906, '1996-06-24', 1), (907, '1996-06-25', 2), (908, '1996-06-26', 3), (909, '1996-06-27', 4), (910, '1996-06-28', 5), (911, '1996-06-29', 6), (912, '1996-06-30', 7), (913, '1996-07-01', 1), (914, '1996-07-02', 2), (915, '1996-07-03', 3), (916, '1996-07-04', 4), (917, '1996-07-05', 5), (918, '1996-07-06', 6), (919, '1996-07-07', 7), (920, '1996-07-08', 1), (921, '1996-07-09', 2), (922, '1996-07-10', 3), (923, '1996-07-11', 4), (924, '1996-07-12', 5), (925, '1996-07-13', 6), (926, '1996-07-14', 7), (927, '1996-07-15', 1), (928, '1996-07-16', 2), (929, '1996-07-17', 3), (930, '1996-07-18', 4), (931, '1996-07-19', 5), (932, '1996-07-20', 6), (933, '1996-07-21', 7), (934, '1996-07-22', 1), (935, '1996-07-23', 2), (936, '1996-07-24', 3), (937, '1996-07-25', 4), (938, '1996-07-26', 5), (939, '1996-07-27', 6), (940, '1996-07-28', 7), (941, '1996-07-29', 1), (942, '1996-07-30', 2), (943, '1996-07-31', 3), (944, '1996-08-01', 4), (945, '1996-08-02', 5), (946, '1996-08-03', 6), (947, '1996-08-04', 7), (948, '1996-08-05', 1), (949, '1996-08-06', 2), (950, '1996-08-07', 3), (951, '1996-08-08', 4), (952, '1996-08-09', 5), (953, '1996-08-10', 6), (954, '1996-08-11', 7), (955, '1996-08-12', 1), (956, '1996-08-13', 2), (957, '1996-08-14', 3), (958, '1996-08-15', 4), (959, '1996-08-16', 5), (960, '1996-08-17', 6), (961, '1996-08-18', 7), (962, '1996-08-19', 1), (963, '1996-08-20', 2), (964, '1996-08-21', 3), (965, '1996-08-22', 4), (966, '1996-08-23', 5), (967, '1996-08-24', 6), (968, '1996-08-25', 7), (969, '1996-08-26', 1), (970, '1996-08-27', 2), (971, '1996-08-28', 3), (972, '1996-08-29', 4), (973, '1996-08-30', 5), (974, '1996-08-31', 6), (975, '1996-09-01', 7), (976, '1996-09-02', 1), (977, '1996-09-03', 2), (978, '1996-09-04', 3), (979, '1996-09-05', 4), (980, '1996-09-06', 5), (981, '1996-09-07', 6), (982, '1996-09-08', 7), (983, '1996-09-09', 1), (984, '1996-09-10', 2), (985, '1996-09-11', 3), (986, '1996-09-12', 4), (987, '1996-09-13', 5), (988, '1996-09-14', 6), (989, '1996-09-15', 7), (990, '1996-09-16', 1), (991, '1996-09-17', 2), (992, '1996-09-18', 3), (993, '1996-09-19', 4), (994, '1996-09-20', 5), (995, '1996-09-21', 6), (996, '1996-09-22', 7), (997, '1996-09-23', 1), (998, '1996-09-24', 2), (999, '1996-09-25', 3), (1000, '1996-09-26', 4), (1001, '1996-09-27', 5), (1002, '1996-09-28', 6), (1003, '1996-09-29', 7), (1004, '1996-09-30', 1), (1005, '1996-10-01', 2), (1006, '1996-10-02', 3), (1007, '1996-10-03', 4), (1008, '1996-10-04', 5), (1009, '1996-10-05', 6), (1010, '1996-10-06', 7), (1011, '1996-10-07', 1), (1012, '1996-10-08', 2), (1013, '1996-10-09', 3), (1014, '1996-10-10', 4), (1015, '1996-10-11', 5), (1016, '1996-10-12', 6), (1017, '1996-10-13', 7), (1018, '1996-10-14', 1), (1019, '1996-10-15', 2), (1020, '1996-10-16', 3), (1021, '1996-10-17', 4), (1022, '1996-10-18', 5), (1023, '1996-10-19', 6), (1024, '1996-10-20', 7), (1025, '1996-10-21', 1), (1026, '1996-10-22', 2), (1027, '1996-10-23', 3), (1028, '1996-10-24', 4), (1029, '1996-10-25', 5), (1030, '1996-10-26', 6), (1031, '1996-10-27', 7), (1032, '1996-10-28', 1), (1033, '1996-10-29', 2), (1034, '1996-10-30', 3), (1035, '1996-10-31', 4), (1036, '1996-11-01', 5), (1037, '1996-11-02', 6), (1038, '1996-11-03', 7), (1039, '1996-11-04', 1), (1040, '1996-11-05', 2), (1041, '1996-11-06', 3), (1042, '1996-11-07', 4), (1043, '1996-11-08', 5), (1044, '1996-11-09', 6), (1045, '1996-11-10', 7), (1046, '1996-11-11', 1), (1047, '1996-11-12', 2), (1048, '1996-11-13', 3), (1049, '1996-11-14', 4), (1050, '1996-11-15', 5), (1051, '1996-11-16', 6), (1052, '1996-11-17', 7), (1053, '1996-11-18', 1), (1054, '1996-11-19', 2), (1055, '1996-11-20', 3), (1056, '1996-11-21', 4), (1057, '1996-11-22', 5), (1058, '1996-11-23', 6), (1059, '1996-11-24', 7), (1060, '1996-11-25', 1), (1061, '1996-11-26', 2), (1062, '1996-11-27', 3), (1063, '1996-11-28', 4), (1064, '1996-11-29', 5), (1065, '1996-11-30', 6), (1066, '1996-12-01', 7), (1067, '1996-12-02', 1), (1068, '1996-12-03', 2), (1069, '1996-12-04', 3), (1070, '1996-12-05', 4), (1071, '1996-12-06', 5), (1072, '1996-12-07', 6), (1073, '1996-12-08', 7), (1074, '1996-12-09', 1), (1075, '1996-12-10', 2), (1076, '1996-12-11', 3), (1077, '1996-12-12', 4), (1078, '1996-12-13', 5), (1079, '1996-12-14', 6), (1080, '1996-12-15', 7), (1081, '1996-12-16', 1), (1082, '1996-12-17', 2), (1083, '1996-12-18', 3), (1084, '1996-12-19', 4), (1085, '1996-12-20', 5), (1086, '1996-12-21', 6), (1087, '1996-12-22', 7), (1088, '1996-12-23', 1), (1089, '1996-12-24', 2), (1090, '1996-12-25', 3), (1091, '1996-12-26', 4), (1092, '1996-12-27', 5), (1093, '1996-12-28', 6), (1094, '1996-12-29', 7), (1095, '1996-12-30', 1), (1096, '1996-12-31', 2), (1097, '1997-01-01', 3), (1098, '1997-01-02', 4), (1099, '1997-01-03', 5), (1100, '1997-01-04', 6), (1101, '1997-01-05', 7), (1102, '1997-01-06', 1), (1103, '1997-01-07', 2), (1104, '1997-01-08', 3), (1105, '1997-01-09', 4), (1106, '1997-01-10', 5), (1107, '1997-01-11', 6), (1108, '1997-01-12', 7), (1109, '1997-01-13', 1), (1110, '1997-01-14', 2), (1111, '1997-01-15', 3), (1112, '1997-01-16', 4), (1113, '1997-01-17', 5), (1114, '1997-01-18', 6), (1115, '1997-01-19', 7), (1116, '1997-01-20', 1), (1117, '1997-01-21', 2), (1118, '1997-01-22', 3), (1119, '1997-01-23', 4), (1120, '1997-01-24', 5), (1121, '1997-01-25', 6), (1122, '1997-01-26', 7), (1123, '1997-01-27', 1), (1124, '1997-01-28', 2), (1125, '1997-01-29', 3), (1126, '1997-01-30', 4), (1127, '1997-01-31', 5), (1128, '1997-02-01', 6), (1129, '1997-02-02', 7), (1130, '1997-02-03', 1), (1131, '1997-02-04', 2), (1132, '1997-02-05', 3), (1133, '1997-02-06', 4), (1134, '1997-02-07', 5), (1135, '1997-02-08', 6), (1136, '1997-02-09', 7), (1137, '1997-02-10', 1), (1138, '1997-02-11', 2), (1139, '1997-02-12', 3), (1140, '1997-02-13', 4), (1141, '1997-02-14', 5), (1142, '1997-02-15', 6), (1143, '1997-02-16', 7), (1144, '1997-02-17', 1), (1145, '1997-02-18', 2), (1146, '1997-02-19', 3), (1147, '1997-02-20', 4), (1148, '1997-02-21', 5), (1149, '1997-02-22', 6), (1150, '1997-02-23', 7), (1151, '1997-02-24', 1), (1152, '1997-02-25', 2), (1153, '1997-02-26', 3), (1154, '1997-02-27', 4), (1155, '1997-02-28', 5), (1156, '1997-03-01', 6), (1157, '1997-03-02', 7), (1158, '1997-03-03', 1), (1159, '1997-03-04', 2), (1160, '1997-03-05', 3), (1161, '1997-03-06', 4), (1162, '1997-03-07', 5), (1163, '1997-03-08', 6), (1164, '1997-03-09', 7), (1165, '1997-03-10', 1), (1166, '1997-03-11', 2), (1167, '1997-03-12', 3), (1168, '1997-03-13', 4), (1169, '1997-03-14', 5), (1170, '1997-03-15', 6), (1171, '1997-03-16', 7), (1172, '1997-03-17', 1), (1173, '1997-03-18', 2), (1174, '1997-03-19', 3), (1175, '1997-03-20', 4), (1176, '1997-03-21', 5), (1177, '1997-03-22', 6), (1178, '1997-03-23', 7), (1179, '1997-03-24', 1), (1180, '1997-03-25', 2), (1181, '1997-03-26', 3), (1182, '1997-03-27', 4), (1183, '1997-03-28', 5), (1184, '1997-03-29', 6), (1185, '1997-03-30', 7), (1186, '1997-03-31', 1), (1187, '1997-04-01', 2), (1188, '1997-04-02', 3), (1189, '1997-04-03', 4), (1190, '1997-04-04', 5), (1191, '1997-04-05', 6), (1192, '1997-04-06', 7), (1193, '1997-04-07', 1), (1194, '1997-04-08', 2), (1195, '1997-04-09', 3), (1196, '1997-04-10', 4), (1197, '1997-04-11', 5), (1198, '1997-04-12', 6), (1199, '1997-04-13', 7), (1200, '1997-04-14', 1), (1201, '1997-04-15', 2), (1202, '1997-04-16', 3), (1203, '1997-04-17', 4), (1204, '1997-04-18', 5), (1205, '1997-04-19', 6), (1206, '1997-04-20', 7), (1207, '1997-04-21', 1), (1208, '1997-04-22', 2), (1209, '1997-04-23', 3), (1210, '1997-04-24', 4), (1211, '1997-04-25', 5), (1212, '1997-04-26', 6), (1213, '1997-04-27', 7), (1214, '1997-04-28', 1), (1215, '1997-04-29', 2), (1216, '1997-04-30', 3), (1217, '1997-05-01', 4), (1218, '1997-05-02', 5), (1219, '1997-05-03', 6), (1220, '1997-05-04', 7), (1221, '1997-05-05', 1), (1222, '1997-05-06', 2), (1223, '1997-05-07', 3), (1224, '1997-05-08', 4), (1225, '1997-05-09', 5), (1226, '1997-05-10', 6), (1227, '1997-05-11', 7), (1228, '1997-05-12', 1), (1229, '1997-05-13', 2), (1230, '1997-05-14', 3), (1231, '1997-05-15', 4), (1232, '1997-05-16', 5), (1233, '1997-05-17', 6), (1234, '1997-05-18', 7), (1235, '1997-05-19', 1), (1236, '1997-05-20', 2), (1237, '1997-05-21', 3), (1238, '1997-05-22', 4), (1239, '1997-05-23', 5), (1240, '1997-05-24', 6), (1241, '1997-05-25', 7), (1242, '1997-05-26', 1), (1243, '1997-05-27', 2), (1244, '1997-05-28', 3), (1245, '1997-05-29', 4), (1246, '1997-05-30', 5), (1247, '1997-05-31', 6), (1248, '1997-06-01', 7), (1249, '1997-06-02', 1), (1250, '1997-06-03', 2), (1251, '1997-06-04', 3), (1252, '1997-06-05', 4), (1253, '1997-06-06', 5), (1254, '1997-06-07', 6), (1255, '1997-06-08', 7), (1256, '1997-06-09', 1), (1257, '1997-06-10', 2), (1258, '1997-06-11', 3), (1259, '1997-06-12', 4), (1260, '1997-06-13', 5), (1261, '1997-06-14', 6), (1262, '1997-06-15', 7), (1263, '1997-06-16', 1), (1264, '1997-06-17', 2), (1265, '1997-06-18', 3), (1266, '1997-06-19', 4), (1267, '1997-06-20', 5), (1268, '1997-06-21', 6), (1269, '1997-06-22', 7), (1270, '1997-06-23', 1), (1271, '1997-06-24', 2), (1272, '1997-06-25', 3), (1273, '1997-06-26', 4), (1274, '1997-06-27', 5), (1275, '1997-06-28', 6), (1276, '1997-06-29', 7), (1277, '1997-06-30', 1), (1278, '1997-07-01', 2), (1279, '1997-07-02', 3), (1280, '1997-07-03', 4), (1281, '1997-07-04', 5), (1282, '1997-07-05', 6), (1283, '1997-07-06', 7), (1284, '1997-07-07', 1), (1285, '1997-07-08', 2), (1286, '1997-07-09', 3), (1287, '1997-07-10', 4), (1288, '1997-07-11', 5), (1289, '1997-07-12', 6), (1290, '1997-07-13', 7), (1291, '1997-07-14', 1), (1292, '1997-07-15', 2), (1293, '1997-07-16', 3), (1294, '1997-07-17', 4), (1295, '1997-07-18', 5), (1296, '1997-07-19', 6), (1297, '1997-07-20', 7), (1298, '1997-07-21', 1), (1299, '1997-07-22', 2), (1300, '1997-07-23', 3), (1301, '1997-07-24', 4), (1302, '1997-07-25', 5), (1303, '1997-07-26', 6), (1304, '1997-07-27', 7), (1305, '1997-07-28', 1), (1306, '1997-07-29', 2), (1307, '1997-07-30', 3), (1308, '1997-07-31', 4), (1309, '1997-08-01', 5), (1310, '1997-08-02', 6), (1311, '1997-08-03', 7), (1312, '1997-08-04', 1), (1313, '1997-08-05', 2), (1314, '1997-08-06', 3), (1315, '1997-08-07', 4), (1316, '1997-08-08', 5), (1317, '1997-08-09', 6), (1318, '1997-08-10', 7), (1319, '1997-08-11', 1), (1320, '1997-08-12', 2), (1321, '1997-08-13', 3), (1322, '1997-08-14', 4), (1323, '1997-08-15', 5), (1324, '1997-08-16', 6), (1325, '1997-08-17', 7), (1326, '1997-08-18', 1), (1327, '1997-08-19', 2), (1328, '1997-08-20', 3), (1329, '1997-08-21', 4), (1330, '1997-08-22', 5), (1331, '1997-08-23', 6), (1332, '1997-08-24', 7), (1333, '1997-08-25', 1), (1334, '1997-08-26', 2), (1335, '1997-08-27', 3), (1336, '1997-08-28', 4), (1337, '1997-08-29', 5), (1338, '1997-08-30', 6), (1339, '1997-08-31', 7), (1340, '1997-09-01', 1), (1341, '1997-09-02', 2), (1342, '1997-09-03', 3), (1343, '1997-09-04', 4), (1344, '1997-09-05', 5), (1345, '1997-09-06', 6), (1346, '1997-09-07', 7), (1347, '1997-09-08', 1), (1348, '1997-09-09', 2), (1349, '1997-09-10', 3), (1350, '1997-09-11', 4), (1351, '1997-09-12', 5), (1352, '1997-09-13', 6), (1353, '1997-09-14', 7), (1354, '1997-09-15', 1), (1355, '1997-09-16', 2), (1356, '1997-09-17', 3), (1357, '1997-09-18', 4), (1358, '1997-09-19', 5), (1359, '1997-09-20', 6), (1360, '1997-09-21', 7), (1361, '1997-09-22', 1), (1362, '1997-09-23', 2), (1363, '1997-09-24', 3), (1364, '1997-09-25', 4), (1365, '1997-09-26', 5), (1366, '1997-09-27', 6), (1367, '1997-09-28', 7), (1368, '1997-09-29', 1), (1369, '1997-09-30', 2), (1370, '1997-10-01', 3), (1371, '1997-10-02', 4), (1372, '1997-10-03', 5), (1373, '1997-10-04', 6), (1374, '1997-10-05', 7), (1375, '1997-10-06', 1), (1376, '1997-10-07', 2), (1377, '1997-10-08', 3), (1378, '1997-10-09', 4), (1379, '1997-10-10', 5), (1380, '1997-10-11', 6), (1381, '1997-10-12', 7), (1382, '1997-10-13', 1), (1383, '1997-10-14', 2), (1384, '1997-10-15', 3), (1385, '1997-10-16', 4), (1386, '1997-10-17', 5), (1387, '1997-10-18', 6), (1388, '1997-10-19', 7), (1389, '1997-10-20', 1), (1390, '1997-10-21', 2), (1391, '1997-10-22', 3), (1392, '1997-10-23', 4), (1393, '1997-10-24', 5), (1394, '1997-10-25', 6), (1395, '1997-10-26', 7), (1396, '1997-10-27', 1), (1397, '1997-10-28', 2), (1398, '1997-10-29', 3), (1399, '1997-10-30', 4), (1400, '1997-10-31', 5), (1401, '1997-11-01', 6), (1402, '1997-11-02', 7), (1403, '1997-11-03', 1), (1404, '1997-11-04', 2), (1405, '1997-11-05', 3), (1406, '1997-11-06', 4), (1407, '1997-11-07', 5), (1408, '1997-11-08', 6), (1409, '1997-11-09', 7), (1410, '1997-11-10', 1), (1411, '1997-11-11', 2), (1412, '1997-11-12', 3), (1413, '1997-11-13', 4), (1414, '1997-11-14', 5), (1415, '1997-11-15', 6), (1416, '1997-11-16', 7), (1417, '1997-11-17', 1), (1418, '1997-11-18', 2), (1419, '1997-11-19', 3), (1420, '1997-11-20', 4), (1421, '1997-11-21', 5), (1422, '1997-11-22', 6), (1423, '1997-11-23', 7), (1424, '1997-11-24', 1), (1425, '1997-11-25', 2), (1426, '1997-11-26', 3), (1427, '1997-11-27', 4), (1428, '1997-11-28', 5), (1429, '1997-11-29', 6), (1430, '1997-11-30', 7), (1431, '1997-12-01', 1), (1432, '1997-12-02', 2), (1433, '1997-12-03', 3), (1434, '1997-12-04', 4), (1435, '1997-12-05', 5), (1436, '1997-12-06', 6), (1437, '1997-12-07', 7), (1438, '1997-12-08', 1), (1439, '1997-12-09', 2), (1440, '1997-12-10', 3), (1441, '1997-12-11', 4), (1442, '1997-12-12', 5), (1443, '1997-12-13', 6), (1444, '1997-12-14', 7), (1445, '1997-12-15', 1), (1446, '1997-12-16', 2), (1447, '1997-12-17', 3), (1448, '1997-12-18', 4), (1449, '1997-12-19', 5), (1450, '1997-12-20', 6), (1451, '1997-12-21', 7), (1452, '1997-12-22', 1), (1453, '1997-12-23', 2), (1454, '1997-12-24', 3), (1455, '1997-12-25', 4), (1456, '1997-12-26', 5), (1457, '1997-12-27', 6), (1458, '1997-12-28', 7), (1459, '1997-12-29', 1), (1460, '1997-12-30', 2), (1461, '1997-12-31', 3), (1462, '1998-01-01', 4), (1463, '1998-01-02', 5), (1464, '1998-01-03', 6), (1465, '1998-01-04', 7), (1466, '1998-01-05', 1), (1467, '1998-01-06', 2), (1468, '1998-01-07', 3), (1469, '1998-01-08', 4), (1470, '1998-01-09', 5), (1471, '1998-01-10', 6), (1472, '1998-01-11', 7), (1473, '1998-01-12', 1), (1474, '1998-01-13', 2), (1475, '1998-01-14', 3), (1476, '1998-01-15', 4), (1477, '1998-01-16', 5), (1478, '1998-01-17', 6), (1479, '1998-01-18', 7), (1480, '1998-01-19', 1), (1481, '1998-01-20', 2), (1482, '1998-01-21', 3), (1483, '1998-01-22', 4), (1484, '1998-01-23', 5), (1485, '1998-01-24', 6), (1486, '1998-01-25', 7), (1487, '1998-01-26', 1), (1488, '1998-01-27', 2), (1489, '1998-01-28', 3), (1490, '1998-01-29', 4), (1491, '1998-01-30', 5), (1492, '1998-01-31', 6), (1493, '1998-02-01', 7), (1494, '1998-02-02', 1), (1495, '1998-02-03', 2), (1496, '1998-02-04', 3), (1497, '1998-02-05', 4), (1498, '1998-02-06', 5), (1499, '1998-02-07', 6), (1500, '1998-02-08', 7), (1501, '1998-02-09', 1), (1502, '1998-02-10', 2), (1503, '1998-02-11', 3), (1504, '1998-02-12', 4), (1505, '1998-02-13', 5), (1506, '1998-02-14', 6), (1507, '1998-02-15', 7), (1508, '1998-02-16', 1), (1509, '1998-02-17', 2), (1510, '1998-02-18', 3), (1511, '1998-02-19', 4), (1512, '1998-02-20', 5), (1513, '1998-02-21', 6), (1514, '1998-02-22', 7), (1515, '1998-02-23', 1), (1516, '1998-02-24', 2), (1517, '1998-02-25', 3), (1518, '1998-02-26', 4), (1519, '1998-02-27', 5), (1520, '1998-02-28', 6), (1521, '1998-03-01', 7), (1522, '1998-03-02', 1), (1523, '1998-03-03', 2), (1524, '1998-03-04', 3), (1525, '1998-03-05', 4), (1526, '1998-03-06', 5), (1527, '1998-03-07', 6), (1528, '1998-03-08', 7), (1529, '1998-03-09', 1), (1530, '1998-03-10', 2), (1531, '1998-03-11', 3), (1532, '1998-03-12', 4), (1533, '1998-03-13', 5), (1534, '1998-03-14', 6), (1535, '1998-03-15', 7), (1536, '1998-03-16', 1), (1537, '1998-03-17', 2), (1538, '1998-03-18', 3), (1539, '1998-03-19', 4), (1540, '1998-03-20', 5), (1541, '1998-03-21', 6), (1542, '1998-03-22', 7), (1543, '1998-03-23', 1), (1544, '1998-03-24', 2), (1545, '1998-03-25', 3), (1546, '1998-03-26', 4), (1547, '1998-03-27', 5), (1548, '1998-03-28', 6), (1549, '1998-03-29', 7), (1550, '1998-03-30', 1), (1551, '1998-03-31', 2), (1552, '1998-04-01', 3), (1553, '1998-04-02', 4), (1554, '1998-04-03', 5), (1555, '1998-04-04', 6), (1556, '1998-04-05', 7), (1557, '1998-04-06', 1), (1558, '1998-04-07', 2), (1559, '1998-04-08', 3), (1560, '1998-04-09', 4), (1561, '1998-04-10', 5), (1562, '1998-04-11', 6), (1563, '1998-04-12', 7), (1564, '1998-04-13', 1), (1565, '1998-04-14', 2), (1566, '1998-04-15', 3), (1567, '1998-04-16', 4), (1568, '1998-04-17', 5), (1569, '1998-04-18', 6), (1570, '1998-04-19', 7), (1571, '1998-04-20', 1), (1572, '1998-04-21', 2), (1573, '1998-04-22', 3), (1574, '1998-04-23', 4), (1575, '1998-04-24', 5), (1576, '1998-04-25', 6), (1577, '1998-04-26', 7), (1578, '1998-04-27', 1), (1579, '1998-04-28', 2), (1580, '1998-04-29', 3), (1581, '1998-04-30', 4), (1582, '1998-05-01', 5), (1583, '1998-05-02', 6), (1584, '1998-05-03', 7), (1585, '1998-05-04', 1), (1586, '1998-05-05', 2), (1587, '1998-05-06', 3), (1588, '1998-05-07', 4), (1589, '1998-05-08', 5), (1590, '1998-05-09', 6), (1591, '1998-05-10', 7), (1592, '1998-05-11', 1), (1593, '1998-05-12', 2), (1594, '1998-05-13', 3), (1595, '1998-05-14', 4), (1596, '1998-05-15', 5), (1597, '1998-05-16', 6), (1598, '1998-05-17', 7), (1599, '1998-05-18', 1), (1600, '1998-05-19', 2), (1601, '1998-05-20', 3), (1602, '1998-05-21', 4), (1603, '1998-05-22', 5), (1604, '1998-05-23', 6), (1605, '1998-05-24', 7), (1606, '1998-05-25', 1), (1607, '1998-05-26', 2), (1608, '1998-05-27', 3), (1609, '1998-05-28', 4), (1610, '1998-05-29', 5), (1611, '1998-05-30', 6), (1612, '1998-05-31', 7), (1613, '1998-06-01', 1), (1614, '1998-06-02', 2), (1615, '1998-06-03', 3), (1616, '1998-06-04', 4), (1617, '1998-06-05', 5), (1618, '1998-06-06', 6), (1619, '1998-06-07', 7), (1620, '1998-06-08', 1), (1621, '1998-06-09', 2), (1622, '1998-06-10', 3), (1623, '1998-06-11', 4), (1624, '1998-06-12', 5), (1625, '1998-06-13', 6), (1626, '1998-06-14', 7), (1627, '1998-06-15', 1), (1628, '1998-06-16', 2), (1629, '1998-06-17', 3), (1630, '1998-06-18', 4), (1631, '1998-06-19', 5), (1632, '1998-06-20', 6), (1633, '1998-06-21', 7), (1634, '1998-06-22', 1), (1635, '1998-06-23', 2), (1636, '1998-06-24', 3), (1637, '1998-06-25', 4), (1638, '1998-06-26', 5), (1639, '1998-06-27', 6), (1640, '1998-06-28', 7), (1641, '1998-06-29', 1), (1642, '1998-06-30', 2), (1643, '1998-07-01', 3), (1644, '1998-07-02', 4), (1645, '1998-07-03', 5), (1646, '1998-07-04', 6), (1647, '1998-07-05', 7), (1648, '1998-07-06', 1), (1649, '1998-07-07', 2), (1650, '1998-07-08', 3), (1651, '1998-07-09', 4), (1652, '1998-07-10', 5), (1653, '1998-07-11', 6), (1654, '1998-07-12', 7), (1655, '1998-07-13', 1), (1656, '1998-07-14', 2), (1657, '1998-07-15', 3), (1658, '1998-07-16', 4), (1659, '1998-07-17', 5), (1660, '1998-07-18', 6), (1661, '1998-07-19', 7), (1662, '1998-07-20', 1), (1663, '1998-07-21', 2), (1664, '1998-07-22', 3), (1665, '1998-07-23', 4), (1666, '1998-07-24', 5), (1667, '1998-07-25', 6), (1668, '1998-07-26', 7), (1669, '1998-07-27', 1), (1670, '1998-07-28', 2), (1671, '1998-07-29', 3), (1672, '1998-07-30', 4), (1673, '1998-07-31', 5), (1674, '1998-08-01', 6), (1675, '1998-08-02', 7), (1676, '1998-08-03', 1), (1677, '1998-08-04', 2), (1678, '1998-08-05', 3), (1679, '1998-08-06', 4), (1680, '1998-08-07', 5), (1681, '1998-08-08', 6), (1682, '1998-08-09', 7), (1683, '1998-08-10', 1), (1684, '1998-08-11', 2), (1685, '1998-08-12', 3), (1686, '1998-08-13', 4), (1687, '1998-08-14', 5), (1688, '1998-08-15', 6), (1689, '1998-08-16', 7), (1690, '1998-08-17', 1), (1691, '1998-08-18', 2), (1692, '1998-08-19', 3), (1693, '1998-08-20', 4), (1694, '1998-08-21', 5), (1695, '1998-08-22', 6), (1696, '1998-08-23', 7), (1697, '1998-08-24', 1), (1698, '1998-08-25', 2), (1699, '1998-08-26', 3), (1700, '1998-08-27', 4), (1701, '1998-08-28', 5), (1702, '1998-08-29', 6), (1703, '1998-08-30', 7), (1704, '1998-08-31', 1), (1705, '1998-09-01', 2), (1706, '1998-09-02', 3), (1707, '1998-09-03', 4), (1708, '1998-09-04', 5), (1709, '1998-09-05', 6), (1710, '1998-09-06', 7), (1711, '1998-09-07', 1), (1712, '1998-09-08', 2), (1713, '1998-09-09', 3), (1714, '1998-09-10', 4), (1715, '1998-09-11', 5), (1716, '1998-09-12', 6), (1717, '1998-09-13', 7), (1718, '1998-09-14', 1), (1719, '1998-09-15', 2), (1720, '1998-09-16', 3), (1721, '1998-09-17', 4), (1722, '1998-09-18', 5), (1723, '1998-09-19', 6), (1724, '1998-09-20', 7), (1725, '1998-09-21', 1), (1726, '1998-09-22', 2), (1727, '1998-09-23', 3), (1728, '1998-09-24', 4), (1729, '1998-09-25', 5), (1730, '1998-09-26', 6), (1731, '1998-09-27', 7), (1732, '1998-09-28', 1), (1733, '1998-09-29', 2), (1734, '1998-09-30', 3), (1735, '1998-10-01', 4), (1736, '1998-10-02', 5), (1737, '1998-10-03', 6), (1738, '1998-10-04', 7), (1739, '1998-10-05', 1), (1740, '1998-10-06', 2), (1741, '1998-10-07', 3), (1742, '1998-10-08', 4), (1743, '1998-10-09', 5), (1744, '1998-10-10', 6), (1745, '1998-10-11', 7), (1746, '1998-10-12', 1), (1747, '1998-10-13', 2), (1748, '1998-10-14', 3), (1749, '1998-10-15', 4), (1750, '1998-10-16', 5), (1751, '1998-10-17', 6), (1752, '1998-10-18', 7), (1753, '1998-10-19', 1), (1754, '1998-10-20', 2), (1755, '1998-10-21', 3), (1756, '1998-10-22', 4), (1757, '1998-10-23', 5), (1758, '1998-10-24', 6), (1759, '1998-10-25', 7), (1760, '1998-10-26', 1), (1761, '1998-10-27', 2), (1762, '1998-10-28', 3), (1763, '1998-10-29', 4), (1764, '1998-10-30', 5), (1765, '1998-10-31', 6), (1766, '1998-11-01', 7), (1767, '1998-11-02', 1), (1768, '1998-11-03', 2), (1769, '1998-11-04', 3), (1770, '1998-11-05', 4), (1771, '1998-11-06', 5), (1772, '1998-11-07', 6), (1773, '1998-11-08', 7), (1774, '1998-11-09', 1), (1775, '1998-11-10', 2), (1776, '1998-11-11', 3), (1777, '1998-11-12', 4), (1778, '1998-11-13', 5), (1779, '1998-11-14', 6), (1780, '1998-11-15', 7), (1781, '1998-11-16', 1), (1782, '1998-11-17', 2), (1783, '1998-11-18', 3), (1784, '1998-11-19', 4), (1785, '1998-11-20', 5), (1786, '1998-11-21', 6), (1787, '1998-11-22', 7), (1788, '1998-11-23', 1), (1789, '1998-11-24', 2), (1790, '1998-11-25', 3), (1791, '1998-11-26', 4), (1792, '1998-11-27', 5), (1793, '1998-11-28', 6), (1794, '1998-11-29', 7), (1795, '1998-11-30', 1), (1796, '1998-12-01', 2), (1797, '1998-12-02', 3), (1798, '1998-12-03', 4), (1799, '1998-12-04', 5), (1800, '1998-12-05', 6), (1801, '1998-12-06', 7), (1802, '1998-12-07', 1), (1803, '1998-12-08', 2), (1804, '1998-12-09', 3), (1805, '1998-12-10', 4), (1806, '1998-12-11', 5), (1807, '1998-12-12', 6), (1808, '1998-12-13', 7), (1809, '1998-12-14', 1), (1810, '1998-12-15', 2), (1811, '1998-12-16', 3), (1812, '1998-12-17', 4), (1813, '1998-12-18', 5), (1814, '1998-12-19', 6), (1815, '1998-12-20', 7), (1816, '1998-12-21', 1), (1817, '1998-12-22', 2), (1818, '1998-12-23', 3), (1819, '1998-12-24', 4), (1820, '1998-12-25', 5), (1821, '1998-12-26', 6), (1822, '1998-12-27', 7), (1823, '1998-12-28', 1), (1824, '1998-12-29', 2), (1825, '1998-12-30', 3), (1826, '1998-12-31', 4), (1827, '1999-01-01', 5), (1828, '1999-01-02', 6), (1829, '1999-01-03', 7), (1830, '1999-01-04', 1), (1831, '1999-01-05', 2), (1832, '1999-01-06', 3), (1833, '1999-01-07', 4), (1834, '1999-01-08', 5), (1835, '1999-01-09', 6), (1836, '1999-01-10', 7), (1837, '1999-01-11', 1), (1838, '1999-01-12', 2), (1839, '1999-01-13', 3), (1840, '1999-01-14', 4), (1841, '1999-01-15', 5), (1842, '1999-01-16', 6), (1843, '1999-01-17', 7), (1844, '1999-01-18', 1), (1845, '1999-01-19', 2), (1846, '1999-01-20', 3), (1847, '1999-01-21', 4), (1848, '1999-01-22', 5), (1849, '1999-01-23', 6), (1850, '1999-01-24', 7), (1851, '1999-01-25', 1), (1852, '1999-01-26', 2), (1853, '1999-01-27', 3), (1854, '1999-01-28', 4), (1855, '1999-01-29', 5), (1856, '1999-01-30', 6), (1857, '1999-01-31', 7), (1858, '1999-02-01', 1), (1859, '1999-02-02', 2), (1860, '1999-02-03', 3), (1861, '1999-02-04', 4), (1862, '1999-02-05', 5), (1863, '1999-02-06', 6), (1864, '1999-02-07', 7), (1865, '1999-02-08', 1), (1866, '1999-02-09', 2), (1867, '1999-02-10', 3), (1868, '1999-02-11', 4), (1869, '1999-02-12', 5), (1870, '1999-02-13', 6), (1871, '1999-02-14', 7), (1872, '1999-02-15', 1), (1873, '1999-02-16', 2), (1874, '1999-02-17', 3), (1875, '1999-02-18', 4), (1876, '1999-02-19', 5), (1877, '1999-02-20', 6), (1878, '1999-02-21', 7), (1879, '1999-02-22', 1), (1880, '1999-02-23', 2), (1881, '1999-02-24', 3), (1882, '1999-02-25', 4), (1883, '1999-02-26', 5), (1884, '1999-02-27', 6), (1885, '1999-02-28', 7), (1886, '1999-03-01', 1), (1887, '1999-03-02', 2), (1888, '1999-03-03', 3), (1889, '1999-03-04', 4), (1890, '1999-03-05', 5), (1891, '1999-03-06', 6), (1892, '1999-03-07', 7), (1893, '1999-03-08', 1), (1894, '1999-03-09', 2), (1895, '1999-03-10', 3), (1896, '1999-03-11', 4), (1897, '1999-03-12', 5), (1898, '1999-03-13', 6), (1899, '1999-03-14', 7), (1900, '1999-03-15', 1), (1901, '1999-03-16', 2), (1902, '1999-03-17', 3), (1903, '1999-03-18', 4), (1904, '1999-03-19', 5), (1905, '1999-03-20', 6), (1906, '1999-03-21', 7), (1907, '1999-03-22', 1), (1908, '1999-03-23', 2), (1909, '1999-03-24', 3), (1910, '1999-03-25', 4), (1911, '1999-03-26', 5), (1912, '1999-03-27', 6), (1913, '1999-03-28', 7), (1914, '1999-03-29', 1), (1915, '1999-03-30', 2), (1916, '1999-03-31', 3), (1917, '1999-04-01', 4), (1918, '1999-04-02', 5), (1919, '1999-04-03', 6), (1920, '1999-04-04', 7), (1921, '1999-04-05', 1), (1922, '1999-04-06', 2), (1923, '1999-04-07', 3), (1924, '1999-04-08', 4), (1925, '1999-04-09', 5), (1926, '1999-04-10', 6), (1927, '1999-04-11', 7), (1928, '1999-04-12', 1), (1929, '1999-04-13', 2), (1930, '1999-04-14', 3), (1931, '1999-04-15', 4), (1932, '1999-04-16', 5), (1933, '1999-04-17', 6), (1934, '1999-04-18', 7), (1935, '1999-04-19', 1), (1936, '1999-04-20', 2), (1937, '1999-04-21', 3), (1938, '1999-04-22', 4), (1939, '1999-04-23', 5), (1940, '1999-04-24', 6), (1941, '1999-04-25', 7), (1942, '1999-04-26', 1), (1943, '1999-04-27', 2), (1944, '1999-04-28', 3), (1945, '1999-04-29', 4), (1946, '1999-04-30', 5), (1947, '1999-05-01', 6), (1948, '1999-05-02', 7), (1949, '1999-05-03', 1), (1950, '1999-05-04', 2), (1951, '1999-05-05', 3), (1952, '1999-05-06', 4), (1953, '1999-05-07', 5), (1954, '1999-05-08', 6), (1955, '1999-05-09', 7), (1956, '1999-05-10', 1), (1957, '1999-05-11', 2), (1958, '1999-05-12', 3), (1959, '1999-05-13', 4), (1960, '1999-05-14', 5), (1961, '1999-05-15', 6), (1962, '1999-05-16', 7), (1963, '1999-05-17', 1), (1964, '1999-05-18', 2), (1965, '1999-05-19', 3), (1966, '1999-05-20', 4), (1967, '1999-05-21', 5), (1968, '1999-05-22', 6), (1969, '1999-05-23', 7), (1970, '1999-05-24', 1), (1971, '1999-05-25', 2), (1972, '1999-05-26', 3), (1973, '1999-05-27', 4), (1974, '1999-05-28', 5), (1975, '1999-05-29', 6), (1976, '1999-05-30', 7), (1977, '1999-05-31', 1), (1978, '1999-06-01', 2), (1979, '1999-06-02', 3), (1980, '1999-06-03', 4), (1981, '1999-06-04', 5), (1982, '1999-06-05', 6), (1983, '1999-06-06', 7), (1984, '1999-06-07', 1), (1985, '1999-06-08', 2), (1986, '1999-06-09', 3), (1987, '1999-06-10', 4), (1988, '1999-06-11', 5), (1989, '1999-06-12', 6), (1990, '1999-06-13', 7), (1991, '1999-06-14', 1), (1992, '1999-06-15', 2), (1993, '1999-06-16', 3), (1994, '1999-06-17', 4), (1995, '1999-06-18', 5), (1996, '1999-06-19', 6), (1997, '1999-06-20', 7), (1998, '1999-06-21', 1), (1999, '1999-06-22', 2), (2000, '1999-06-23', 3), (2001, '1999-06-24', 4), (2002, '1999-06-25', 5), (2003, '1999-06-26', 6), (2004, '1999-06-27', 7), (2005, '1999-06-28', 1), (2006, '1999-06-29', 2), (2007, '1999-06-30', 3), (2008, '1999-07-01', 4), (2009, '1999-07-02', 5), (2010, '1999-07-03', 6), (2011, '1999-07-04', 7), (2012, '1999-07-05', 1), (2013, '1999-07-06', 2), (2014, '1999-07-07', 3), (2015, '1999-07-08', 4), (2016, '1999-07-09', 5), (2017, '1999-07-10', 6), (2018, '1999-07-11', 7), (2019, '1999-07-12', 1), (2020, '1999-07-13', 2), (2021, '1999-07-14', 3), (2022, '1999-07-15', 4), (2023, '1999-07-16', 5), (2024, '1999-07-17', 6), (2025, '1999-07-18', 7), (2026, '1999-07-19', 1), (2027, '1999-07-20', 2), (2028, '1999-07-21', 3), (2029, '1999-07-22', 4), (2030, '1999-07-23', 5), (2031, '1999-07-24', 6), (2032, '1999-07-25', 7), (2033, '1999-07-26', 1), (2034, '1999-07-27', 2), (2035, '1999-07-28', 3), (2036, '1999-07-29', 4), (2037, '1999-07-30', 5), (2038, '1999-07-31', 6), (2039, '1999-08-01', 7), (2040, '1999-08-02', 1), (2041, '1999-08-03', 2), (2042, '1999-08-04', 3), (2043, '1999-08-05', 4), (2044, '1999-08-06', 5), (2045, '1999-08-07', 6), (2046, '1999-08-08', 7), (2047, '1999-08-09', 1), (2048, '1999-08-10', 2), (2049, '1999-08-11', 3), (2050, '1999-08-12', 4), (2051, '1999-08-13', 5), (2052, '1999-08-14', 6), (2053, '1999-08-15', 7), (2054, '1999-08-16', 1), (2055, '1999-08-17', 2), (2056, '1999-08-18', 3), (2057, '1999-08-19', 4), (2058, '1999-08-20', 5), (2059, '1999-08-21', 6), (2060, '1999-08-22', 7), (2061, '1999-08-23', 1), (2062, '1999-08-24', 2), (2063, '1999-08-25', 3), (2064, '1999-08-26', 4), (2065, '1999-08-27', 5), (2066, '1999-08-28', 6), (2067, '1999-08-29', 7), (2068, '1999-08-30', 1), (2069, '1999-08-31', 2), (2070, '1999-09-01', 3), (2071, '1999-09-02', 4), (2072, '1999-09-03', 5), (2073, '1999-09-04', 6), (2074, '1999-09-05', 7), (2075, '1999-09-06', 1), (2076, '1999-09-07', 2), (2077, '1999-09-08', 3), (2078, '1999-09-09', 4), (2079, '1999-09-10', 5), (2080, '1999-09-11', 6), (2081, '1999-09-12', 7), (2082, '1999-09-13', 1), (2083, '1999-09-14', 2), (2084, '1999-09-15', 3), (2085, '1999-09-16', 4), (2086, '1999-09-17', 5), (2087, '1999-09-18', 6), (2088, '1999-09-19', 7), (2089, '1999-09-20', 1), (2090, '1999-09-21', 2), (2091, '1999-09-22', 3), (2092, '1999-09-23', 4), (2093, '1999-09-24', 5), (2094, '1999-09-25', 6), (2095, '1999-09-26', 7), (2096, '1999-09-27', 1), (2097, '1999-09-28', 2), (2098, '1999-09-29', 3), (2099, '1999-09-30', 4), (2100, '1999-10-01', 5), (2101, '1999-10-02', 6), (2102, '1999-10-03', 7), (2103, '1999-10-04', 1), (2104, '1999-10-05', 2), (2105, '1999-10-06', 3), (2106, '1999-10-07', 4), (2107, '1999-10-08', 5), (2108, '1999-10-09', 6), (2109, '1999-10-10', 7), (2110, '1999-10-11', 1), (2111, '1999-10-12', 2), (2112, '1999-10-13', 3), (2113, '1999-10-14', 4), (2114, '1999-10-15', 5), (2115, '1999-10-16', 6), (2116, '1999-10-17', 7), (2117, '1999-10-18', 1), (2118, '1999-10-19', 2), (2119, '1999-10-20', 3), (2120, '1999-10-21', 4), (2121, '1999-10-22', 5), (2122, '1999-10-23', 6), (2123, '1999-10-24', 7), (2124, '1999-10-25', 1), (2125, '1999-10-26', 2), (2126, '1999-10-27', 3), (2127, '1999-10-28', 4), (2128, '1999-10-29', 5), (2129, '1999-10-30', 6), (2130, '1999-10-31', 7), (2131, '1999-11-01', 1), (2132, '1999-11-02', 2), (2133, '1999-11-03', 3), (2134, '1999-11-04', 4), (2135, '1999-11-05', 5), (2136, '1999-11-06', 6), (2137, '1999-11-07', 7), (2138, '1999-11-08', 1), (2139, '1999-11-09', 2), (2140, '1999-11-10', 3), (2141, '1999-11-11', 4), (2142, '1999-11-12', 5), (2143, '1999-11-13', 6), (2144, '1999-11-14', 7), (2145, '1999-11-15', 1), (2146, '1999-11-16', 2), (2147, '1999-11-17', 3), (2148, '1999-11-18', 4), (2149, '1999-11-19', 5), (2150, '1999-11-20', 6), (2151, '1999-11-21', 7), (2152, '1999-11-22', 1), (2153, '1999-11-23', 2), (2154, '1999-11-24', 3), (2155, '1999-11-25', 4), (2156, '1999-11-26', 5), (2157, '1999-11-27', 6), (2158, '1999-11-28', 7), (2159, '1999-11-29', 1), (2160, '1999-11-30', 2), (2161, '1999-12-01', 3), (2162, '1999-12-02', 4), (2163, '1999-12-03', 5), (2164, '1999-12-04', 6), (2165, '1999-12-05', 7), (2166, '1999-12-06', 1), (2167, '1999-12-07', 2), (2168, '1999-12-08', 3), (2169, '1999-12-09', 4), (2170, '1999-12-10', 5), (2171, '1999-12-11', 6), (2172, '1999-12-12', 7), (2173, '1999-12-13', 1), (2174, '1999-12-14', 2), (2175, '1999-12-15', 3), (2176, '1999-12-16', 4), (2177, '1999-12-17', 5), (2178, '1999-12-18', 6), (2179, '1999-12-19', 7), (2180, '1999-12-20', 1), (2181, '1999-12-21', 2), (2182, '1999-12-22', 3), (2183, '1999-12-23', 4), (2184, '1999-12-24', 5), (2185, '1999-12-25', 6), (2186, '1999-12-26', 7), (2187, '1999-12-27', 1), (2188, '1999-12-28', 2), (2189, '1999-12-29', 3), (2190, '1999-12-30', 4), (2191, '1999-12-31', 5), (2192, '2000-01-01', 6), (2193, '2000-01-02', 7), (2194, '2000-01-03', 1), (2195, '2000-01-04', 2), (2196, '2000-01-05', 3), (2197, '2000-01-06', 4), (2198, '2000-01-07', 5), (2199, '2000-01-08', 6), (2200, '2000-01-09', 7), (2201, '2000-01-10', 1), (2202, '2000-01-11', 2), (2203, '2000-01-12', 3), (2204, '2000-01-13', 4), (2205, '2000-01-14', 5), (2206, '2000-01-15', 6), (2207, '2000-01-16', 7), (2208, '2000-01-17', 1), (2209, '2000-01-18', 2), (2210, '2000-01-19', 3), (2211, '2000-01-20', 4), (2212, '2000-01-21', 5), (2213, '2000-01-22', 6), (2214, '2000-01-23', 7), (2215, '2000-01-24', 1), (2216, '2000-01-25', 2), (2217, '2000-01-26', 3), (2218, '2000-01-27', 4), (2219, '2000-01-28', 5), (2220, '2000-01-29', 6), (2221, '2000-01-30', 7), (2222, '2000-01-31', 1), (2223, '2000-02-01', 2), (2224, '2000-02-02', 3), (2225, '2000-02-03', 4), (2226, '2000-02-04', 5), (2227, '2000-02-05', 6), (2228, '2000-02-06', 7), (2229, '2000-02-07', 1), (2230, '2000-02-08', 2), (2231, '2000-02-09', 3), (2232, '2000-02-10', 4), (2233, '2000-02-11', 5), (2234, '2000-02-12', 6), (2235, '2000-02-13', 7), (2236, '2000-02-14', 1), (2237, '2000-02-15', 2), (2238, '2000-02-16', 3), (2239, '2000-02-17', 4), (2240, '2000-02-18', 5), (2241, '2000-02-19', 6), (2242, '2000-02-20', 7), (2243, '2000-02-21', 1), (2244, '2000-02-22', 2), (2245, '2000-02-23', 3), (2246, '2000-02-24', 4), (2247, '2000-02-25', 5), (2248, '2000-02-26', 6), (2249, '2000-02-27', 7), (2250, '2000-02-28', 1), (2251, '2000-02-29', 2), (2252, '2000-03-01', 3), (2253, '2000-03-02', 4), (2254, '2000-03-03', 5), (2255, '2000-03-04', 6), (2256, '2000-03-05', 7), (2257, '2000-03-06', 1), (2258, '2000-03-07', 2), (2259, '2000-03-08', 3), (2260, '2000-03-09', 4), (2261, '2000-03-10', 5), (2262, '2000-03-11', 6), (2263, '2000-03-12', 7), (2264, '2000-03-13', 1), (2265, '2000-03-14', 2), (2266, '2000-03-15', 3), (2267, '2000-03-16', 4), (2268, '2000-03-17', 5), (2269, '2000-03-18', 6), (2270, '2000-03-19', 7), (2271, '2000-03-20', 1), (2272, '2000-03-21', 2), (2273, '2000-03-22', 3), (2274, '2000-03-23', 4), (2275, '2000-03-24', 5), (2276, '2000-03-25', 6), (2277, '2000-03-26', 7), (2278, '2000-03-27', 1), (2279, '2000-03-28', 2), (2280, '2000-03-29', 3), (2281, '2000-03-30', 4), (2282, '2000-03-31', 5), (2283, '2000-04-01', 6), (2284, '2000-04-02', 7), (2285, '2000-04-03', 1), (2286, '2000-04-04', 2), (2287, '2000-04-05', 3), (2288, '2000-04-06', 4), (2289, '2000-04-07', 5), (2290, '2000-04-08', 6), (2291, '2000-04-09', 7), (2292, '2000-04-10', 1), (2293, '2000-04-11', 2), (2294, '2000-04-12', 3), (2295, '2000-04-13', 4), (2296, '2000-04-14', 5), (2297, '2000-04-15', 6), (2298, '2000-04-16', 7), (2299, '2000-04-17', 1), (2300, '2000-04-18', 2), (2301, '2000-04-19', 3), (2302, '2000-04-20', 4), (2303, '2000-04-21', 5), (2304, '2000-04-22', 6), (2305, '2000-04-23', 7), (2306, '2000-04-24', 1), (2307, '2000-04-25', 2), (2308, '2000-04-26', 3), (2309, '2000-04-27', 4), (2310, '2000-04-28', 5), (2311, '2000-04-29', 6), (2312, '2000-04-30', 7), (2313, '2000-05-01', 1), (2314, '2000-05-02', 2), (2315, '2000-05-03', 3), (2316, '2000-05-04', 4), (2317, '2000-05-05', 5), (2318, '2000-05-06', 6), (2319, '2000-05-07', 7), (2320, '2000-05-08', 1), (2321, '2000-05-09', 2), (2322, '2000-05-10', 3), (2323, '2000-05-11', 4), (2324, '2000-05-12', 5), (2325, '2000-05-13', 6), (2326, '2000-05-14', 7), (2327, '2000-05-15', 1), (2328, '2000-05-16', 2), (2329, '2000-05-17', 3), (2330, '2000-05-18', 4), (2331, '2000-05-19', 5), (2332, '2000-05-20', 6), (2333, '2000-05-21', 7), (2334, '2000-05-22', 1), (2335, '2000-05-23', 2), (2336, '2000-05-24', 3), (2337, '2000-05-25', 4), (2338, '2000-05-26', 5), (2339, '2000-05-27', 6), (2340, '2000-05-28', 7), (2341, '2000-05-29', 1), (2342, '2000-05-30', 2), (2343, '2000-05-31', 3), (2344, '2000-06-01', 4), (2345, '2000-06-02', 5), (2346, '2000-06-03', 6), (2347, '2000-06-04', 7), (2348, '2000-06-05', 1), (2349, '2000-06-06', 2), (2350, '2000-06-07', 3), (2351, '2000-06-08', 4), (2352, '2000-06-09', 5), (2353, '2000-06-10', 6), (2354, '2000-06-11', 7), (2355, '2000-06-12', 1), (2356, '2000-06-13', 2), (2357, '2000-06-14', 3), (2358, '2000-06-15', 4), (2359, '2000-06-16', 5), (2360, '2000-06-17', 6), (2361, '2000-06-18', 7), (2362, '2000-06-19', 1), (2363, '2000-06-20', 2), (2364, '2000-06-21', 3), (2365, '2000-06-22', 4), (2366, '2000-06-23', 5), (2367, '2000-06-24', 6), (2368, '2000-06-25', 7), (2369, '2000-06-26', 1), (2370, '2000-06-27', 2), (2371, '2000-06-28', 3), (2372, '2000-06-29', 4), (2373, '2000-06-30', 5), (2374, '2000-07-01', 6), (2375, '2000-07-02', 7), (2376, '2000-07-03', 1), (2377, '2000-07-04', 2), (2378, '2000-07-05', 3), (2379, '2000-07-06', 4), (2380, '2000-07-07', 5), (2381, '2000-07-08', 6), (2382, '2000-07-09', 7), (2383, '2000-07-10', 1), (2384, '2000-07-11', 2), (2385, '2000-07-12', 3), (2386, '2000-07-13', 4), (2387, '2000-07-14', 5), (2388, '2000-07-15', 6), (2389, '2000-07-16', 7), (2390, '2000-07-17', 1), (2391, '2000-07-18', 2), (2392, '2000-07-19', 3), (2393, '2000-07-20', 4), (2394, '2000-07-21', 5), (2395, '2000-07-22', 6), (2396, '2000-07-23', 7), (2397, '2000-07-24', 1), (2398, '2000-07-25', 2), (2399, '2000-07-26', 3), (2400, '2000-07-27', 4), (2401, '2000-07-28', 5), (2402, '2000-07-29', 6), (2403, '2000-07-30', 7), (2404, '2000-07-31', 1), (2405, '2000-08-01', 2), (2406, '2000-08-02', 3), (2407, '2000-08-03', 4), (2408, '2000-08-04', 5), (2409, '2000-08-05', 6), (2410, '2000-08-06', 7), (2411, '2000-08-07', 1), (2412, '2000-08-08', 2), (2413, '2000-08-09', 3), (2414, '2000-08-10', 4), (2415, '2000-08-11', 5), (2416, '2000-08-12', 6), (2417, '2000-08-13', 7), (2418, '2000-08-14', 1), (2419, '2000-08-15', 2), (2420, '2000-08-16', 3), (2421, '2000-08-17', 4), (2422, '2000-08-18', 5), (2423, '2000-08-19', 6), (2424, '2000-08-20', 7), (2425, '2000-08-21', 1), (2426, '2000-08-22', 2), (2427, '2000-08-23', 3), (2428, '2000-08-24', 4), (2429, '2000-08-25', 5), (2430, '2000-08-26', 6), (2431, '2000-08-27', 7), (2432, '2000-08-28', 1), (2433, '2000-08-29', 2), (2434, '2000-08-30', 3), (2435, '2000-08-31', 4), (2436, '2000-09-01', 5), (2437, '2000-09-02', 6), (2438, '2000-09-03', 7), (2439, '2000-09-04', 1), (2440, '2000-09-05', 2), (2441, '2000-09-06', 3), (2442, '2000-09-07', 4), (2443, '2000-09-08', 5), (2444, '2000-09-09', 6), (2445, '2000-09-10', 7), (2446, '2000-09-11', 1), (2447, '2000-09-12', 2), (2448, '2000-09-13', 3), (2449, '2000-09-14', 4), (2450, '2000-09-15', 5), (2451, '2000-09-16', 6), (2452, '2000-09-17', 7), (2453, '2000-09-18', 1), (2454, '2000-09-19', 2), (2455, '2000-09-20', 3), (2456, '2000-09-21', 4), (2457, '2000-09-22', 5), (2458, '2000-09-23', 6), (2459, '2000-09-24', 7), (2460, '2000-09-25', 1), (2461, '2000-09-26', 2), (2462, '2000-09-27', 3), (2463, '2000-09-28', 4), (2464, '2000-09-29', 5), (2465, '2000-09-30', 6), (2466, '2000-10-01', 7), (2467, '2000-10-02', 1), (2468, '2000-10-03', 2), (2469, '2000-10-04', 3), (2470, '2000-10-05', 4), (2471, '2000-10-06', 5), (2472, '2000-10-07', 6), (2473, '2000-10-08', 7), (2474, '2000-10-09', 1), (2475, '2000-10-10', 2), (2476, '2000-10-11', 3), (2477, '2000-10-12', 4), (2478, '2000-10-13', 5), (2479, '2000-10-14', 6), (2480, '2000-10-15', 7), (2481, '2000-10-16', 1), (2482, '2000-10-17', 2), (2483, '2000-10-18', 3), (2484, '2000-10-19', 4), (2485, '2000-10-20', 5), (2486, '2000-10-21', 6), (2487, '2000-10-22', 7), (2488, '2000-10-23', 1), (2489, '2000-10-24', 2), (2490, '2000-10-25', 3), (2491, '2000-10-26', 4), (2492, '2000-10-27', 5), (2493, '2000-10-28', 6), (2494, '2000-10-29', 7), (2495, '2000-10-30', 1), (2496, '2000-10-31', 2), (2497, '2000-11-01', 3), (2498, '2000-11-02', 4), (2499, '2000-11-03', 5), (2500, '2000-11-04', 6), (2501, '2000-11-05', 7), (2502, '2000-11-06', 1), (2503, '2000-11-07', 2), (2504, '2000-11-08', 3), (2505, '2000-11-09', 4), (2506, '2000-11-10', 5), (2507, '2000-11-11', 6), (2508, '2000-11-12', 7), (2509, '2000-11-13', 1), (2510, '2000-11-14', 2), (2511, '2000-11-15', 3), (2512, '2000-11-16', 4), (2513, '2000-11-17', 5), (2514, '2000-11-18', 6), (2515, '2000-11-19', 7), (2516, '2000-11-20', 1), (2517, '2000-11-21', 2), (2518, '2000-11-22', 3), (2519, '2000-11-23', 4), (2520, '2000-11-24', 5), (2521, '2000-11-25', 6), (2522, '2000-11-26', 7), (2523, '2000-11-27', 1), (2524, '2000-11-28', 2), (2525, '2000-11-29', 3), (2526, '2000-11-30', 4), (2527, '2000-12-01', 5), (2528, '2000-12-02', 6), (2529, '2000-12-03', 7), (2530, '2000-12-04', 1), (2531, '2000-12-05', 2), (2532, '2000-12-06', 3), (2533, '2000-12-07', 4), (2534, '2000-12-08', 5), (2535, '2000-12-09', 6), (2536, '2000-12-10', 7), (2537, '2000-12-11', 1), (2538, '2000-12-12', 2), (2539, '2000-12-13', 3), (2540, '2000-12-14', 4), (2541, '2000-12-15', 5), (2542, '2000-12-16', 6), (2543, '2000-12-17', 7), (2544, '2000-12-18', 1), (2545, '2000-12-19', 2), (2546, '2000-12-20', 3), (2547, '2000-12-21', 4), (2548, '2000-12-22', 5), (2549, '2000-12-23', 6), (2550, '2000-12-24', 7), (2551, '2000-12-25', 1), (2552, '2000-12-26', 2), (2553, '2000-12-27', 3), (2554, '2000-12-28', 4), (2555, '2000-12-29', 5), (2556, '2000-12-30', 6), (2557, '2000-12-31', 7), (2558, '2001-01-01', 1), (2559, '2001-01-02', 2), (2560, '2001-01-03', 3), (2561, '2001-01-04', 4), (2562, '2001-01-05', 5), (2563, '2001-01-06', 6), (2564, '2001-01-07', 7), (2565, '2001-01-08', 1), (2566, '2001-01-09', 2), (2567, '2001-01-10', 3), (2568, '2001-01-11', 4), (2569, '2001-01-12', 5), (2570, '2001-01-13', 6), (2571, '2001-01-14', 7), (2572, '2001-01-15', 1), (2573, '2001-01-16', 2), (2574, '2001-01-17', 3), (2575, '2001-01-18', 4), (2576, '2001-01-19', 5), (2577, '2001-01-20', 6), (2578, '2001-01-21', 7), (2579, '2001-01-22', 1), (2580, '2001-01-23', 2), (2581, '2001-01-24', 3), (2582, '2001-01-25', 4), (2583, '2001-01-26', 5), (2584, '2001-01-27', 6), (2585, '2001-01-28', 7), (2586, '2001-01-29', 1), (2587, '2001-01-30', 2), (2588, '2001-01-31', 3), (2589, '2001-02-01', 4), (2590, '2001-02-02', 5), (2591, '2001-02-03', 6), (2592, '2001-02-04', 7), (2593, '2001-02-05', 1), (2594, '2001-02-06', 2), (2595, '2001-02-07', 3), (2596, '2001-02-08', 4), (2597, '2001-02-09', 5), (2598, '2001-02-10', 6), (2599, '2001-02-11', 7), (2600, '2001-02-12', 1), (2601, '2001-02-13', 2), (2602, '2001-02-14', 3), (2603, '2001-02-15', 4), (2604, '2001-02-16', 5), (2605, '2001-02-17', 6), (2606, '2001-02-18', 7), (2607, '2001-02-19', 1), (2608, '2001-02-20', 2), (2609, '2001-02-21', 3), (2610, '2001-02-22', 4), (2611, '2001-02-23', 5), (2612, '2001-02-24', 6), (2613, '2001-02-25', 7), (2614, '2001-02-26', 1), (2615, '2001-02-27', 2), (2616, '2001-02-28', 3), (2617, '2001-03-01', 4), (2618, '2001-03-02', 5), (2619, '2001-03-03', 6), (2620, '2001-03-04', 7), (2621, '2001-03-05', 1), (2622, '2001-03-06', 2), (2623, '2001-03-07', 3), (2624, '2001-03-08', 4), (2625, '2001-03-09', 5), (2626, '2001-03-10', 6), (2627, '2001-03-11', 7), (2628, '2001-03-12', 1), (2629, '2001-03-13', 2), (2630, '2001-03-14', 3), (2631, '2001-03-15', 4), (2632, '2001-03-16', 5), (2633, '2001-03-17', 6), (2634, '2001-03-18', 7), (2635, '2001-03-19', 1), (2636, '2001-03-20', 2), (2637, '2001-03-21', 3), (2638, '2001-03-22', 4), (2639, '2001-03-23', 5), (2640, '2001-03-24', 6), (2641, '2001-03-25', 7), (2642, '2001-03-26', 1), (2643, '2001-03-27', 2), (2644, '2001-03-28', 3), (2645, '2001-03-29', 4), (2646, '2001-03-30', 5), (2647, '2001-03-31', 6), (2648, '2001-04-01', 7), (2649, '2001-04-02', 1), (2650, '2001-04-03', 2), (2651, '2001-04-04', 3), (2652, '2001-04-05', 4), (2653, '2001-04-06', 5), (2654, '2001-04-07', 6), (2655, '2001-04-08', 7), (2656, '2001-04-09', 1), (2657, '2001-04-10', 2), (2658, '2001-04-11', 3), (2659, '2001-04-12', 4), (2660, '2001-04-13', 5), (2661, '2001-04-14', 6), (2662, '2001-04-15', 7), (2663, '2001-04-16', 1), (2664, '2001-04-17', 2), (2665, '2001-04-18', 3), (2666, '2001-04-19', 4), (2667, '2001-04-20', 5), (2668, '2001-04-21', 6), (2669, '2001-04-22', 7), (2670, '2001-04-23', 1), (2671, '2001-04-24', 2), (2672, '2001-04-25', 3), (2673, '2001-04-26', 4), (2674, '2001-04-27', 5), (2675, '2001-04-28', 6), (2676, '2001-04-29', 7), (2677, '2001-04-30', 1), (2678, '2001-05-01', 2), (2679, '2001-05-02', 3), (2680, '2001-05-03', 4), (2681, '2001-05-04', 5), (2682, '2001-05-05', 6), (2683, '2001-05-06', 7), (2684, '2001-05-07', 1), (2685, '2001-05-08', 2), (2686, '2001-05-09', 3), (2687, '2001-05-10', 4), (2688, '2001-05-11', 5), (2689, '2001-05-12', 6), (2690, '2001-05-13', 7), (2691, '2001-05-14', 1), (2692, '2001-05-15', 2), (2693, '2001-05-16', 3), (2694, '2001-05-17', 4), (2695, '2001-05-18', 5), (2696, '2001-05-19', 6), (2697, '2001-05-20', 7), (2698, '2001-05-21', 1), (2699, '2001-05-22', 2), (2700, '2001-05-23', 3), (2701, '2001-05-24', 4), (2702, '2001-05-25', 5), (2703, '2001-05-26', 6), (2704, '2001-05-27', 7), (2705, '2001-05-28', 1), (2706, '2001-05-29', 2), (2707, '2001-05-30', 3), (2708, '2001-05-31', 4), (2709, '2001-06-01', 5), (2710, '2001-06-02', 6), (2711, '2001-06-03', 7), (2712, '2001-06-04', 1), (2713, '2001-06-05', 2), (2714, '2001-06-06', 3), (2715, '2001-06-07', 4), (2716, '2001-06-08', 5), (2717, '2001-06-09', 6), (2718, '2001-06-10', 7), (2719, '2001-06-11', 1), (2720, '2001-06-12', 2), (2721, '2001-06-13', 3), (2722, '2001-06-14', 4), (2723, '2001-06-15', 5), (2724, '2001-06-16', 6), (2725, '2001-06-17', 7), (2726, '2001-06-18', 1), (2727, '2001-06-19', 2), (2728, '2001-06-20', 3), (2729, '2001-06-21', 4), (2730, '2001-06-22', 5), (2731, '2001-06-23', 6), (2732, '2001-06-24', 7), (2733, '2001-06-25', 1), (2734, '2001-06-26', 2), (2735, '2001-06-27', 3), (2736, '2001-06-28', 4), (2737, '2001-06-29', 5), (2738, '2001-06-30', 6), (2739, '2001-07-01', 7), (2740, '2001-07-02', 1), (2741, '2001-07-03', 2), (2742, '2001-07-04', 3), (2743, '2001-07-05', 4), (2744, '2001-07-06', 5), (2745, '2001-07-07', 6), (2746, '2001-07-08', 7), (2747, '2001-07-09', 1), (2748, '2001-07-10', 2), (2749, '2001-07-11', 3), (2750, '2001-07-12', 4), (2751, '2001-07-13', 5), (2752, '2001-07-14', 6), (2753, '2001-07-15', 7), (2754, '2001-07-16', 1), (2755, '2001-07-17', 2), (2756, '2001-07-18', 3), (2757, '2001-07-19', 4), (2758, '2001-07-20', 5), (2759, '2001-07-21', 6), (2760, '2001-07-22', 7), (2761, '2001-07-23', 1), (2762, '2001-07-24', 2), (2763, '2001-07-25', 3), (2764, '2001-07-26', 4), (2765, '2001-07-27', 5), (2766, '2001-07-28', 6), (2767, '2001-07-29', 7), (2768, '2001-07-30', 1), (2769, '2001-07-31', 2), (2770, '2001-08-01', 3), (2771, '2001-08-02', 4), (2772, '2001-08-03', 5), (2773, '2001-08-04', 6), (2774, '2001-08-05', 7), (2775, '2001-08-06', 1), (2776, '2001-08-07', 2), (2777, '2001-08-08', 3), (2778, '2001-08-09', 4), (2779, '2001-08-10', 5), (2780, '2001-08-11', 6), (2781, '2001-08-12', 7), (2782, '2001-08-13', 1), (2783, '2001-08-14', 2), (2784, '2001-08-15', 3), (2785, '2001-08-16', 4), (2786, '2001-08-17', 5), (2787, '2001-08-18', 6), (2788, '2001-08-19', 7), (2789, '2001-08-20', 1), (2790, '2001-08-21', 2), (2791, '2001-08-22', 3), (2792, '2001-08-23', 4), (2793, '2001-08-24', 5), (2794, '2001-08-25', 6), (2795, '2001-08-26', 7), (2796, '2001-08-27', 1), (2797, '2001-08-28', 2), (2798, '2001-08-29', 3), (2799, '2001-08-30', 4), (2800, '2001-08-31', 5), (2801, '2001-09-01', 6), (2802, '2001-09-02', 7), (2803, '2001-09-03', 1), (2804, '2001-09-04', 2), (2805, '2001-09-05', 3), (2806, '2001-09-06', 4), (2807, '2001-09-07', 5), (2808, '2001-09-08', 6), (2809, '2001-09-09', 7), (2810, '2001-09-10', 1), (2811, '2001-09-11', 2), (2812, '2001-09-12', 3), (2813, '2001-09-13', 4), (2814, '2001-09-14', 5), (2815, '2001-09-15', 6), (2816, '2001-09-16', 7), (2817, '2001-09-17', 1), (2818, '2001-09-18', 2), (2819, '2001-09-19', 3), (2820, '2001-09-20', 4), (2821, '2001-09-21', 5), (2822, '2001-09-22', 6), (2823, '2001-09-23', 7), (2824, '2001-09-24', 1), (2825, '2001-09-25', 2), (2826, '2001-09-26', 3), (2827, '2001-09-27', 4), (2828, '2001-09-28', 5), (2829, '2001-09-29', 6), (2830, '2001-09-30', 7), (2831, '2001-10-01', 1), (2832, '2001-10-02', 2), (2833, '2001-10-03', 3), (2834, '2001-10-04', 4), (2835, '2001-10-05', 5), (2836, '2001-10-06', 6), (2837, '2001-10-07', 7), (2838, '2001-10-08', 1), (2839, '2001-10-09', 2), (2840, '2001-10-10', 3), (2841, '2001-10-11', 4), (2842, '2001-10-12', 5), (2843, '2001-10-13', 6), (2844, '2001-10-14', 7), (2845, '2001-10-15', 1), (2846, '2001-10-16', 2), (2847, '2001-10-17', 3), (2848, '2001-10-18', 4), (2849, '2001-10-19', 5), (2850, '2001-10-20', 6), (2851, '2001-10-21', 7), (2852, '2001-10-22', 1), (2853, '2001-10-23', 2), (2854, '2001-10-24', 3), (2855, '2001-10-25', 4), (2856, '2001-10-26', 5), (2857, '2001-10-27', 6), (2858, '2001-10-28', 7), (2859, '2001-10-29', 1), (2860, '2001-10-30', 2), (2861, '2001-10-31', 3), (2862, '2001-11-01', 4), (2863, '2001-11-02', 5), (2864, '2001-11-03', 6), (2865, '2001-11-04', 7), (2866, '2001-11-05', 1), (2867, '2001-11-06', 2), (2868, '2001-11-07', 3), (2869, '2001-11-08', 4), (2870, '2001-11-09', 5), (2871, '2001-11-10', 6), (2872, '2001-11-11', 7), (2873, '2001-11-12', 1), (2874, '2001-11-13', 2), (2875, '2001-11-14', 3), (2876, '2001-11-15', 4), (2877, '2001-11-16', 5), (2878, '2001-11-17', 6), (2879, '2001-11-18', 7), (2880, '2001-11-19', 1), (2881, '2001-11-20', 2), (2882, '2001-11-21', 3), (2883, '2001-11-22', 4), (2884, '2001-11-23', 5), (2885, '2001-11-24', 6), (2886, '2001-11-25', 7), (2887, '2001-11-26', 1), (2888, '2001-11-27', 2), (2889, '2001-11-28', 3), (2890, '2001-11-29', 4), (2891, '2001-11-30', 5), (2892, '2001-12-01', 6), (2893, '2001-12-02', 7), (2894, '2001-12-03', 1), (2895, '2001-12-04', 2), (2896, '2001-12-05', 3), (2897, '2001-12-06', 4), (2898, '2001-12-07', 5), (2899, '2001-12-08', 6), (2900, '2001-12-09', 7), (2901, '2001-12-10', 1), (2902, '2001-12-11', 2), (2903, '2001-12-12', 3), (2904, '2001-12-13', 4), (2905, '2001-12-14', 5), (2906, '2001-12-15', 6), (2907, '2001-12-16', 7), (2908, '2001-12-17', 1), (2909, '2001-12-18', 2), (2910, '2001-12-19', 3), (2911, '2001-12-20', 4), (2912, '2001-12-21', 5), (2913, '2001-12-22', 6), (2914, '2001-12-23', 7), (2915, '2001-12-24', 1), (2916, '2001-12-25', 2), (2917, '2001-12-26', 3), (2918, '2001-12-27', 4), (2919, '2001-12-28', 5), (2920, '2001-12-29', 6), (2921, '2001-12-30', 7), (2922, '2001-12-31', 1), (2923, '2002-01-01', 2), (2924, '2002-01-02', 3), (2925, '2002-01-03', 4), (2926, '2002-01-04', 5), (2927, '2002-01-05', 6), (2928, '2002-01-06', 7), (2929, '2002-01-07', 1), (2930, '2002-01-08', 2), (2931, '2002-01-09', 3), (2932, '2002-01-10', 4), (2933, '2002-01-11', 5), (2934, '2002-01-12', 6), (2935, '2002-01-13', 7), (2936, '2002-01-14', 1), (2937, '2002-01-15', 2), (2938, '2002-01-16', 3), (2939, '2002-01-17', 4), (2940, '2002-01-18', 5), (2941, '2002-01-19', 6), (2942, '2002-01-20', 7), (2943, '2002-01-21', 1), (2944, '2002-01-22', 2), (2945, '2002-01-23', 3), (2946, '2002-01-24', 4), (2947, '2002-01-25', 5), (2948, '2002-01-26', 6), (2949, '2002-01-27', 7), (2950, '2002-01-28', 1), (2951, '2002-01-29', 2), (2952, '2002-01-30', 3), (2953, '2002-01-31', 4), (2954, '2002-02-01', 5), (2955, '2002-02-02', 6), (2956, '2002-02-03', 7), (2957, '2002-02-04', 1), (2958, '2002-02-05', 2), (2959, '2002-02-06', 3), (2960, '2002-02-07', 4), (2961, '2002-02-08', 5), (2962, '2002-02-09', 6), (2963, '2002-02-10', 7), (2964, '2002-02-11', 1), (2965, '2002-02-12', 2), (2966, '2002-02-13', 3), (2967, '2002-02-14', 4), (2968, '2002-02-15', 5), (2969, '2002-02-16', 6), (2970, '2002-02-17', 7), (2971, '2002-02-18', 1), (2972, '2002-02-19', 2), (2973, '2002-02-20', 3), (2974, '2002-02-21', 4), (2975, '2002-02-22', 5), (2976, '2002-02-23', 6), (2977, '2002-02-24', 7), (2978, '2002-02-25', 1), (2979, '2002-02-26', 2), (2980, '2002-02-27', 3), (2981, '2002-02-28', 4), (2982, '2002-03-01', 5), (2983, '2002-03-02', 6), (2984, '2002-03-03', 7), (2985, '2002-03-04', 1), (2986, '2002-03-05', 2), (2987, '2002-03-06', 3), (2988, '2002-03-07', 4), (2989, '2002-03-08', 5), (2990, '2002-03-09', 6), (2991, '2002-03-10', 7), (2992, '2002-03-11', 1), (2993, '2002-03-12', 2), (2994, '2002-03-13', 3), (2995, '2002-03-14', 4), (2996, '2002-03-15', 5), (2997, '2002-03-16', 6), (2998, '2002-03-17', 7), (2999, '2002-03-18', 1), (3000, '2002-03-19', 2), (3001, '2002-03-20', 3), (3002, '2002-03-21', 4), (3003, '2002-03-22', 5), (3004, '2002-03-23', 6), (3005, '2002-03-24', 7), (3006, '2002-03-25', 1), (3007, '2002-03-26', 2), (3008, '2002-03-27', 3), (3009, '2002-03-28', 4), (3010, '2002-03-29', 5), (3011, '2002-03-30', 6), (3012, '2002-03-31', 7), (3013, '2002-04-01', 1), (3014, '2002-04-02', 2), (3015, '2002-04-03', 3), (3016, '2002-04-04', 4), (3017, '2002-04-05', 5), (3018, '2002-04-06', 6), (3019, '2002-04-07', 7), (3020, '2002-04-08', 1), (3021, '2002-04-09', 2), (3022, '2002-04-10', 3), (3023, '2002-04-11', 4), (3024, '2002-04-12', 5), (3025, '2002-04-13', 6), (3026, '2002-04-14', 7), (3027, '2002-04-15', 1), (3028, '2002-04-16', 2), (3029, '2002-04-17', 3), (3030, '2002-04-18', 4), (3031, '2002-04-19', 5), (3032, '2002-04-20', 6), (3033, '2002-04-21', 7), (3034, '2002-04-22', 1), (3035, '2002-04-23', 2), (3036, '2002-04-24', 3), (3037, '2002-04-25', 4), (3038, '2002-04-26', 5), (3039, '2002-04-27', 6), (3040, '2002-04-28', 7), (3041, '2002-04-29', 1), (3042, '2002-04-30', 2), (3043, '2002-05-01', 3), (3044, '2002-05-02', 4), (3045, '2002-05-03', 5), (3046, '2002-05-04', 6), (3047, '2002-05-05', 7), (3048, '2002-05-06', 1), (3049, '2002-05-07', 2), (3050, '2002-05-08', 3), (3051, '2002-05-09', 4), (3052, '2002-05-10', 5), (3053, '2002-05-11', 6), (3054, '2002-05-12', 7), (3055, '2002-05-13', 1), (3056, '2002-05-14', 2), (3057, '2002-05-15', 3), (3058, '2002-05-16', 4), (3059, '2002-05-17', 5), (3060, '2002-05-18', 6), (3061, '2002-05-19', 7), (3062, '2002-05-20', 1), (3063, '2002-05-21', 2), (3064, '2002-05-22', 3), (3065, '2002-05-23', 4), (3066, '2002-05-24', 5), (3067, '2002-05-25', 6), (3068, '2002-05-26', 7), (3069, '2002-05-27', 1), (3070, '2002-05-28', 2), (3071, '2002-05-29', 3), (3072, '2002-05-30', 4), (3073, '2002-05-31', 5), (3074, '2002-06-01', 6), (3075, '2002-06-02', 7), (3076, '2002-06-03', 1), (3077, '2002-06-04', 2), (3078, '2002-06-05', 3), (3079, '2002-06-06', 4), (3080, '2002-06-07', 5), (3081, '2002-06-08', 6), (3082, '2002-06-09', 7), (3083, '2002-06-10', 1), (3084, '2002-06-11', 2), (3085, '2002-06-12', 3), (3086, '2002-06-13', 4), (3087, '2002-06-14', 5), (3088, '2002-06-15', 6), (3089, '2002-06-16', 7), (3090, '2002-06-17', 1), (3091, '2002-06-18', 2), (3092, '2002-06-19', 3), (3093, '2002-06-20', 4), (3094, '2002-06-21', 5), (3095, '2002-06-22', 6), (3096, '2002-06-23', 7), (3097, '2002-06-24', 1), (3098, '2002-06-25', 2), (3099, '2002-06-26', 3), (3100, '2002-06-27', 4), (3101, '2002-06-28', 5), (3102, '2002-06-29', 6), (3103, '2002-06-30', 7), (3104, '2002-07-01', 1), (3105, '2002-07-02', 2), (3106, '2002-07-03', 3), (3107, '2002-07-04', 4), (3108, '2002-07-05', 5), (3109, '2002-07-06', 6), (3110, '2002-07-07', 7), (3111, '2002-07-08', 1), (3112, '2002-07-09', 2), (3113, '2002-07-10', 3), (3114, '2002-07-11', 4), (3115, '2002-07-12', 5), (3116, '2002-07-13', 6), (3117, '2002-07-14', 7), (3118, '2002-07-15', 1), (3119, '2002-07-16', 2), (3120, '2002-07-17', 3), (3121, '2002-07-18', 4), (3122, '2002-07-19', 5), (3123, '2002-07-20', 6), (3124, '2002-07-21', 7), (3125, '2002-07-22', 1), (3126, '2002-07-23', 2), (3127, '2002-07-24', 3), (3128, '2002-07-25', 4), (3129, '2002-07-26', 5), (3130, '2002-07-27', 6), (3131, '2002-07-28', 7), (3132, '2002-07-29', 1), (3133, '2002-07-30', 2), (3134, '2002-07-31', 3), (3135, '2002-08-01', 4), (3136, '2002-08-02', 5), (3137, '2002-08-03', 6), (3138, '2002-08-04', 7), (3139, '2002-08-05', 1), (3140, '2002-08-06', 2), (3141, '2002-08-07', 3), (3142, '2002-08-08', 4), (3143, '2002-08-09', 5), (3144, '2002-08-10', 6), (3145, '2002-08-11', 7), (3146, '2002-08-12', 1), (3147, '2002-08-13', 2), (3148, '2002-08-14', 3), (3149, '2002-08-15', 4), (3150, '2002-08-16', 5), (3151, '2002-08-17', 6), (3152, '2002-08-18', 7), (3153, '2002-08-19', 1), (3154, '2002-08-20', 2), (3155, '2002-08-21', 3), (3156, '2002-08-22', 4), (3157, '2002-08-23', 5), (3158, '2002-08-24', 6), (3159, '2002-08-25', 7), (3160, '2002-08-26', 1), (3161, '2002-08-27', 2), (3162, '2002-08-28', 3), (3163, '2002-08-29', 4), (3164, '2002-08-30', 5), (3165, '2002-08-31', 6), (3166, '2002-09-01', 7), (3167, '2002-09-02', 1), (3168, '2002-09-03', 2), (3169, '2002-09-04', 3), (3170, '2002-09-05', 4), (3171, '2002-09-06', 5), (3172, '2002-09-07', 6), (3173, '2002-09-08', 7), (3174, '2002-09-09', 1), (3175, '2002-09-10', 2), (3176, '2002-09-11', 3), (3177, '2002-09-12', 4), (3178, '2002-09-13', 5), (3179, '2002-09-14', 6), (3180, '2002-09-15', 7), (3181, '2002-09-16', 1), (3182, '2002-09-17', 2), (3183, '2002-09-18', 3), (3184, '2002-09-19', 4), (3185, '2002-09-20', 5), (3186, '2002-09-21', 6), (3187, '2002-09-22', 7), (3188, '2002-09-23', 1), (3189, '2002-09-24', 2), (3190, '2002-09-25', 3), (3191, '2002-09-26', 4), (3192, '2002-09-27', 5), (3193, '2002-09-28', 6), (3194, '2002-09-29', 7), (3195, '2002-09-30', 1), (3196, '2002-10-01', 2), (3197, '2002-10-02', 3), (3198, '2002-10-03', 4), (3199, '2002-10-04', 5), (3200, '2002-10-05', 6), (3201, '2002-10-06', 7), (3202, '2002-10-07', 1), (3203, '2002-10-08', 2), (3204, '2002-10-09', 3), (3205, '2002-10-10', 4), (3206, '2002-10-11', 5), (3207, '2002-10-12', 6), (3208, '2002-10-13', 7), (3209, '2002-10-14', 1), (3210, '2002-10-15', 2), (3211, '2002-10-16', 3), (3212, '2002-10-17', 4), (3213, '2002-10-18', 5), (3214, '2002-10-19', 6), (3215, '2002-10-20', 7), (3216, '2002-10-21', 1), (3217, '2002-10-22', 2), (3218, '2002-10-23', 3), (3219, '2002-10-24', 4), (3220, '2002-10-25', 5), (3221, '2002-10-26', 6), (3222, '2002-10-27', 7), (3223, '2002-10-28', 1), (3224, '2002-10-29', 2), (3225, '2002-10-30', 3), (3226, '2002-10-31', 4), (3227, '2002-11-01', 5), (3228, '2002-11-02', 6), (3229, '2002-11-03', 7), (3230, '2002-11-04', 1), (3231, '2002-11-05', 2), (3232, '2002-11-06', 3), (3233, '2002-11-07', 4), (3234, '2002-11-08', 5), (3235, '2002-11-09', 6), (3236, '2002-11-10', 7), (3237, '2002-11-11', 1), (3238, '2002-11-12', 2), (3239, '2002-11-13', 3), (3240, '2002-11-14', 4), (3241, '2002-11-15', 5), (3242, '2002-11-16', 6), (3243, '2002-11-17', 7), (3244, '2002-11-18', 1), (3245, '2002-11-19', 2), (3246, '2002-11-20', 3), (3247, '2002-11-21', 4), (3248, '2002-11-22', 5), (3249, '2002-11-23', 6), (3250, '2002-11-24', 7), (3251, '2002-11-25', 1), (3252, '2002-11-26', 2), (3253, '2002-11-27', 3), (3254, '2002-11-28', 4), (3255, '2002-11-29', 5), (3256, '2002-11-30', 6), (3257, '2002-12-01', 7), (3258, '2002-12-02', 1), (3259, '2002-12-03', 2), (3260, '2002-12-04', 3), (3261, '2002-12-05', 4), (3262, '2002-12-06', 5), (3263, '2002-12-07', 6), (3264, '2002-12-08', 7), (3265, '2002-12-09', 1), (3266, '2002-12-10', 2), (3267, '2002-12-11', 3), (3268, '2002-12-12', 4), (3269, '2002-12-13', 5), (3270, '2002-12-14', 6), (3271, '2002-12-15', 7), (3272, '2002-12-16', 1), (3273, '2002-12-17', 2), (3274, '2002-12-18', 3), (3275, '2002-12-19', 4), (3276, '2002-12-20', 5), (3277, '2002-12-21', 6), (3278, '2002-12-22', 7), (3279, '2002-12-23', 1), (3280, '2002-12-24', 2), (3281, '2002-12-25', 3), (3282, '2002-12-26', 4), (3283, '2002-12-27', 5), (3284, '2002-12-28', 6), (3285, '2002-12-29', 7), (3286, '2002-12-30', 1), (3287, '2002-12-31', 2), (3288, '2003-01-01', 3), (3289, '2003-01-02', 4), (3290, '2003-01-03', 5), (3291, '2003-01-04', 6), (3292, '2003-01-05', 7), (3293, '2003-01-06', 1), (3294, '2003-01-07', 2), (3295, '2003-01-08', 3), (3296, '2003-01-09', 4), (3297, '2003-01-10', 5), (3298, '2003-01-11', 6), (3299, '2003-01-12', 7), (3300, '2003-01-13', 1), (3301, '2003-01-14', 2), (3302, '2003-01-15', 3), (3303, '2003-01-16', 4), (3304, '2003-01-17', 5), (3305, '2003-01-18', 6), (3306, '2003-01-19', 7), (3307, '2003-01-20', 1), (3308, '2003-01-21', 2), (3309, '2003-01-22', 3), (3310, '2003-01-23', 4), (3311, '2003-01-24', 5), (3312, '2003-01-25', 6), (3313, '2003-01-26', 7), (3314, '2003-01-27', 1), (3315, '2003-01-28', 2), (3316, '2003-01-29', 3), (3317, '2003-01-30', 4), (3318, '2003-01-31', 5), (3319, '2003-02-01', 6), (3320, '2003-02-02', 7), (3321, '2003-02-03', 1), (3322, '2003-02-04', 2), (3323, '2003-02-05', 3), (3324, '2003-02-06', 4), (3325, '2003-02-07', 5), (3326, '2003-02-08', 6), (3327, '2003-02-09', 7), (3328, '2003-02-10', 1), (3329, '2003-02-11', 2), (3330, '2003-02-12', 3), (3331, '2003-02-13', 4), (3332, '2003-02-14', 5), (3333, '2003-02-15', 6), (3334, '2003-02-16', 7), (3335, '2003-02-17', 1), (3336, '2003-02-18', 2), (3337, '2003-02-19', 3), (3338, '2003-02-20', 4), (3339, '2003-02-21', 5), (3340, '2003-02-22', 6), (3341, '2003-02-23', 7), (3342, '2003-02-24', 1), (3343, '2003-02-25', 2), (3344, '2003-02-26', 3), (3345, '2003-02-27', 4), (3346, '2003-02-28', 5), (3347, '2003-03-01', 6), (3348, '2003-03-02', 7), (3349, '2003-03-03', 1), (3350, '2003-03-04', 2), (3351, '2003-03-05', 3), (3352, '2003-03-06', 4), (3353, '2003-03-07', 5), (3354, '2003-03-08', 6), (3355, '2003-03-09', 7), (3356, '2003-03-10', 1), (3357, '2003-03-11', 2), (3358, '2003-03-12', 3), (3359, '2003-03-13', 4), (3360, '2003-03-14', 5), (3361, '2003-03-15', 6), (3362, '2003-03-16', 7), (3363, '2003-03-17', 1), (3364, '2003-03-18', 2), (3365, '2003-03-19', 3), (3366, '2003-03-20', 4), (3367, '2003-03-21', 5), (3368, '2003-03-22', 6), (3369, '2003-03-23', 7), (3370, '2003-03-24', 1), (3371, '2003-03-25', 2), (3372, '2003-03-26', 3), (3373, '2003-03-27', 4), (3374, '2003-03-28', 5), (3375, '2003-03-29', 6), (3376, '2003-03-30', 7), (3377, '2003-03-31', 1), (3378, '2003-04-01', 2), (3379, '2003-04-02', 3), (3380, '2003-04-03', 4), (3381, '2003-04-04', 5), (3382, '2003-04-05', 6), (3383, '2003-04-06', 7), (3384, '2003-04-07', 1), (3385, '2003-04-08', 2), (3386, '2003-04-09', 3), (3387, '2003-04-10', 4), (3388, '2003-04-11', 5), (3389, '2003-04-12', 6), (3390, '2003-04-13', 7), (3391, '2003-04-14', 1), (3392, '2003-04-15', 2), (3393, '2003-04-16', 3), (3394, '2003-04-17', 4), (3395, '2003-04-18', 5), (3396, '2003-04-19', 6), (3397, '2003-04-20', 7), (3398, '2003-04-21', 1), (3399, '2003-04-22', 2), (3400, '2003-04-23', 3), (3401, '2003-04-24', 4), (3402, '2003-04-25', 5), (3403, '2003-04-26', 6), (3404, '2003-04-27', 7), (3405, '2003-04-28', 1), (3406, '2003-04-29', 2), (3407, '2003-04-30', 3), (3408, '2003-05-01', 4), (3409, '2003-05-02', 5), (3410, '2003-05-03', 6), (3411, '2003-05-04', 7), (3412, '2003-05-05', 1), (3413, '2003-05-06', 2), (3414, '2003-05-07', 3), (3415, '2003-05-08', 4), (3416, '2003-05-09', 5), (3417, '2003-05-10', 6), (3418, '2003-05-11', 7), (3419, '2003-05-12', 1), (3420, '2003-05-13', 2), (3421, '2003-05-14', 3), (3422, '2003-05-15', 4), (3423, '2003-05-16', 5), (3424, '2003-05-17', 6), (3425, '2003-05-18', 7), (3426, '2003-05-19', 1), (3427, '2003-05-20', 2), (3428, '2003-05-21', 3), (3429, '2003-05-22', 4), (3430, '2003-05-23', 5), (3431, '2003-05-24', 6), (3432, '2003-05-25', 7), (3433, '2003-05-26', 1), (3434, '2003-05-27', 2), (3435, '2003-05-28', 3), (3436, '2003-05-29', 4), (3437, '2003-05-30', 5), (3438, '2003-05-31', 6), (3439, '2003-06-01', 7), (3440, '2003-06-02', 1), (3441, '2003-06-03', 2), (3442, '2003-06-04', 3), (3443, '2003-06-05', 4), (3444, '2003-06-06', 5), (3445, '2003-06-07', 6), (3446, '2003-06-08', 7), (3447, '2003-06-09', 1), (3448, '2003-06-10', 2), (3449, '2003-06-11', 3), (3450, '2003-06-12', 4), (3451, '2003-06-13', 5), (3452, '2003-06-14', 6), (3453, '2003-06-15', 7), (3454, '2003-06-16', 1), (3455, '2003-06-17', 2), (3456, '2003-06-18', 3), (3457, '2003-06-19', 4), (3458, '2003-06-20', 5), (3459, '2003-06-21', 6), (3460, '2003-06-22', 7), (3461, '2003-06-23', 1), (3462, '2003-06-24', 2), (3463, '2003-06-25', 3), (3464, '2003-06-26', 4), (3465, '2003-06-27', 5), (3466, '2003-06-28', 6), (3467, '2003-06-29', 7), (3468, '2003-06-30', 1), (3469, '2003-07-01', 2), (3470, '2003-07-02', 3), (3471, '2003-07-03', 4), (3472, '2003-07-04', 5), (3473, '2003-07-05', 6), (3474, '2003-07-06', 7), (3475, '2003-07-07', 1), (3476, '2003-07-08', 2), (3477, '2003-07-09', 3), (3478, '2003-07-10', 4), (3479, '2003-07-11', 5), (3480, '2003-07-12', 6), (3481, '2003-07-13', 7), (3482, '2003-07-14', 1), (3483, '2003-07-15', 2), (3484, '2003-07-16', 3), (3485, '2003-07-17', 4), (3486, '2003-07-18', 5), (3487, '2003-07-19', 6), (3488, '2003-07-20', 7), (3489, '2003-07-21', 1), (3490, '2003-07-22', 2), (3491, '2003-07-23', 3), (3492, '2003-07-24', 4), (3493, '2003-07-25', 5), (3494, '2003-07-26', 6), (3495, '2003-07-27', 7), (3496, '2003-07-28', 1), (3497, '2003-07-29', 2), (3498, '2003-07-30', 3), (3499, '2003-07-31', 4), (3500, '2003-08-01', 5), (3501, '2003-08-02', 6), (3502, '2003-08-03', 7), (3503, '2003-08-04', 1), (3504, '2003-08-05', 2), (3505, '2003-08-06', 3), (3506, '2003-08-07', 4), (3507, '2003-08-08', 5), (3508, '2003-08-09', 6), (3509, '2003-08-10', 7), (3510, '2003-08-11', 1), (3511, '2003-08-12', 2), (3512, '2003-08-13', 3), (3513, '2003-08-14', 4), (3514, '2003-08-15', 5), (3515, '2003-08-16', 6), (3516, '2003-08-17', 7), (3517, '2003-08-18', 1), (3518, '2003-08-19', 2), (3519, '2003-08-20', 3), (3520, '2003-08-21', 4), (3521, '2003-08-22', 5), (3522, '2003-08-23', 6), (3523, '2003-08-24', 7), (3524, '2003-08-25', 1), (3525, '2003-08-26', 2), (3526, '2003-08-27', 3), (3527, '2003-08-28', 4), (3528, '2003-08-29', 5), (3529, '2003-08-30', 6), (3530, '2003-08-31', 7), (3531, '2003-09-01', 1), (3532, '2003-09-02', 2), (3533, '2003-09-03', 3), (3534, '2003-09-04', 4), (3535, '2003-09-05', 5), (3536, '2003-09-06', 6), (3537, '2003-09-07', 7), (3538, '2003-09-08', 1), (3539, '2003-09-09', 2), (3540, '2003-09-10', 3), (3541, '2003-09-11', 4), (3542, '2003-09-12', 5), (3543, '2003-09-13', 6), (3544, '2003-09-14', 7), (3545, '2003-09-15', 1), (3546, '2003-09-16', 2), (3547, '2003-09-17', 3), (3548, '2003-09-18', 4), (3549, '2003-09-19', 5), (3550, '2003-09-20', 6), (3551, '2003-09-21', 7), (3552, '2003-09-22', 1), (3553, '2003-09-23', 2), (3554, '2003-09-24', 3), (3555, '2003-09-25', 4), (3556, '2003-09-26', 5), (3557, '2003-09-27', 6), (3558, '2003-09-28', 7), (3559, '2003-09-29', 1), (3560, '2003-09-30', 2), (3561, '2003-10-01', 3), (3562, '2003-10-02', 4), (3563, '2003-10-03', 5), (3564, '2003-10-04', 6), (3565, '2003-10-05', 7), (3566, '2003-10-06', 1), (3567, '2003-10-07', 2), (3568, '2003-10-08', 3), (3569, '2003-10-09', 4), (3570, '2003-10-10', 5), (3571, '2003-10-11', 6), (3572, '2003-10-12', 7), (3573, '2003-10-13', 1), (3574, '2003-10-14', 2), (3575, '2003-10-15', 3), (3576, '2003-10-16', 4), (3577, '2003-10-17', 5), (3578, '2003-10-18', 6), (3579, '2003-10-19', 7), (3580, '2003-10-20', 1), (3581, '2003-10-21', 2), (3582, '2003-10-22', 3), (3583, '2003-10-23', 4), (3584, '2003-10-24', 5), (3585, '2003-10-25', 6), (3586, '2003-10-26', 7), (3587, '2003-10-27', 1), (3588, '2003-10-28', 2), (3589, '2003-10-29', 3), (3590, '2003-10-30', 4), (3591, '2003-10-31', 5), (3592, '2003-11-01', 6), (3593, '2003-11-02', 7), (3594, '2003-11-03', 1), (3595, '2003-11-04', 2), (3596, '2003-11-05', 3), (3597, '2003-11-06', 4), (3598, '2003-11-07', 5), (3599, '2003-11-08', 6), (3600, '2003-11-09', 7), (3601, '2003-11-10', 1), (3602, '2003-11-11', 2), (3603, '2003-11-12', 3), (3604, '2003-11-13', 4), (3605, '2003-11-14', 5), (3606, '2003-11-15', 6), (3607, '2003-11-16', 7), (3608, '2003-11-17', 1), (3609, '2003-11-18', 2), (3610, '2003-11-19', 3), (3611, '2003-11-20', 4), (3612, '2003-11-21', 5), (3613, '2003-11-22', 6), (3614, '2003-11-23', 7), (3615, '2003-11-24', 1), (3616, '2003-11-25', 2), (3617, '2003-11-26', 3), (3618, '2003-11-27', 4), (3619, '2003-11-28', 5), (3620, '2003-11-29', 6), (3621, '2003-11-30', 7), (3622, '2003-12-01', 1), (3623, '2003-12-02', 2), (3624, '2003-12-03', 3), (3625, '2003-12-04', 4), (3626, '2003-12-05', 5), (3627, '2003-12-06', 6), (3628, '2003-12-07', 7), (3629, '2003-12-08', 1), (3630, '2003-12-09', 2), (3631, '2003-12-10', 3), (3632, '2003-12-11', 4), (3633, '2003-12-12', 5), (3634, '2003-12-13', 6), (3635, '2003-12-14', 7), (3636, '2003-12-15', 1), (3637, '2003-12-16', 2), (3638, '2003-12-17', 3), (3639, '2003-12-18', 4), (3640, '2003-12-19', 5), (3641, '2003-12-20', 6), (3642, '2003-12-21', 7), (3643, '2003-12-22', 1), (3644, '2003-12-23', 2), (3645, '2003-12-24', 3), (3646, '2003-12-25', 4), (3647, '2003-12-26', 5), (3648, '2003-12-27', 6), (3649, '2003-12-28', 7), (3650, '2003-12-29', 1), (3651, '2003-12-30', 2), (3652, '2003-12-31', 3)]\n",
            "num_births [(1, 8096), (2, 7772), (3, 10142), (4, 11248), (5, 11053), (6, 11406), (7, 11251), (8, 8653), (9, 7910), (10, 10498), (11, 11706), (12, 11567), (13, 11212), (14, 11570), (15, 8660), (16, 8123), (17, 10567), (18, 11541), (19, 11257), (20, 11682), (21, 11811), (22, 8833), (23, 8310), (24, 11125), (25, 11981), (26, 11514), (27, 11702), (28, 11666), (29, 8988), (30, 8096), (31, 10765), (32, 11755), (33, 11483), (34, 11523), (35, 11677), (36, 8991), (37, 8309), (38, 10984), (39, 12152), (40, 11515), (41, 11623), (42, 11517), (43, 8945), (44, 8171), (45, 11551), (46, 12164), (47, 12009), (48, 11674), (49, 11887), (50, 8946), (51, 8402), (52, 10617), (53, 11810), (54, 11776), (55, 11667), (56, 11905), (57, 8988), (58, 8195), (59, 11091), (60, 12127), (61, 11735), (62, 11984), (63, 12066), (64, 9215), (65, 8389), (66, 10996), (67, 12275), (68, 11780), (69, 11792), (70, 11939), (71, 9087), (72, 8248), (73, 11092), (74, 12298), (75, 11865), (76, 11976), (77, 11799), (78, 8944), (79, 8243), (80, 11140), (81, 11964), (82, 11637), (83, 11904), (84, 11568), (85, 8957), (86, 8189), (87, 11051), (88, 12154), (89, 11540), (90, 11782), (91, 10630), (92, 8782), (93, 7530), (94, 10909), (95, 11876), (96, 11811), (97, 11718), (98, 11532), (99, 8791), (100, 8183), (101, 11060), (102, 12146), (103, 11428), (104, 11709), (105, 11753), (106, 8790), (107, 7867), (108, 11094), (109, 11966), (110, 11585), (111, 11509), (112, 11553), (113, 8613), (114, 8089), (115, 10909), (116, 12236), (117, 11701), (118, 11527), (119, 11474), (120, 8621), (121, 8145), (122, 11169), (123, 12023), (124, 11754), (125, 11958), (126, 11904), (127, 8641), (128, 8203), (129, 10914), (130, 11771), (131, 11278), (132, 11822), (133, 11085), (134, 8830), (135, 8253), (136, 11103), (137, 12289), (138, 11668), (139, 11411), (140, 11645), (141, 8830), (142, 8449), (143, 11434), (144, 12562), (145, 12005), (146, 11979), (147, 12132), (148, 8840), (149, 8205), (150, 8468), (151, 11525), (152, 12349), (153, 12166), (154, 11799), (155, 9182), (156, 8289), (157, 11130), (158, 12145), (159, 11784), (160, 11648), (161, 12006), (162, 8618), (163, 8171), (164, 10692), (165, 12074), (166, 11954), (167, 11852), (168, 11744), (169, 8907), (170, 8302), (171, 11337), (172, 12182), (173, 12213), (174, 11939), (175, 11979), (176, 9047), (177, 8306), (178, 11309), (179, 12211), (180, 12245), (181, 12157), (182, 12454), (183, 9268), (184, 8298), (185, 8564), (186, 11609), (187, 13086), (188, 13049), (189, 12623), (190, 9325), (191, 8684), (192, 11567), (193, 12507), (194, 12134), (195, 12485), (196, 12691), (197, 9547), (198, 8848), (199, 11561), (200, 12583), (201, 12378), (202, 12447), (203, 12486), (204, 9463), (205, 8734), (206, 11757), (207, 12591), (208, 12423), (209, 12539), (210, 12231), (211, 9340), (212, 8590), (213, 11428), (214, 12622), (215, 12147), (216, 12601), (217, 12251), (218, 9336), (219, 8517), (220, 11528), (221, 12643), (222, 12525), (223, 12147), (224, 12479), (225, 9474), (226, 8926), (227, 11391), (228, 12605), (229, 12344), (230, 12313), (231, 12227), (232, 9646), (233, 8663), (234, 11489), (235, 12284), (236, 12176), (237, 12076), (238, 12122), (239, 9171), (240, 8779), (241, 11560), (242, 12431), (243, 12272), (244, 12183), (245, 12099), (246, 9042), (247, 8420), (248, 8378), (249, 11448), (250, 12660), (251, 12693), (252, 12811), (253, 9424), (254, 8373), (255, 11500), (256, 12560), (257, 12566), (258, 12655), (259, 12884), (260, 9779), (261, 8603), (262, 11659), (263, 12584), (264, 12468), (265, 12590), (266, 12522), (267, 9597), (268, 8754), (269, 11597), (270, 12591), (271, 12405), (272, 12288), (273, 12090), (274, 9351), (275, 8477), (276, 11437), (277, 12378), (278, 12061), (279, 12017), (280, 12050), (281, 8981), (282, 8038), (283, 11110), (284, 12236), (285, 11846), (286, 11398), (287, 11959), (288, 9077), (289, 8022), (290, 11127), (291, 11888), (292, 11533), (293, 11876), (294, 11562), (295, 9086), (296, 7914), (297, 11068), (298, 12019), (299, 11683), (300, 11420), (301, 11608), (302, 8855), (303, 8262), (304, 9833), (305, 12316), (306, 11736), (307, 11703), (308, 11956), (309, 8826), (310, 8100), (311, 11283), (312, 11999), (313, 11811), (314, 11728), (315, 11533), (316, 8672), (317, 8093), (318, 11044), (319, 11985), (320, 11634), (321, 11703), (322, 11826), (323, 8771), (324, 8133), (325, 11807), (326, 12764), (327, 11332), (328, 8036), (329, 9419), (330, 8427), (331, 7937), (332, 11003), (333, 12177), (334, 11643), (335, 11681), (336, 11379), (337, 8585), (338, 7980), (339, 10772), (340, 11923), (341, 11335), (342, 11337), (343, 11205), (344, 8461), (345, 7936), (346, 11106), (347, 11884), (348, 11716), (349, 11962), (350, 12144), (351, 8726), (352, 8130), (353, 11502), (354, 12880), (355, 12391), (356, 11504), (357, 10087), (358, 7898), (359, 7192), (360, 8454), (361, 11131), (362, 12398), (363, 12189), (364, 12051), (365, 8809), (366, 7828), (367, 7883), (368, 9999), (369, 11315), (370, 11243), (371, 11506), (372, 8681), (373, 7821), (374, 10434), (375, 11665), (376, 11279), (377, 11416), (378, 11071), (379, 8887), (380, 7988), (381, 10417), (382, 11345), (383, 11252), (384, 11331), (385, 11481), (386, 8746), (387, 7956), (388, 10640), (389, 11344), (390, 11096), (391, 11380), (392, 11340), (393, 8781), (394, 8009), (395, 10515), (396, 11364), (397, 11279), (398, 11490), (399, 11264), (400, 8769), (401, 8017), (402, 10587), (403, 11483), (404, 11205), (405, 11282), (406, 11615), (407, 8949), (408, 8007), (409, 10351), (410, 12454), (411, 11828), (412, 11657), (413, 11625), (414, 8788), (415, 8038), (416, 10258), (417, 11582), (418, 11716), (419, 11786), (420, 11671), (421, 8829), (422, 8183), (423, 10702), (424, 11679), (425, 11540), (426, 11377), (427, 11649), (428, 8807), (429, 7984), (430, 10810), (431, 12115), (432, 11618), (433, 11380), (434, 11827), (435, 8744), (436, 7859), (437, 10609), (438, 11750), (439, 11736), (440, 11751), (441, 11953), (442, 8538), (443, 7787), (444, 10588), (445, 11837), (446, 11485), (447, 11435), (448, 11329), (449, 8628), (450, 7614), (451, 10541), (452, 11563), (453, 11125), (454, 11205), (455, 11319), (456, 8398), (457, 7547), (458, 10651), (459, 11960), (460, 11475), (461, 11429), (462, 11587), (463, 8588), (464, 7839), (465, 10930), (466, 11939), (467, 11750), (468, 11411), (469, 10687), (470, 8492), (471, 7503), (472, 10640), (473, 11652), (474, 11680), (475, 11504), (476, 11445), (477, 8560), (478, 7749), (479, 11014), (480, 11811), (481, 11551), (482, 11601), (483, 11457), (484, 8492), (485, 7777), (486, 11090), (487, 12119), (488, 11502), (489, 11800), (490, 11718), (491, 8565), (492, 7965), (493, 10790), (494, 11728), (495, 11723), (496, 11723), (497, 11625), (498, 8802), (499, 8165), (500, 11143), (501, 12101), (502, 12085), (503, 11872), (504, 11692), (505, 8721), (506, 8096), (507, 11250), (508, 12539), (509, 12193), (510, 12285), (511, 12246), (512, 8795), (513, 8167), (514, 8379), (515, 11271), (516, 12393), (517, 12243), (518, 11991), (519, 9069), (520, 8059), (521, 11152), (522, 12119), (523, 11774), (524, 12031), (525, 11645), (526, 8719), (527, 8149), (528, 11169), (529, 11790), (530, 11958), (531, 11906), (532, 11856), (533, 8821), (534, 8203), (535, 11223), (536, 12395), (537, 12049), (538, 11799), (539, 11942), (540, 9065), (541, 8279), (542, 11127), (543, 12349), (544, 12162), (545, 12423), (546, 12338), (547, 9283), (548, 8256), (549, 10623), (550, 9374), (551, 11399), (552, 12855), (553, 12954), (554, 9438), (555, 8506), (556, 11618), (557, 12552), (558, 12167), (559, 12253), (560, 12659), (561, 9391), (562, 8516), (563, 11461), (564, 12495), (565, 12129), (566, 12598), (567, 12428), (568, 9328), (569, 8483), (570, 11501), (571, 12580), (572, 12316), (573, 12309), (574, 12442), (575, 9277), (576, 8384), (577, 11298), (578, 12442), (579, 12249), (580, 12193), (581, 12186), (582, 9267), (583, 8346), (584, 11223), (585, 12441), (586, 12217), (587, 12243), (588, 12154), (589, 9153), (590, 8421), (591, 11297), (592, 12760), (593, 12244), (594, 12345), (595, 12362), (596, 9265), (597, 8434), (598, 11436), (599, 12612), (600, 12083), (601, 12381), (602, 12208), (603, 9155), (604, 8509), (605, 11473), (606, 12522), (607, 12631), (608, 12485), (609, 12439), (610, 9079), (611, 8438), (612, 8441), (613, 11682), (614, 12951), (615, 12924), (616, 12939), (617, 9714), (618, 8568), (619, 11480), (620, 12583), (621, 12173), (622, 12789), (623, 13023), (624, 9535), (625, 8757), (626, 11729), (627, 12692), (628, 12571), (629, 12663), (630, 12813), (631, 9341), (632, 8659), (633, 11552), (634, 12814), (635, 12605), (636, 12845), (637, 12316), (638, 8988), (639, 8545), (640, 11650), (641, 12375), (642, 12016), (643, 12245), (644, 12081), (645, 9048), (646, 7997), (647, 10892), (648, 12273), (649, 11843), (650, 12002), (651, 11078), (652, 8920), (653, 7996), (654, 10840), (655, 11974), (656, 11693), (657, 11463), (658, 11610), (659, 8673), (660, 7827), (661, 10770), (662, 11916), (663, 11573), (664, 11534), (665, 11449), (666, 8633), (667, 7876), (668, 10480), (669, 10740), (670, 11702), (671, 11746), (672, 11368), (673, 8438), (674, 7868), (675, 10809), (676, 12038), (677, 11702), (678, 11441), (679, 11246), (680, 8522), (681, 7891), (682, 10534), (683, 11455), (684, 11629), (685, 11436), (686, 11410), (687, 8493), (688, 7772), (689, 11476), (690, 12503), (691, 11304), (692, 7754), (693, 9125), (694, 8115), (695, 7500), (696, 10979), (697, 12002), (698, 11344), (699, 11215), (700, 11206), (701, 8429), (702, 7703), (703, 10346), (704, 11676), (705, 11188), (706, 11242), (707, 11166), (708, 8201), (709, 7595), (710, 10429), (711, 11784), (712, 11191), (713, 11403), (714, 11458), (715, 8509), (716, 7759), (717, 11139), (718, 12501), (719, 12043), (720, 11944), (721, 11204), (722, 8058), (723, 6999), (724, 7027), (725, 9447), (726, 11897), (727, 12530), (728, 12207), (729, 9093), (730, 7596), (731, 7683), (732, 9408), (733, 10954), (734, 11308), (735, 11631), (736, 8680), (737, 7735), (738, 10044), (739, 11018), (740, 11144), (741, 11304), (742, 11274), (743, 8488), (744, 7685), (745, 9912), (746, 11181), (747, 11148), (748, 11579), (749, 11292), (750, 8492), (751, 7701), (752, 10593), (753, 11451), (754, 11336), (755, 11405), (756, 11195), (757, 8487), (758, 7533), (759, 10374), (760, 11359), (761, 10889), (762, 11030), (763, 11335), (764, 8390), (765, 7531), (766, 10364), (767, 11360), (768, 11204), (769, 11529), (770, 11577), (771, 8578), (772, 7710), (773, 10542), (774, 11322), (775, 12094), (776, 11820), (777, 11666), (778, 8465), (779, 7763), (780, 10036), (781, 11598), (782, 11554), (783, 11697), (784, 11415), (785, 8692), (786, 7917), (787, 10693), (788, 11761), (789, 11428), (790, 10692), (791, 11785), (792, 8719), (793, 7885), (794, 10586), (795, 11475), (796, 11535), (797, 11446), (798, 11272), (799, 8611), (800, 7512), (801, 10668), (802, 11623), (803, 11338), (804, 11578), (805, 11860), (806, 8691), (807, 8010), (808, 10812), (809, 11764), (810, 11482), (811, 11653), (812, 11727), (813, 8534), (814, 8002), (815, 10662), (816, 11764), (817, 11532), (818, 11728), (819, 11659), (820, 8712), (821, 7956), (822, 10173), (823, 12055), (824, 11622), (825, 11881), (826, 10985), (827, 8354), (828, 7372), (829, 10659), (830, 11631), (831, 11429), (832, 11489), (833, 11462), (834, 8565), (835, 7687), (836, 10548), (837, 11754), (838, 11554), (839, 11282), (840, 11438), (841, 8451), (842, 7789), (843, 10957), (844, 11979), (845, 11342), (846, 11340), (847, 11070), (848, 8444), (849, 7567), (850, 10325), (851, 11391), (852, 11390), (853, 11397), (854, 11011), (855, 8483), (856, 7821), (857, 10585), (858, 11567), (859, 11403), (860, 11404), (861, 11471), (862, 8495), (863, 7758), (864, 10291), (865, 11757), (866, 11619), (867, 11637), (868, 11370), (869, 8696), (870, 7906), (871, 11073), (872, 11962), (873, 11733), (874, 11511), (875, 11835), (876, 8666), (877, 7746), (878, 8034), (879, 11151), (880, 12119), (881, 11964), (882, 11853), (883, 8866), (884, 7962), (885, 10916), (886, 11783), (887, 11695), (888, 11849), (889, 11750), (890, 8739), (891, 8013), (892, 10927), (893, 11978), (894, 11710), (895, 11521), (896, 11644), (897, 8783), (898, 8004), (899, 10981), (900, 12105), (901, 11779), (902, 12052), (903, 11759), (904, 8946), (905, 8128), (906, 11080), (907, 12150), (908, 12154), (909, 11957), (910, 12057), (911, 8956), (912, 8281), (913, 11779), (914, 13167), (915, 12563), (916, 9358), (917, 10823), (918, 9044), (919, 8248), (920, 11385), (921, 12623), (922, 12362), (923, 12256), (924, 11976), (925, 9152), (926, 8358), (927, 11421), (928, 12619), (929, 12660), (930, 12247), (931, 12049), (932, 9107), (933, 8349), (934, 11164), (935, 12731), (936, 12214), (937, 12307), (938, 12082), (939, 9012), (940, 8227), (941, 11232), (942, 12519), (943, 12128), (944, 12153), (945, 12088), (946, 9174), (947, 8327), (948, 11268), (949, 12508), (950, 12277), (951, 12385), (952, 12167), (953, 9175), (954, 8310), (955, 11499), (956, 12407), (957, 12294), (958, 12180), (959, 12419), (960, 9290), (961, 8305), (962, 11392), (963, 12270), (964, 12338), (965, 12291), (966, 12213), (967, 9130), (968, 8212), (969, 11201), (970, 12573), (971, 12339), (972, 12509), (973, 12479), (974, 9144), (975, 8250), (976, 8331), (977, 11506), (978, 12970), (979, 12657), (980, 12629), (981, 9396), (982, 8354), (983, 11543), (984, 12662), (985, 12420), (986, 12486), (987, 12019), (988, 9323), (989, 8561), (990, 12107), (991, 13063), (992, 12630), (993, 12535), (994, 12754), (995, 9492), (996, 8694), (997, 11605), (998, 12910), (999, 12768), (1000, 12684), (1001, 12756), (1002, 9359), (1003, 8393), (1004, 11491), (1005, 12851), (1006, 12347), (1007, 12248), (1008, 12224), (1009, 8900), (1010, 7960), (1011, 11186), (1012, 12311), (1013, 12069), (1014, 12157), (1015, 11582), (1016, 8710), (1017, 7970), (1018, 10770), (1019, 12272), (1020, 11894), (1021, 11764), (1022, 11495), (1023, 8459), (1024, 7786), (1025, 10790), (1026, 11857), (1027, 11807), (1028, 11538), (1029, 11618), (1030, 8695), (1031, 8061), (1032, 10846), (1033, 12054), (1034, 11812), (1035, 10313), (1036, 11717), (1037, 8614), (1038, 7753), (1039, 10846), (1040, 12019), (1041, 11575), (1042, 11854), (1043, 11880), (1044, 8780), (1045, 7666), (1046, 10586), (1047, 11687), (1048, 11065), (1049, 11516), (1050, 11523), (1051, 8562), (1052, 7808), (1053, 10712), (1054, 12001), (1055, 11557), (1056, 11617), (1057, 11713), (1058, 8535), (1059, 7452), (1060, 11352), (1061, 12451), (1062, 11169), (1063, 7770), (1064, 9302), (1065, 8315), (1066, 7929), (1067, 10969), (1068, 12123), (1069, 11837), (1070, 11587), (1071, 11547), (1072, 8505), (1073, 7730), (1074, 10642), (1075, 11900), (1076, 11521), (1077, 11845), (1078, 10623), (1079, 8618), (1080, 7717), (1081, 11193), (1082, 12379), (1083, 12116), (1084, 12181), (1085, 12552), (1086, 8684), (1087, 7749), (1088, 10604), (1089, 9114), (1090, 7092), (1091, 10321), (1092, 12260), (1093, 9103), (1094, 8193), (1095, 11911), (1096, 11924), (1097, 8349), (1098, 9914), (1099, 11196), (1100, 8617), (1101, 7657), (1102, 10456), (1103, 11615), (1104, 10872), (1105, 10981), (1106, 11545), (1107, 8368), (1108, 7524), (1109, 10267), (1110, 11502), (1111, 11319), (1112, 11311), (1113, 11321), (1114, 8340), (1115, 7527), (1116, 10444), (1117, 11536), (1118, 11508), (1119, 11511), (1120, 11410), (1121, 8634), (1122, 7526), (1123, 10527), (1124, 11661), (1125, 11084), (1126, 11171), (1127, 11518), (1128, 8488), (1129, 7706), (1130, 10596), (1131, 11621), (1132, 11291), (1133, 11228), (1134, 11538), (1135, 8411), (1136, 7566), (1137, 10778), (1138, 11734), (1139, 11548), (1140, 11288), (1141, 12321), (1142, 8805), (1143, 7670), (1144, 10023), (1145, 11126), (1146, 11574), (1147, 11571), (1148, 11458), (1149, 8845), (1150, 7553), (1151, 10481), (1152, 11566), (1153, 11573), (1154, 11666), (1155, 11516), (1156, 8589), (1157, 7681), (1158, 10837), (1159, 11909), (1160, 11570), (1161, 11523), (1162, 11571), (1163, 8700), (1164, 7649), (1165, 10691), (1166, 11944), (1167, 11661), (1168, 11397), (1169, 11573), (1170, 8521), (1171, 7617), (1172, 10881), (1173, 11726), (1174, 11550), (1175, 11634), (1176, 11846), (1177, 8641), (1178, 7594), (1179, 10903), (1180, 12160), (1181, 11845), (1182, 11745), (1183, 11184), (1184, 8329), (1185, 7458), (1186, 10283), (1187, 10799), (1188, 11662), (1189, 11669), (1190, 11657), (1191, 8576), (1192, 7207), (1193, 10726), (1194, 11840), (1195, 11356), (1196, 11499), (1197, 11348), (1198, 8444), (1199, 7559), (1200, 10620), (1201, 11714), (1202, 11652), (1203, 11743), (1204, 11560), (1205, 8497), (1206, 7673), (1207, 10793), (1208, 11979), (1209, 11783), (1210, 11755), (1211, 11295), (1212, 8285), (1213, 7410), (1214, 10265), (1215, 11518), (1216, 11346), (1217, 11608), (1218, 11686), (1219, 8502), (1220, 7868), (1221, 10982), (1222, 11855), (1223, 11781), (1224, 11861), (1225, 11701), (1226, 8568), (1227, 7493), (1228, 11247), (1229, 12031), (1230, 11703), (1231, 12109), (1232, 11749), (1233, 8493), (1234, 7845), (1235, 11189), (1236, 12346), (1237, 11910), (1238, 12023), (1239, 12212), (1240, 8756), (1241, 7873), (1242, 8079), (1243, 11045), (1244, 12545), (1245, 12357), (1246, 12061), (1247, 8853), (1248, 7763), (1249, 10716), (1250, 12037), (1251, 11794), (1252, 11826), (1253, 11938), (1254, 8678), (1255, 7578), (1256, 10854), (1257, 12251), (1258, 12075), (1259, 11882), (1260, 11214), (1261, 8835), (1262, 7777), (1263, 11212), (1264, 12190), (1265, 11875), (1266, 12012), (1267, 12192), (1268, 8751), (1269, 8199), (1270, 11031), (1271, 12511), (1272, 12264), (1273, 12291), (1274, 11916), (1275, 9184), (1276, 7823), (1277, 11198), (1278, 13003), (1279, 12820), (1280, 12433), (1281, 9445), (1282, 8255), (1283, 7860), (1284, 11501), (1285, 12927), (1286, 12292), (1287, 12451), (1288, 12132), (1289, 8841), (1290, 8092), (1291, 11198), (1292, 12625), (1293, 12474), (1294, 12552), (1295, 12101), (1296, 9055), (1297, 7973), (1298, 11410), (1299, 12928), (1300, 12319), (1301, 11988), (1302, 12178), (1303, 8939), (1304, 8213), (1305, 11465), (1306, 12482), (1307, 12356), (1308, 12198), (1309, 12084), (1310, 8775), (1311, 8044), (1312, 11189), (1313, 12585), (1314, 12046), (1315, 12141), (1316, 12110), (1317, 8876), (1318, 8174), (1319, 11274), (1320, 12632), (1321, 11963), (1322, 12342), (1323, 12240), (1324, 9066), (1325, 8125), (1326, 11387), (1327, 12479), (1328, 12394), (1329, 12121), (1330, 12081), (1331, 8950), (1332, 8053), (1333, 11094), (1334, 12577), (1335, 12270), (1336, 12475), (1337, 12422), (1338, 9078), (1339, 8075), (1340, 8116), (1341, 11307), (1342, 12720), (1343, 12462), (1344, 12454), (1345, 9074), (1346, 8281), (1347, 11244), (1348, 12457), (1349, 12182), (1350, 12467), (1351, 12394), (1352, 9053), (1353, 8265), (1354, 11584), (1355, 12891), (1356, 12793), (1357, 12372), (1358, 12560), (1359, 8968), (1360, 8253), (1361, 11474), (1362, 12621), (1363, 12193), (1364, 12132), (1365, 12057), (1366, 9119), (1367, 8104), (1368, 11453), (1369, 12550), (1370, 12161), (1371, 11903), (1372, 11939), (1373, 8787), (1374, 7726), (1375, 11123), (1376, 12261), (1377, 11689), (1378, 11623), (1379, 11627), (1380, 8489), (1381, 7358), (1382, 10180), (1383, 11859), (1384, 11450), (1385, 11481), (1386, 11451), (1387, 8393), (1388, 7604), (1389, 10782), (1390, 11957), (1391, 11490), (1392, 11561), (1393, 11607), (1394, 8438), (1395, 8000), (1396, 10824), (1397, 11753), (1398, 11593), (1399, 11406), (1400, 10142), (1401, 8706), (1402, 7884), (1403, 10909), (1404, 12210), (1405, 11704), (1406, 11608), (1407, 11624), (1408, 8577), (1409, 7794), (1410, 10796), (1411, 12022), (1412, 11485), (1413, 11233), (1414, 11615), (1415, 8483), (1416, 7757), (1417, 10945), (1418, 12014), (1419, 11529), (1420, 11754), (1421, 11930), (1422, 8769), (1423, 7803), (1424, 11583), (1425, 12618), (1426, 11216), (1427, 7680), (1428, 9172), (1429, 8269), (1430, 7593), (1431, 11195), (1432, 12509), (1433, 11997), (1434, 11810), (1435, 11385), (1436, 8316), (1437, 7608), (1438, 10696), (1439, 11825), (1440, 11555), (1441, 11431), (1442, 11380), (1443, 8178), (1444, 7504), (1445, 11054), (1446, 12506), (1447, 12199), (1448, 12543), (1449, 12543), (1450, 8997), (1451, 7675), (1452, 12021), (1453, 12061), (1454, 9129), (1455, 7055), (1456, 10075), (1457, 8679), (1458, 7864), (1459, 12206), (1460, 13521), (1461, 11818), (1462, 8213), (1463, 9784), (1464, 8437), (1465, 7807), (1466, 10556), (1467, 11843), (1468, 11428), (1469, 11526), (1470, 11469), (1471, 8612), (1472, 7642), (1473, 10553), (1474, 11850), (1475, 11542), (1476, 11491), (1477, 11535), (1478, 8698), (1479, 7690), (1480, 10325), (1481, 11806), (1482, 11650), (1483, 11680), (1484, 11389), (1485, 8525), (1486, 7586), (1487, 10771), (1488, 11813), (1489, 11483), (1490, 11513), (1491, 11616), (1492, 8507), (1493, 7650), (1494, 10867), (1495, 11659), (1496, 11745), (1497, 11529), (1498, 11573), (1499, 8567), (1500, 7952), (1501, 11113), (1502, 12166), (1503, 11752), (1504, 12329), (1505, 11203), (1506, 9112), (1507, 7957), (1508, 10471), (1509, 11923), (1510, 12022), (1511, 11802), (1512, 11879), (1513, 8759), (1514, 7779), (1515, 10871), (1516, 12185), (1517, 11815), (1518, 11817), (1519, 11536), (1520, 8678), (1521, 7798), (1522, 11019), (1523, 12180), (1524, 11740), (1525, 12046), (1526, 11811), (1527, 8510), (1528, 7699), (1529, 10801), (1530, 12150), (1531, 11752), (1532, 11883), (1533, 11120), (1534, 8697), (1535, 7808), (1536, 10836), (1537, 12343), (1538, 11918), (1539, 11728), (1540, 11703), (1541, 8730), (1542, 7625), (1543, 10779), (1544, 11960), (1545, 11757), (1546, 11983), (1547, 11715), (1548, 8399), (1549, 7831), (1550, 10990), (1551, 12125), (1552, 10992), (1553, 11944), (1554, 11976), (1555, 8715), (1556, 7240), (1557, 10904), (1558, 12255), (1559, 11992), (1560, 11868), (1561, 11118), (1562, 8437), (1563, 7330), (1564, 10383), (1565, 12207), (1566, 11898), (1567, 11931), (1568, 11820), (1569, 8595), (1570, 7557), (1571, 10848), (1572, 12213), (1573, 11730), (1574, 11729), (1575, 11511), (1576, 8469), (1577, 7774), (1578, 10832), (1579, 12175), (1580, 11565), (1581, 11750), (1582, 11776), (1583, 8595), (1584, 7750), (1585, 11071), (1586, 12440), (1587, 12177), (1588, 12037), (1589, 11868), (1590, 8701), (1591, 7716), (1592, 10760), (1593, 12225), (1594, 11511), (1595, 11913), (1596, 12113), (1597, 8778), (1598, 7810), (1599, 11228), (1600, 12567), (1601, 12241), (1602, 12482), (1603, 12312), (1604, 8764), (1605, 7888), (1606, 7953), (1607, 11573), (1608, 12590), (1609, 12674), (1610, 12255), (1611, 8837), (1612, 7914), (1613, 11005), (1614, 11762), (1615, 11898), (1616, 11778), (1617, 11752), (1618, 8892), (1619, 7558), (1620, 10791), (1621, 12122), (1622, 12007), (1623, 11996), (1624, 11830), (1625, 8769), (1626, 7836), (1627, 11280), (1628, 12519), (1629, 12038), (1630, 11968), (1631, 11877), (1632, 8819), (1633, 7794), (1634, 11218), (1635, 12351), (1636, 12246), (1637, 12258), (1638, 12050), (1639, 8840), (1640, 7930), (1641, 11025), (1642, 12882), (1643, 12680), (1644, 12517), (1645, 10371), (1646, 8372), (1647, 7694), (1648, 11030), (1649, 12753), (1650, 12535), (1651, 12463), (1652, 12288), (1653, 8996), (1654, 8096), (1655, 11149), (1656, 13034), (1657, 12593), (1658, 12467), (1659, 12345), (1660, 8905), (1661, 8018), (1662, 11598), (1663, 12686), (1664, 12785), (1665, 12536), (1666, 12287), (1667, 8888), (1668, 8069), (1669, 11350), (1670, 12919), (1671, 12556), (1672, 12375), (1673, 12296), (1674, 8784), (1675, 7876), (1676, 11277), (1677, 12758), (1678, 12244), (1679, 12535), (1680, 12258), (1681, 9256), (1682, 8168), (1683, 11622), (1684, 12857), (1685, 12577), (1686, 12487), (1687, 12486), (1688, 9296), (1689, 8176), (1690, 11565), (1691, 12878), (1692, 12491), (1693, 12467), (1694, 12496), (1695, 9106), (1696, 8252), (1697, 11627), (1698, 12908), (1699, 12459), (1700, 12595), (1701, 12447), (1702, 9230), (1703, 8162), (1704, 11396), (1705, 12677), (1706, 12289), (1707, 12474), (1708, 12820), (1709, 9057), (1710, 7979), (1711, 8428), (1712, 12092), (1713, 13501), (1714, 13306), (1715, 12920), (1716, 9463), (1717, 8434), (1718, 11694), (1719, 12975), (1720, 12768), (1721, 12905), (1722, 13030), (1723, 9541), (1724, 8431), (1725, 11647), (1726, 12774), (1727, 12805), (1728, 12708), (1729, 12501), (1730, 9230), (1731, 8279), (1732, 11744), (1733, 12716), (1734, 12196), (1735, 12410), (1736, 12247), (1737, 8895), (1738, 7927), (1739, 11235), (1740, 12555), (1741, 12119), (1742, 12128), (1743, 11750), (1744, 8610), (1745, 7785), (1746, 10645), (1747, 11815), (1748, 12063), (1749, 12049), (1750, 11792), (1751, 8475), (1752, 7795), (1753, 10797), (1754, 12404), (1755, 11721), (1756, 11866), (1757, 11644), (1758, 8447), (1759, 7768), (1760, 10967), (1761, 11996), (1762, 11841), (1763, 11667), (1764, 11213), (1765, 8164), (1766, 7849), (1767, 11139), (1768, 12235), (1769, 11726), (1770, 12007), (1771, 11773), (1772, 8623), (1773, 7615), (1774, 11171), (1775, 12312), (1776, 11662), (1777, 11904), (1778, 10968), (1779, 8689), (1780, 7759), (1781, 11103), (1782, 12348), (1783, 11729), (1784, 11815), (1785, 12095), (1786, 8687), (1787, 7649), (1788, 11942), (1789, 13143), (1790, 11311), (1791, 7658), (1792, 9185), (1793, 8295), (1794, 7732), (1795, 11117), (1796, 12612), (1797, 12003), (1798, 11990), (1799, 11661), (1800, 8368), (1801, 7614), (1802, 10872), (1803, 12354), (1804, 11824), (1805, 11685), (1806, 11284), (1807, 8418), (1808, 7460), (1809, 11063), (1810, 12430), (1811, 12256), (1812, 12572), (1813, 12634), (1814, 8804), (1815, 7792), (1816, 12414), (1817, 13286), (1818, 11149), (1819, 8464), (1820, 7020), (1821, 7735), (1822, 7829), (1823, 11980), (1824, 13637), (1825, 13297), (1826, 11389), (1827, 8163), (1828, 7637), (1829, 7416), (1830, 10396), (1831, 12004), (1832, 11718), (1833, 11901), (1834, 11772), (1835, 8466), (1836, 7704), (1837, 10816), (1838, 12190), (1839, 11626), (1840, 11767), (1841, 11704), (1842, 8444), (1843, 7679), (1844, 10508), (1845, 11812), (1846, 11901), (1847, 12027), (1848, 11677), (1849, 8587), (1850, 7597), (1851, 10973), (1852, 11915), (1853, 11548), (1854, 11745), (1855, 11571), (1856, 8473), (1857, 7445), (1858, 10718), (1859, 12037), (1860, 11747), (1861, 11811), (1862, 11693), (1863, 8394), (1864, 7675), (1865, 11022), (1866, 12157), (1867, 11849), (1868, 12086), (1869, 11709), (1870, 8298), (1871, 7902), (1872, 10431), (1873, 11987), (1874, 11868), (1875, 11909), (1876, 11818), (1877, 8604), (1878, 7664), (1879, 10958), (1880, 11875), (1881, 11761), (1882, 11716), (1883, 11615), (1884, 8458), (1885, 7806), (1886, 10958), (1887, 12288), (1888, 11998), (1889, 11767), (1890, 11841), (1891, 8616), (1892, 7578), (1893, 10749), (1894, 11896), (1895, 11823), (1896, 11832), (1897, 11834), (1898, 8436), (1899, 7549), (1900, 10830), (1901, 12134), (1902, 11928), (1903, 11915), (1904, 11554), (1905, 8621), (1906, 7582), (1907, 10743), (1908, 12132), (1909, 11764), (1910, 11879), (1911, 11543), (1912, 8592), (1913, 7389), (1914, 11259), (1915, 12071), (1916, 11838), (1917, 11313), (1918, 11354), (1919, 8059), (1920, 7067), (1921, 10820), (1922, 12063), (1923, 11941), (1924, 11724), (1925, 11550), (1926, 8364), (1927, 7510), (1928, 10849), (1929, 11884), (1930, 11669), (1931, 11818), (1932, 11546), (1933, 8633), (1934, 7394), (1935, 10767), (1936, 12067), (1937, 11636), (1938, 11763), (1939, 11533), (1940, 8301), (1941, 7370), (1942, 10806), (1943, 12013), (1944, 11915), (1945, 11743), (1946, 11417), (1947, 8522), (1948, 7537), (1949, 10972), (1950, 12455), (1951, 12278), (1952, 12267), (1953, 11857), (1954, 8314), (1955, 7630), (1956, 11158), (1957, 12316), (1958, 12111), (1959, 11801), (1960, 11874), (1961, 8492), (1962, 7600), (1963, 11106), (1964, 12438), (1965, 11758), (1966, 11944), (1967, 11895), (1968, 8558), (1969, 7700), (1970, 11340), (1971, 12833), (1972, 12346), (1973, 12640), (1974, 12405), (1975, 8875), (1976, 7661), (1977, 7843), (1978, 11583), (1979, 12961), (1980, 12796), (1981, 12340), (1982, 8814), (1983, 7691), (1984, 11105), (1985, 12338), (1986, 12010), (1987, 12259), (1988, 12028), (1989, 8654), (1990, 7648), (1991, 11145), (1992, 12525), (1993, 12089), (1994, 12069), (1995, 11861), (1996, 8621), (1997, 7675), (1998, 11492), (1999, 12527), (2000, 12130), (2001, 12343), (2002, 11768), (2003, 8922), (2004, 7968), (2005, 11506), (2006, 12853), (2007, 12480), (2008, 12828), (2009, 12525), (2010, 8764), (2011, 7973), (2012, 8413), (2013, 11799), (2014, 13343), (2015, 13245), (2016, 12566), (2017, 9196), (2018, 7882), (2019, 11489), (2020, 12646), (2021, 12631), (2022, 12795), (2023, 12582), (2024, 9034), (2025, 8025), (2026, 11556), (2027, 12849), (2028, 12685), (2029, 12945), (2030, 12674), (2031, 9258), (2032, 8182), (2033, 11687), (2034, 12903), (2035, 12803), (2036, 12840), (2037, 12537), (2038, 9157), (2039, 8167), (2040, 11663), (2041, 12660), (2042, 12564), (2043, 12587), (2044, 12448), (2045, 9070), (2046, 8074), (2047, 11408), (2048, 13035), (2049, 12572), (2050, 13103), (2051, 11924), (2052, 9143), (2053, 8190), (2054, 11753), (2055, 13201), (2056, 12833), (2057, 12783), (2058, 12764), (2059, 9114), (2060, 7964), (2061, 11673), (2062, 13035), (2063, 12595), (2064, 12628), (2065, 12570), (2066, 9387), (2067, 8203), (2068, 11568), (2069, 12692), (2070, 12572), (2071, 12896), (2072, 12914), (2073, 8953), (2074, 8203), (2075, 8249), (2076, 11969), (2077, 13437), (2078, 14540), (2079, 13181), (2080, 9634), (2081, 8463), (2082, 11481), (2083, 12770), (2084, 12880), (2085, 12843), (2086, 13142), (2087, 9599), (2088, 8559), (2089, 11961), (2090, 13384), (2091, 12994), (2092, 13149), (2093, 13009), (2094, 9568), (2095, 8290), (2096, 12103), (2097, 13358), (2098, 12785), (2099, 12523), (2100, 12544), (2101, 9099), (2102, 7888), (2103, 11506), (2104, 12871), (2105, 12534), (2106, 12306), (2107, 12341), (2108, 8804), (2109, 7835), (2110, 11203), (2111, 12442), (2112, 12041), (2113, 12115), (2114, 12187), (2115, 8594), (2116, 7562), (2117, 11021), (2118, 12354), (2119, 11830), (2120, 11960), (2121, 11912), (2122, 8404), (2123, 7465), (2124, 11077), (2125, 12221), (2126, 11654), (2127, 11693), (2128, 11534), (2129, 8488), (2130, 7495), (2131, 10839), (2132, 12098), (2133, 11803), (2134, 11806), (2135, 11868), (2136, 8533), (2137, 7481), (2138, 11049), (2139, 12092), (2140, 11632), (2141, 11802), (2142, 11556), (2143, 8349), (2144, 7526), (2145, 10928), (2146, 12263), (2147, 11665), (2148, 11908), (2149, 12128), (2150, 8630), (2151, 7514), (2152, 12104), (2153, 12804), (2154, 11409), (2155, 7529), (2156, 8892), (2157, 8024), (2158, 7418), (2159, 11095), (2160, 12544), (2161, 12282), (2162, 11976), (2163, 11591), (2164, 8333), (2165, 7503), (2166, 10956), (2167, 12329), (2168, 11849), (2169, 11728), (2170, 11459), (2171, 8442), (2172, 7528), (2173, 10830), (2174, 12667), (2175, 12623), (2176, 12441), (2177, 12453), (2178, 8979), (2179, 7732), (2180, 12497), (2181, 13508), (2182, 12166), (2183, 10591), (2184, 8046), (2185, 6674), (2186, 7432), (2187, 11579), (2188, 13158), (2189, 12629), (2190, 11935), (2191, 9335), (2192, 8843), (2193, 7816), (2194, 11123), (2195, 12703), (2196, 12240), (2197, 12260), (2198, 12280), (2199, 8750), (2200, 7736), (2201, 11418), (2202, 12323), (2203, 12057), (2204, 11556), (2205, 11924), (2206, 8365), (2207, 7499), (2208, 10601), (2209, 12086), (2210, 12083), (2211, 12188), (2212, 11667), (2213, 8633), (2214, 7712), (2215, 11184), (2216, 12253), (2217, 11879), (2218, 12136), (2219, 11673), (2220, 8635), (2221, 7603), (2222, 10882), (2223, 12359), (2224, 12082), (2225, 11806), (2226, 11828), (2227, 8474), (2228, 7730), (2229, 11375), (2230, 12591), (2231, 12024), (2232, 12339), (2233, 12182), (2234, 8674), (2235, 7801), (2236, 11920), (2237, 12711), (2238, 12256), (2239, 12274), (2240, 12162), (2241, 8693), (2242, 7763), (2243, 10406), (2244, 12401), (2245, 11972), (2246, 12160), (2247, 11971), (2248, 8847), (2249, 7716), (2250, 11215), (2251, 11645), (2252, 12407), (2253, 12261), (2254, 12120), (2255, 8861), (2256, 7599), (2257, 11122), (2258, 12133), (2259, 12061), (2260, 12303), (2261, 11898), (2262, 8657), (2263, 7762), (2264, 10946), (2265, 12523), (2266, 12114), (2267, 12154), (2268, 12147), (2269, 8502), (2270, 7623), (2271, 11281), (2272, 12370), (2273, 12047), (2274, 12168), (2275, 12104), (2276, 8975), (2277, 7675), (2278, 11051), (2279, 12394), (2280, 11806), (2281, 11851), (2282, 11638), (2283, 8238), (2284, 7419), (2285, 11178), (2286, 12523), (2287, 11946), (2288, 11929), (2289, 12004), (2290, 8583), (2291, 7628), (2292, 11108), (2293, 12567), (2294, 12241), (2295, 11677), (2296, 11829), (2297, 8718), (2298, 7725), (2299, 11115), (2300, 12525), (2301, 12251), (2302, 12055), (2303, 11080), (2304, 8233), (2305, 7375), (2306, 11109), (2307, 12237), (2308, 11994), (2309, 12013), (2310, 11785), (2311, 8580), (2312, 7515), (2313, 11399), (2314, 12692), (2315, 12017), (2316, 12212), (2317, 12252), (2318, 8689), (2319, 7675), (2320, 11384), (2321, 12470), (2322, 12342), (2323, 12185), (2324, 11928), (2325, 8569), (2326, 7495), (2327, 11316), (2328, 12581), (2329, 12487), (2330, 12336), (2331, 11961), (2332, 8476), (2333, 7741), (2334, 11365), (2335, 12806), (2336, 12427), (2337, 12752), (2338, 12503), (2339, 8866), (2340, 7758), (2341, 8099), (2342, 11699), (2343, 12725), (2344, 13114), (2345, 12428), (2346, 8776), (2347, 7860), (2348, 11458), (2349, 12434), (2350, 12217), (2351, 12508), (2352, 12275), (2353, 8956), (2354, 7961), (2355, 11580), (2356, 12416), (2357, 12599), (2358, 12528), (2359, 12524), (2360, 8981), (2361, 8024), (2362, 11425), (2363, 12764), (2364, 12497), (2365, 12561), (2366, 12364), (2367, 8952), (2368, 8057), (2369, 11914), (2370, 13103), (2371, 12776), (2372, 13184), (2373, 12970), (2374, 9215), (2375, 7933), (2376, 11080), (2377, 9394), (2378, 12078), (2379, 13558), (2380, 13372), (2381, 9479), (2382, 8435), (2383, 12161), (2384, 13267), (2385, 12543), (2386, 12684), (2387, 12941), (2388, 9392), (2389, 8313), (2390, 11876), (2391, 13354), (2392, 12718), (2393, 12855), (2394, 12767), (2395, 9269), (2396, 8011), (2397, 11916), (2398, 12943), (2399, 12700), (2400, 12849), (2401, 12654), (2402, 9303), (2403, 8289), (2404, 11626), (2405, 13081), (2406, 12489), (2407, 12834), (2408, 12681), (2409, 9236), (2410, 8201), (2411, 11628), (2412, 13334), (2413, 12926), (2414, 12694), (2415, 12478), (2416, 9072), (2417, 8174), (2418, 11638), (2419, 13067), (2420, 12876), (2421, 12828), (2422, 12839), (2423, 9102), (2424, 8122), (2425, 11711), (2426, 13172), (2427, 12685), (2428, 12737), (2429, 12623), (2430, 9193), (2431, 8086), (2432, 11794), (2433, 12922), (2434, 12805), (2435, 13052), (2436, 12826), (2437, 9066), (2438, 8080), (2439, 8412), (2440, 11871), (2441, 13577), (2442, 13194), (2443, 13166), (2444, 9617), (2445, 8354), (2446, 12091), (2447, 13263), (2448, 12965), (2449, 13432), (2450, 13245), (2451, 9580), (2452, 8512), (2453, 12244), (2454, 13533), (2455, 13384), (2456, 13050), (2457, 12893), (2458, 9304), (2459, 8392), (2460, 12150), (2461, 13210), (2462, 13137), (2463, 13202), (2464, 12724), (2465, 9135), (2466, 8279), (2467, 11905), (2468, 12969), (2469, 12841), (2470, 12943), (2471, 12491), (2472, 8925), (2473, 7956), (2474, 11022), (2475, 12750), (2476, 12564), (2477, 12756), (2478, 11468), (2479, 8985), (2480, 7972), (2481, 11702), (2482, 12805), (2483, 12470), (2484, 12195), (2485, 12146), (2486, 8765), (2487, 7772), (2488, 11526), (2489, 12685), (2490, 12463), (2491, 12475), (2492, 12051), (2493, 8790), (2494, 7954), (2495, 11227), (2496, 11069), (2497, 12579), (2498, 12734), (2499, 12329), (2500, 8853), (2501, 7890), (2502, 11520), (2503, 12592), (2504, 12506), (2505, 12502), (2506, 12300), (2507, 9052), (2508, 7874), (2509, 11129), (2510, 12776), (2511, 12623), (2512, 12706), (2513, 12606), (2514, 8906), (2515, 7872), (2516, 12625), (2517, 13672), (2518, 12038), (2519, 7939), (2520, 9539), (2521, 8320), (2522, 7793), (2523, 11831), (2524, 13446), (2525, 12786), (2526, 12473), (2527, 12219), (2528, 8622), (2529, 7748), (2530, 11176), (2531, 12607), (2532, 12363), (2533, 12498), (2534, 12263), (2535, 8635), (2536, 7807), (2537, 11506), (2538, 13189), (2539, 12214), (2540, 12313), (2541, 12368), (2542, 8981), (2543, 7845), (2544, 12276), (2545, 13430), (2546, 13391), (2547, 13146), (2548, 11937), (2549, 8294), (2550, 6801), (2551, 6566), (2552, 10070), (2553, 12858), (2554, 13532), (2555, 13234), (2556, 9177), (2557, 7721), (2558, 7437), (2559, 10346), (2560, 12113), (2561, 12429), (2562, 12427), (2563, 9019), (2564, 7747), (2565, 11239), (2566, 12105), (2567, 12160), (2568, 12155), (2569, 12464), (2570, 8647), (2571, 7674), (2572, 10720), (2573, 12041), (2574, 12046), (2575, 12362), (2576, 12044), (2577, 8602), (2578, 7668), (2579, 11219), (2580, 12176), (2581, 12046), (2582, 12316), (2583, 11993), (2584, 8640), (2585, 7641), (2586, 11269), (2587, 12237), (2588, 12216), (2589, 12186), (2590, 12188), (2591, 8476), (2592, 7608), (2593, 11546), (2594, 12247), (2595, 12091), (2596, 12147), (2597, 12086), (2598, 8637), (2599, 7437), (2600, 11413), (2601, 12012), (2602, 12890), (2603, 12407), (2604, 12119), (2605, 8474), (2606, 7422), (2607, 10356), (2608, 12113), (2609, 12206), (2610, 12234), (2611, 12040), (2612, 8491), (2613, 7646), (2614, 11073), (2615, 12068), (2616, 11921), (2617, 12263), (2618, 12128), (2619, 8761), (2620, 7675), (2621, 11182), (2622, 12052), (2623, 12094), (2624, 12194), (2625, 12242), (2626, 8679), (2627, 7564), (2628, 11366), (2629, 12273), (2630, 12367), (2631, 12286), (2632, 12248), (2633, 8850), (2634, 7399), (2635, 11099), (2636, 12574), (2637, 12394), (2638, 12262), (2639, 12213), (2640, 8683), (2641, 7689), (2642, 11042), (2643, 12328), (2644, 12175), (2645, 12166), (2646, 11855), (2647, 8581), (2648, 7037), (2649, 11430), (2650, 12578), (2651, 12409), (2652, 12233), (2653, 12221), (2654, 8626), (2655, 7594), (2656, 11349), (2657, 12745), (2658, 12631), (2659, 12511), (2660, 10741), (2661, 8102), (2662, 7080), (2663, 11002), (2664, 12636), (2665, 12151), (2666, 11942), (2667, 12047), (2668, 8671), (2669, 7643), (2670, 11462), (2671, 12720), (2672, 12444), (2673, 12309), (2674, 12154), (2675, 8474), (2676, 7481), (2677, 11190), (2678, 12745), (2679, 12289), (2680, 12302), (2681, 12062), (2682, 8632), (2683, 7861), (2684, 11432), (2685, 12751), (2686, 12225), (2687, 12398), (2688, 12117), (2689, 8537), (2690, 7370), (2691, 11343), (2692, 12829), (2693, 12373), (2694, 12426), (2695, 12132), (2696, 8658), (2697, 7597), (2698, 11398), (2699, 12785), (2700, 12662), (2701, 12932), (2702, 12504), (2703, 8790), (2704, 7409), (2705, 7810), (2706, 11754), (2707, 13112), (2708, 12782), (2709, 12426), (2710, 8753), (2711, 7762), (2712, 11239), (2713, 12401), (2714, 12507), (2715, 12333), (2716, 12231), (2717, 8604), (2718, 7559), (2719, 11521), (2720, 12894), (2721, 12102), (2722, 12429), (2723, 12192), (2724, 8631), (2725, 7607), (2726, 11559), (2727, 12517), (2728, 12452), (2729, 12323), (2730, 12068), (2731, 8304), (2732, 7501), (2733, 11363), (2734, 12638), (2735, 12560), (2736, 12830), (2737, 12683), (2738, 9096), (2739, 7953), (2740, 12154), (2741, 13081), (2742, 9450), (2743, 12264), (2744, 12901), (2745, 9357), (2746, 8121), (2747, 11794), (2748, 13317), (2749, 12690), (2750, 12949), (2751, 11978), (2752, 9112), (2753, 7922), (2754, 12160), (2755, 13357), (2756, 12970), (2757, 13031), (2758, 12697), (2759, 9189), (2760, 7961), (2761, 11836), (2762, 13239), (2763, 12785), (2764, 12784), (2765, 12441), (2766, 8952), (2767, 7787), (2768, 11912), (2769, 12903), (2770, 12654), (2771, 12846), (2772, 12619), (2773, 8993), (2774, 7948), (2775, 11735), (2776, 13198), (2777, 12884), (2778, 13080), (2779, 12833), (2780, 9100), (2781, 8130), (2782, 11446), (2783, 13037), (2784, 13005), (2785, 13126), (2786, 12871), (2787, 9097), (2788, 7809), (2789, 12030), (2790, 13236), (2791, 12855), (2792, 12918), (2793, 12736), (2794, 9048), (2795, 7977), (2796, 11844), (2797, 13465), (2798, 12873), (2799, 13232), (2800, 13177), (2801, 9090), (2802, 8056), (2803, 7950), (2804, 12219), (2805, 13730), (2806, 13658), (2807, 13465), (2808, 9200), (2809, 8184), (2810, 12227), (2811, 13238), (2812, 12818), (2813, 12857), (2814, 13211), (2815, 9470), (2816, 8175), (2817, 12412), (2818, 13233), (2819, 13244), (2820, 13435), (2821, 13034), (2822, 9397), (2823, 8341), (2824, 12292), (2825, 13695), (2826, 13131), (2827, 12965), (2828, 12925), (2829, 9043), (2830, 7869), (2831, 12109), (2832, 13189), (2833, 12756), (2834, 12960), (2835, 12589), (2836, 8725), (2837, 7621), (2838, 11298), (2839, 12580), (2840, 12515), (2841, 12304), (2842, 12460), (2843, 8526), (2844, 7611), (2845, 11394), (2846, 12477), (2847, 12297), (2848, 12316), (2849, 12121), (2850, 8563), (2851, 7331), (2852, 11446), (2853, 12571), (2854, 12364), (2855, 12220), (2856, 11996), (2857, 8292), (2858, 7522), (2859, 11143), (2860, 12177), (2861, 10601), (2862, 12559), (2863, 12056), (2864, 8434), (2865, 7392), (2866, 11402), (2867, 12345), (2868, 12109), (2869, 12233), (2870, 12185), (2871, 8529), (2872, 7458), (2873, 11423), (2874, 12066), (2875, 12258), (2876, 12636), (2877, 12708), (2878, 8559), (2879, 7371), (2880, 12487), (2881, 13252), (2882, 11818), (2883, 7363), (2884, 9332), (2885, 7916), (2886, 7290), (2887, 11498), (2888, 12930), (2889, 12207), (2890, 12180), (2891, 11750), (2892, 8038), (2893, 7216), (2894, 11275), (2895, 12293), (2896, 12307), (2897, 11892), (2898, 11424), (2899, 8189), (2900, 7333), (2901, 11345), (2902, 12407), (2903, 12510), (2904, 11948), (2905, 12143), (2906, 8447), (2907, 7309), (2908, 12049), (2909, 13300), (2910, 13072), (2911, 13558), (2912, 13185), (2913, 8879), (2914, 7082), (2915, 7448), (2916, 6443), (2917, 10735), (2918, 13762), (2919, 13918), (2920, 9365), (2921, 7679), (2922, 10018), (2923, 7790), (2924, 10420), (2925, 12134), (2926, 12433), (2927, 8760), (2928, 7505), (2929, 11371), (2930, 12248), (2931, 11391), (2932, 12318), (2933, 12048), (2934, 8399), (2935, 7355), (2936, 11344), (2937, 12101), (2938, 11697), (2939, 12077), (2940, 12015), (2941, 8301), (2942, 7338), (2943, 10741), (2944, 12104), (2945, 11970), (2946, 12235), (2947, 11867), (2948, 8400), (2949, 7387), (2950, 11139), (2951, 11963), (2952, 11902), (2953, 11921), (2954, 11943), (2955, 8799), (2956, 7322), (2957, 11176), (2958, 12242), (2959, 11934), (2960, 12157), (2961, 12223), (2962, 8589), (2963, 7461), (2964, 11348), (2965, 12467), (2966, 11814), (2967, 12785), (2968, 12334), (2969, 8563), (2970, 7310), (2971, 10729), (2972, 12053), (2973, 12516), (2974, 12166), (2975, 12459), (2976, 8515), (2977, 7372), (2978, 11322), (2979, 12227), (2980, 12055), (2981, 12096), (2982, 12214), (2983, 8310), (2984, 7497), (2985, 11422), (2986, 12435), (2987, 12152), (2988, 12299), (2989, 12037), (2990, 8470), (2991, 7529), (2992, 10989), (2993, 12384), (2994, 11810), (2995, 12358), (2996, 12249), (2997, 8596), (2998, 7526), (2999, 11434), (3000, 12439), (3001, 12278), (3002, 12249), (3003, 12056), (3004, 8466), (3005, 7314), (3006, 11292), (3007, 12562), (3008, 12353), (3009, 12265), (3010, 11324), (3011, 8177), (3012, 7019), (3013, 10090), (3014, 12560), (3015, 12147), (3016, 12061), (3017, 11812), (3018, 8191), (3019, 7008), (3020, 11478), (3021, 12465), (3022, 12188), (3023, 12040), (3024, 12070), (3025, 8345), (3026, 7482), (3027, 11220), (3028, 12586), (3029, 12271), (3030, 12219), (3031, 12054), (3032, 8113), (3033, 7205), (3034, 11365), (3035, 12255), (3036, 12066), (3037, 12249), (3038, 11737), (3039, 8127), (3040, 7417), (3041, 11230), (3042, 12381), (3043, 12080), (3044, 12157), (3045, 11923), (3046, 8104), (3047, 7338), (3048, 11167), (3049, 12265), (3050, 12082), (3051, 12035), (3052, 12140), (3053, 8216), (3054, 7370), (3055, 11235), (3056, 12655), (3057, 12489), (3058, 12374), (3059, 11963), (3060, 8420), (3061, 7358), (3062, 11568), (3063, 12675), (3064, 12463), (3065, 12871), (3066, 12569), (3067, 8374), (3068, 7221), (3069, 7667), (3070, 11923), (3071, 13213), (3072, 12738), (3073, 12354), (3074, 8410), (3075, 7469), (3076, 11273), (3077, 12391), (3078, 12433), (3079, 12478), (3080, 12067), (3081, 8392), (3082, 7401), (3083, 11664), (3084, 12464), (3085, 12499), (3086, 12253), (3087, 12364), (3088, 8593), (3089, 7575), (3090, 11482), (3091, 12898), (3092, 12350), (3093, 12633), (3094, 12163), (3095, 8576), (3096, 7557), (3097, 11724), (3098, 13168), (3099, 12850), (3100, 13102), (3101, 12779), (3102, 8841), (3103, 7739), (3104, 12397), (3105, 13862), (3106, 13393), (3107, 9346), (3108, 11131), (3109, 8715), (3110, 7951), (3111, 12060), (3112, 13556), (3113, 12998), (3114, 12974), (3115, 12505), (3116, 8778), (3117, 7781), (3118, 12176), (3119, 13352), (3120, 13070), (3121, 13183), (3122, 12668), (3123, 8684), (3124, 7823), (3125, 11949), (3126, 13318), (3127, 12969), (3128, 13191), (3129, 12745), (3130, 8924), (3131, 7812), (3132, 11961), (3133, 13342), (3134, 13055), (3135, 13042), (3136, 12850), (3137, 8857), (3138, 7689), (3139, 11938), (3140, 13155), (3141, 12764), (3142, 13130), (3143, 12664), (3144, 8929), (3145, 7869), (3146, 12110), (3147, 13284), (3148, 13028), (3149, 13277), (3150, 12892), (3151, 9138), (3152, 7812), (3153, 12040), (3154, 13460), (3155, 13069), (3156, 12964), (3157, 12934), (3158, 8932), (3159, 7833), (3160, 11966), (3161, 13504), (3162, 13109), (3163, 13143), (3164, 13054), (3165, 8981), (3166, 7840), (3167, 8085), (3168, 12325), (3169, 13675), (3170, 13751), (3171, 13399), (3172, 9238), (3173, 7956), (3174, 12619), (3175, 13644), (3176, 12371), (3177, 13982), (3178, 12786), (3179, 9258), (3180, 8331), (3181, 12520), (3182, 13883), (3183, 13655), (3184, 13620), (3185, 13455), (3186, 9436), (3187, 8091), (3188, 12564), (3189, 13884), (3190, 13228), (3191, 13211), (3192, 13047), (3193, 9120), (3194, 7842), (3195, 11998), (3196, 13296), (3197, 13164), (3198, 12778), (3199, 12582), (3200, 8783), (3201, 7671), (3202, 11747), (3203, 12802), (3204, 12417), (3205, 12433), (3206, 12271), (3207, 8334), (3208, 7326), (3209, 11312), (3210, 12513), (3211, 12363), (3212, 12222), (3213, 11968), (3214, 8391), (3215, 7256), (3216, 11473), (3217, 12921), (3218, 12380), (3219, 12447), (3220, 12276), (3221, 8303), (3222, 7591), (3223, 11603), (3224, 12561), (3225, 12023), (3226, 10607), (3227, 12335), (3228, 8364), (3229, 7380), (3230, 11526), (3231, 12604), (3232, 12349), (3233, 12378), (3234, 12211), (3235, 8454), (3236, 7561), (3237, 11310), (3238, 12422), (3239, 11833), (3240, 12205), (3241, 12016), (3242, 8157), (3243, 7167), (3244, 11554), (3245, 12462), (3246, 12254), (3247, 12431), (3248, 12726), (3249, 8417), (3250, 7526), (3251, 12198), (3252, 13064), (3253, 11245), (3254, 7262), (3255, 9155), (3256, 8007), (3257, 7286), (3258, 11563), (3259, 12980), (3260, 12396), (3261, 12343), (3262, 11560), (3263, 8362), (3264, 7190), (3265, 11313), (3266, 12544), (3267, 12311), (3268, 12533), (3269, 11378), (3270, 8274), (3271, 7364), (3272, 12061), (3273, 13102), (3274, 13252), (3275, 13342), (3276, 13690), (3277, 8934), (3278, 7460), (3279, 11135), (3280, 8929), (3281, 6629), (3282, 10903), (3283, 13332), (3284, 8953), (3285, 7892), (3286, 12906), (3287, 12339), (3288, 7783), (3289, 10863), (3290, 11965), (3291, 8374), (3292, 7365), (3293, 11220), (3294, 12398), (3295, 11872), (3296, 11828), (3297, 12303), (3298, 8334), (3299, 7214), (3300, 11017), (3301, 12651), (3302, 11870), (3303, 11897), (3304, 11855), (3305, 8300), (3306, 7366), (3307, 10842), (3308, 12052), (3309, 11835), (3310, 11892), (3311, 11890), (3312, 8241), (3313, 7295), (3314, 11231), (3315, 12363), (3316, 11851), (3317, 12062), (3318, 11774), (3319, 8538), (3320, 7515), (3321, 11311), (3322, 12305), (3323, 11786), (3324, 12144), (3325, 12195), (3326, 8459), (3327, 7396), (3328, 11771), (3329, 12700), (3330, 12339), (3331, 12086), (3332, 12807), (3333, 8730), (3334, 7568), (3335, 10522), (3336, 12403), (3337, 12395), (3338, 12320), (3339, 12435), (3340, 8767), (3341, 7582), (3342, 11677), (3343, 12595), (3344, 12136), (3345, 12437), (3346, 12329), (3347, 8500), (3348, 7438), (3349, 12491), (3350, 12638), (3351, 12264), (3352, 12419), (3353, 12259), (3354, 8528), (3355, 7300), (3356, 11456), (3357, 12693), (3358, 12278), (3359, 12127), (3360, 12582), (3361, 8485), (3362, 7387), (3363, 11718), (3364, 12697), (3365, 12374), (3366, 12506), (3367, 12446), (3368, 8372), (3369, 7303), (3370, 11487), (3371, 12819), (3372, 12324), (3373, 12403), (3374, 12317), (3375, 8579), (3376, 7399), (3377, 11331), (3378, 11754), (3379, 12739), (3380, 12380), (3381, 12453), (3382, 8371), (3383, 7181), (3384, 11554), (3385, 12813), (3386, 12172), (3387, 12485), (3388, 12176), (3389, 8380), (3390, 7130), (3391, 11599), (3392, 12799), (3393, 12701), (3394, 12716), (3395, 11576), (3396, 8077), (3397, 7057), (3398, 11303), (3399, 12474), (3400, 12361), (3401, 12297), (3402, 12049), (3403, 8213), (3404, 7342), (3405, 11460), (3406, 12430), (3407, 12064), (3408, 12526), (3409, 12297), (3410, 8366), (3411, 7481), (3412, 11814), (3413, 12884), (3414, 12447), (3415, 12664), (3416, 12522), (3417, 8594), (3418, 7484), (3419, 11943), (3420, 12455), (3421, 12635), (3422, 12896), (3423, 12662), (3424, 8536), (3425, 7505), (3426, 11811), (3427, 12993), (3428, 13139), (3429, 13199), (3430, 12965), (3431, 8678), (3432, 7598), (3433, 7825), (3434, 12163), (3435, 13619), (3436, 13277), (3437, 13034), (3438, 8742), (3439, 7570), (3440, 11835), (3441, 12824), (3442, 12616), (3443, 12647), (3444, 12617), (3445, 8559), (3446, 7493), (3447, 11743), (3448, 13102), (3449, 12931), (3450, 12883), (3451, 11821), (3452, 8594), (3453, 7571), (3454, 12229), (3455, 13144), (3456, 12903), (3457, 12752), (3458, 12496), (3459, 8623), (3460, 7642), (3461, 12012), (3462, 13333), (3463, 13267), (3464, 13106), (3465, 12678), (3466, 8714), (3467, 7648), (3468, 12072), (3469, 13682), (3470, 13577), (3471, 13247), (3472, 9364), (3473, 8209), (3474, 7789), (3475, 12407), (3476, 13626), (3477, 13286), (3478, 13381), (3479, 12878), (3480, 8776), (3481, 7867), (3482, 12068), (3483, 13434), (3484, 13224), (3485, 13444), (3486, 13013), (3487, 8787), (3488, 7954), (3489, 12241), (3490, 13522), (3491, 13312), (3492, 13355), (3493, 12825), (3494, 8862), (3495, 7740), (3496, 12262), (3497, 13562), (3498, 13295), (3499, 13237), (3500, 13001), (3501, 8740), (3502, 7702), (3503, 12031), (3504, 13437), (3505, 13123), (3506, 13315), (3507, 13145), (3508, 9109), (3509, 7852), (3510, 12053), (3511, 13698), (3512, 12955), (3513, 13152), (3514, 13011), (3515, 9189), (3516, 8018), (3517, 12243), (3518, 13561), (3519, 13196), (3520, 13339), (3521, 13222), (3522, 9071), (3523, 7858), (3524, 12411), (3525, 13723), (3526, 13594), (3527, 13839), (3528, 13547), (3529, 9225), (3530, 7743), (3531, 8059), (3532, 12389), (3533, 14119), (3534, 13870), (3535, 13616), (3536, 9257), (3537, 8064), (3538, 12504), (3539, 13615), (3540, 13908), (3541, 12932), (3542, 13621), (3543, 9444), (3544, 8415), (3545, 12846), (3546, 14145), (3547, 13686), (3548, 13781), (3549, 13325), (3550, 9522), (3551, 8383), (3552, 12766), (3553, 14036), (3554, 13578), (3555, 13651), (3556, 13600), (3557, 9039), (3558, 8060), (3559, 12291), (3560, 13122), (3561, 13138), (3562, 13383), (3563, 13013), (3564, 8876), (3565, 7653), (3566, 11912), (3567, 13241), (3568, 13237), (3569, 13047), (3570, 13058), (3571, 8620), (3572, 7713), (3573, 11272), (3574, 12995), (3575, 12690), (3576, 12499), (3577, 12404), (3578, 8432), (3579, 7454), (3580, 11817), (3581, 13032), (3582, 12780), (3583, 12568), (3584, 12325), (3585, 8444), (3586, 7696), (3587, 11745), (3588, 13173), (3589, 12705), (3590, 12359), (3591, 10767), (3592, 8342), (3593, 7568), (3594, 12200), (3595, 13060), (3596, 12761), (3597, 12564), (3598, 12291), (3599, 8575), (3600, 7341), (3601, 11890), (3602, 12917), (3603, 12463), (3604, 12206), (3605, 12219), (3606, 8163), (3607, 7375), (3608, 11723), (3609, 12994), (3610, 12658), (3611, 12710), (3612, 12770), (3613, 8473), (3614, 7249), (3615, 12803), (3616, 13399), (3617, 11767), (3618, 7224), (3619, 9271), (3620, 7913), (3621, 7205), (3622, 11973), (3623, 13122), (3624, 12884), (3625, 12372), (3626, 11901), (3627, 8132), (3628, 7241), (3629, 11496), (3630, 12699), (3631, 12470), (3632, 12242), (3633, 12237), (3634, 8150), (3635, 7337), (3636, 12064), (3637, 13350), (3638, 13106), (3639, 13594), (3640, 13434), (3641, 8795), (3642, 7547), (3643, 12967), (3644, 12598), (3645, 9096), (3646, 6628), (3647, 10218), (3648, 8646), (3649, 7645), (3650, 12823), (3651, 14438), (3652, 12374)]\n",
            "inserted\n",
            "Tables created successfully.\n",
            "Changes committed successfully.\n",
            "Database connection closed.\n"
          ]
        }
      ],
      "source": [
        "\n",
        "def normalize_database(non_normalized_db_filename):\n",
        "\n",
        "    #sql=\"select * \"\n",
        "    #row=execute_sql_statement\n",
        "    c=sqlite3.connect('non_normalized (1).db')\n",
        "    cur=c.cursor()\n",
        "# CREATING TABLES\n",
        "    table_Date='''Create table If not exists Date(\n",
        "        Date_id INTEGER PRIMARY KEY,\n",
        "        Dates text not null,\n",
        "        Day_of_week INTEGER\n",
        "    )'''\n",
        "    table_Births='''Create table if not exists Births(\n",
        "        Date_id  INTEGER,\n",
        "        births INTEGER,\n",
        "        FOREIGN KEY (date_id) REFERENCES Date(date_id)\n",
        "    )'''\n",
        "    create_table(conn,table_Date)\n",
        "    create_table(conn,table_Births)\n",
        "\n",
        "#DATE TABLE VALUES SPLITTING\n",
        "    date=[]\n",
        "    num_births=[]\n",
        "    with open(non_normalized_db_filename) as file:\n",
        "      date_id=1\n",
        "\n",
        "      for line in file:\n",
        "        if line.startswith(\"year\"):\n",
        "            continue\n",
        "        else:\n",
        "            split_data = line.strip().split(',')\n",
        "            year=int(split_data[0])\n",
        "            month=int(split_data[1])\n",
        "            date_of_month=int(split_data[2])\n",
        "            date_tmp = datetime.date(year, month, date_of_month)\n",
        "            date_format = date_tmp.strftime('%Y-%m-%d')\n",
        "            day=int(split_data[3])\n",
        "            number_of_births=int(split_data[4])\n",
        "            date.append((date_id,date_format,day))\n",
        "            num_births.append((date_id,number_of_births))\n",
        "            date_id+=1\n",
        "\n",
        "\n",
        "    print('date',date)\n",
        "    print('num_births',num_births)\n",
        "    cur=conn.cursor()\n",
        "    with conn:\n",
        "      cur.executemany(\"INSERT INTO Date (Date_id,Dates,Day_of_week) VALUES (?,?,?)\",date)\n",
        "      cur.executemany(\"Insert into Births(Date_id,births) values (?,?)\",num_births)\n",
        "      print('inserted')\n",
        "      conn.commit()\n",
        "\n",
        "\n",
        "\n",
        "    try:\n",
        "        create_table(conn, table_Date)\n",
        "        create_table(conn, table_Births)\n",
        "\n",
        "        print(\"Tables created successfully.\")\n",
        "\n",
        "        # Commit changes to persist them\n",
        "        conn.commit()\n",
        "        print(\"Changes committed successfully.\")\n",
        "    except Error as e:\n",
        "        print(f\"Error during table creation: {e}\")\n",
        "    finally:\n",
        "        # Close the connection\n",
        "        print(\"Database connection closed.\")\n",
        "\n",
        "\n",
        "\n",
        "conn=create_connection('normalized(2).db',delete_db=True)\n",
        "normalize_database(\"non_normalized (1).db\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fetching data"
      ],
      "metadata": {
        "id": "juyNEQRTXobu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "def fetch_data_with_join(conn):\n",
        "    query = \"\"\"\n",
        "    SELECT d.Date_id, d.Dates, d.Day_of_week, b.births\n",
        "    FROM Date d\n",
        "    JOIN Births b ON d.Date_id = b.Date_id\n",
        "    \"\"\"\n",
        "    df = pd.read_sql_query(query, conn)\n",
        "    return df\n",
        "print(fetch_data_with_join(conn))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qnrjQpxfOBLt",
        "outputId": "c9b83635-23c0-46e0-c482-2355796207da"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id       Dates  Day_of_week  births\n",
            "0           1  1994-01-01            6    8096\n",
            "1           2  1994-01-02            7    7772\n",
            "2           3  1994-01-03            1   10142\n",
            "3           4  1994-01-04            2   11248\n",
            "4           5  1994-01-05            3   11053\n",
            "...       ...         ...          ...     ...\n",
            "3647     3648  2003-12-27            6    8646\n",
            "3648     3649  2003-12-28            7    7645\n",
            "3649     3650  2003-12-29            1   12823\n",
            "3650     3651  2003-12-30            2   14438\n",
            "3651     3652  2003-12-31            3   12374\n",
            "\n",
            "[3652 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training and testing data"
      ],
      "metadata": {
        "id": "qykFUXtYbFaU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "conn = sqlite3.connect('normalized(2).db')\n",
        "\n",
        "query = \"SELECT * FROM Date,Births\"\n",
        "data = pd.read_sql_query(query, conn)\n",
        "print(data['births'].value_counts())\n",
        "train_set, test_set = train_test_split(data, test_size=0.2, random_state=42, stratify=data['births'])\n",
        "print(\"Training set:\")\n",
        "print(train_set['births'].value_counts(normalize=True))  # Normalize=True gives the proportion\n",
        "\n",
        "print(\"Testing set:\")\n",
        "print(test_set['births'].value_counts(normalize=True))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "DxK0MrKmUhoS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09c7e5bd-79b7-4a52-b6e3-34d731b85d32"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "births\n",
            "11811    25564\n",
            "11750    21912\n",
            "12154    21912\n",
            "12316    21912\n",
            "7675     21912\n",
            "         ...  \n",
            "8950      3652\n",
            "11387     3652\n",
            "8125      3652\n",
            "12632     3652\n",
            "14438     3652\n",
            "Name: count, Length: 2526, dtype: int64\n",
            "Training set:\n",
            "births\n",
            "11811    0.001917\n",
            "7675     0.001643\n",
            "12154    0.001643\n",
            "12061    0.001643\n",
            "12316    0.001643\n",
            "           ...   \n",
            "7465     0.000274\n",
            "13616    0.000274\n",
            "11424    0.000274\n",
            "13615    0.000274\n",
            "11686    0.000274\n",
            "Name: proportion, Length: 2526, dtype: float64\n",
            "Testing set:\n",
            "births\n",
            "11811    0.001917\n",
            "12061    0.001643\n",
            "12154    0.001643\n",
            "7675     0.001643\n",
            "12316    0.001643\n",
            "           ...   \n",
            "13139    0.000274\n",
            "10712    0.000274\n",
            "12793    0.000274\n",
            "11823    0.000274\n",
            "8265     0.000274\n",
            "Name: proportion, Length: 2526, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Categorical and numerical columns"
      ],
      "metadata": {
        "id": "opDojAgxbM6C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "conn = sqlite3.connect('normalized(2).db')\n",
        "query = \"SELECT * FROM Births\"\n",
        "data = pd.read_sql_query(query, conn)\n",
        "print(data.head())\n",
        "data_types = data.dtypes\n",
        "print(\"Data Types:\\n\", data_types)\n",
        "categorical_columns = [col for col in data.columns if data[col].dtype == 'object' or data[col].nunique() < 10]\n",
        "numerical_columns = [col for col in data.columns if col not in categorical_columns]\n",
        "\n",
        "print(\"Categorical Columns:\", categorical_columns)\n",
        "print(\"Numerical Columns:\", numerical_columns)\n"
      ],
      "metadata": {
        "id": "sB_Z6oaFaI95",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77b4da76-f0e4-41cf-a624-b849f76132fe"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Date_id  births\n",
            "0        1    8096\n",
            "1        2    7772\n",
            "2        3   10142\n",
            "3        4   11248\n",
            "4        5   11053\n",
            "Data Types:\n",
            " Date_id    int64\n",
            "births     int64\n",
            "dtype: object\n",
            "Categorical Columns: []\n",
            "Numerical Columns: ['Date_id', 'births']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Categorical and Numerical for Date table\n"
      ],
      "metadata": {
        "id": "k_BSSZR5bS83"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "\n",
        "conn = sqlite3.connect('normalized(2).db')\n",
        "query = \"SELECT * FROM Date\"\n",
        "data = pd.read_sql_query(query, conn)\n",
        "#conn.close()\n",
        "print(data.head())\n",
        "data_types = data.dtypes\n",
        "print(\"Data Types:\\n\", data_types)\n",
        "categorical_columns = [col for col in data.columns if data[col].dtype == 'object' or data[col].nunique() < 10]\n",
        "numerical_columns = [col for col in data.columns if col not in categorical_columns]\n",
        "\n",
        "print(\"Categorical Columns:\", categorical_columns)\n",
        "print(\"Numerical Columns:\", numerical_columns)\n"
      ],
      "metadata": {
        "id": "1wQNYAd3byEO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a87ae0e0-5d01-405e-b831-419e3c1058a1"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Date_id       Dates  Day_of_week\n",
            "0        1  1994-01-01            6\n",
            "1        2  1994-01-02            7\n",
            "2        3  1994-01-03            1\n",
            "3        4  1994-01-04            2\n",
            "4        5  1994-01-05            3\n",
            "Data Types:\n",
            " Date_id         int64\n",
            "Dates          object\n",
            "Day_of_week     int64\n",
            "dtype: object\n",
            "Categorical Columns: ['Dates', 'Day_of_week']\n",
            "Numerical Columns: ['Date_id']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Null values"
      ],
      "metadata": {
        "id": "-HcxnSvoz-Vw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "conn = sqlite3.connect('normalized(2).db')\n",
        "\n",
        "query = \"SELECT * FROM Date,Births\"\n",
        "\n",
        "data = pd.read_sql_query(query, conn)\n",
        "\n",
        "#conn.close()\n",
        "\n",
        "print(data.head())\n",
        "\n",
        "null_values = data.isnull().sum()\n",
        "print(\"Null Values in Each Column:\\n\", null_values)\n",
        "\n",
        "print(\"Data Types Before Correction:\\n\", data.dtypes)\n",
        "print(\"Data Types After Correction:\\n\", data.dtypes)\n",
        "if 'some_date_column' in data.columns:\n",
        "    print(\"Null Values After Type Correction in 'some_date_column':\", data['some_date_column'].isnull().sum())\n"
      ],
      "metadata": {
        "id": "zh8sqjY-cNxw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "043a6e04-6262-405a-e20c-b0779db15983"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Date_id       Dates  Day_of_week  Date_id  births\n",
            "0        1  1994-01-01            6        1    8096\n",
            "1        1  1994-01-01            6        2    7772\n",
            "2        1  1994-01-01            6        3   10142\n",
            "3        1  1994-01-01            6        4   11248\n",
            "4        1  1994-01-01            6        5   11053\n",
            "Null Values in Each Column:\n",
            " Date_id        0\n",
            "Dates          0\n",
            "Day_of_week    0\n",
            "Date_id        0\n",
            "births         0\n",
            "dtype: int64\n",
            "Data Types Before Correction:\n",
            " Date_id         int64\n",
            "Dates          object\n",
            "Day_of_week     int64\n",
            "Date_id         int64\n",
            "births          int64\n",
            "dtype: object\n",
            "Data Types After Correction:\n",
            " Date_id         int64\n",
            "Dates          object\n",
            "Day_of_week     int64\n",
            "Date_id         int64\n",
            "births          int64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "\n",
        "plt.hist(df['births'], bins=20, color='skyblue', edgecolor='black')\n",
        "plt.title('Births')\n",
        "plt.xlabel('No.of Births')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "correlation_matrix = df.corr()\n",
        "print(correlation_matrix)"
      ],
      "metadata": {
        "id": "nvHB9aLOe9Nv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 936
        },
        "outputId": "e8e5e429-c4d6-4b8e-de4e-4b22f554d1f5"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Date_id    births\n",
            "Date_id  1.000000  0.090805\n",
            "births   0.090805  1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Seaborn plot"
      ],
      "metadata": {
        "id": "-uajph4FbfCX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "\n",
        "corr_matrix = df.corr()\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "heatmap = sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', cbar_kws={'label': 'Correlation coefficient'})\n",
        "heatmap.set_title('Feature Correlation Heatmap', pad=12)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "dM9Q_MWwgQ7X",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c1156085-5216-4144-ea10-7371211eeea0"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Violin plots"
      ],
      "metadata": {
        "id": "l6CXBiZ0bnGl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.violinplot( y='births', data=df)\n",
        "\n"
      ],
      "metadata": {
        "id": "YelD3DhchYZR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 932
        },
        "outputId": "38d0b6df-115d-430e-bc1e-224a7cc3076b"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='births'>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ".1. Numerical Correlation Heatmap\n",
        "* High Positive Correlation (close to 1): Features with high positive correlations move in tandem. This can indicate redundancy within your data, where one variable might be predictable from another. For example, if 'total_sales' and 'number_of_items_sold' are highly correlated, one might be derivable from the other.\n",
        "* High Negative Correlation (close to -1): Features with high negative correlations move in opposite directions. This might be useful for risk diversification in financial portfolios or for identifying opposing trends in data, like temperature and heating costs.\n",
        "* Low or No Correlation (around 0): These features do not show any strong linear relationship. This doesn't imply a lack of any relationship but possibly that it isn't linear or that the relationship is complex and influenced by other variables.\n",
        "* Correlation with Target Variable: High correlations (positive or negative) with the target variable are particularly important in predictive modeling since they can suggest good predictors for model input.\n",
        "2. Categorical Correlation Heatmap\n",
        "* Strong Association: High values might suggest a strong association between categorical features. This can be useful for feature engineering in machine learning or market segmentation in marketing analysis.\n",
        "* Weak Association: Low values indicate that the categories of these features do not reveal much about each other. This can be useful to avoid using both features together in a model to prevent complexity without adding value.\n",
        "* Insightful Patterns: Patterns in categorical heatmaps can be particularly insightful. For example, if you’re analyzing customer data, a strong correlation between 'region' and 'product preference' might suggest regional preferences that could be exploited in targeted marketing campaigns.\n"
      ],
      "metadata": {
        "id": "lpZ6lTsAcPkL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "distribution of each attribute/feature"
      ],
      "metadata": {
        "id": "tLxyKDfqbua5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Date\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "# Numerical Features\n",
        "numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "for feature in numerical_features:\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    sns.histplot(df[feature], kde=True, bins=30)\n",
        "    plt.title(f'Histogram of {feature}')\n",
        "\n",
        "    plt.subplot(1, 2, 2)\n",
        "    sns.boxplot(x=df[feature])\n",
        "    plt.title(f'Boxplot of {feature}')\n",
        "    plt.show()\n",
        "\n",
        "# Categorical Features\n",
        "categorical_features = df.select_dtypes(include=['object', 'category']).columns.tolist()\n",
        "for feature in categorical_features:\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    sns.countplot(x=feature, data=df)\n",
        "    plt.title(f'Bar Chart of {feature}')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "_hi5apMy2hGZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "995deb18-fb98-42f4-864a-e3c65249f7dc"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id       Dates  Day_of_week\n",
            "0           1  1994-01-01            6\n",
            "1           2  1994-01-02            7\n",
            "2           3  1994-01-03            1\n",
            "3           4  1994-01-04            2\n",
            "4           5  1994-01-05            3\n",
            "...       ...         ...          ...\n",
            "3647     3648  2003-12-27            6\n",
            "3648     3649  2003-12-28            7\n",
            "3649     3650  2003-12-29            1\n",
            "3650     3651  2003-12-30            2\n",
            "3651     3652  2003-12-31            3\n",
            "\n",
            "[3652 rows x 3 columns]\n",
            "           Date_id  Day_of_week\n",
            "count  3652.000000  3652.000000\n",
            "mean   1826.500000     3.999726\n",
            "std    1054.385919     2.000753\n",
            "min       1.000000     1.000000\n",
            "25%     913.750000     2.000000\n",
            "50%    1826.500000     4.000000\n",
            "75%    2739.250000     6.000000\n",
            "max    3652.000000     7.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+0AAAIjCAYAAAB20vpjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABlCElEQVR4nO3deZhT1f3H8U+WmcyeYVhmQXaQTVlERUQtKAqIVlu0LtQCRakVVERFcQOpikurVIpa2wpqpVb7c2sVZMdaEQVFZBFB2QRmWGffk/P7Y0gkMAPDkJl7E96v55lHuLnJfE+COfnknHuOwxhjBAAAAAAAbMdpdQEAAAAAAKB6hHYAAAAAAGyK0A4AAAAAgE0R2gEAAAAAsClCOwAAAAAANkVoBwAAAADApgjtAAAAAADYFKEdAAAAAACbIrQDAAAAAGBThHagllq3bq0RI0ZYXUbUe+qpp9S2bVu5XC716NHD6nLqzeTJk+VwOGp1rsPh0OTJk+u3IABARLBjn/D555/r3HPPVWJiohwOh1atWmV1SfViy5YtcjgcmjVr1jHPHTFihFq3bl3vNeHkQGjHSWnWrFlyOBxasWJFtbf369dPp5122gn/ng8++MB2HaudzZs3TxMmTFDfvn01c+ZMPfbYYzWeO2LECDkcjuBPUlKS2rZtq6uuukr/93//J7/fX+c6Zs+erWnTptX5/gCAyBP4bHDoT7NmzdS/f3/NmTPH6vJO2Lp16zR58mRt2bIlrI9bUVGhq6++Wvv379czzzyjV199Va1atar23CVLloQ8vx6PR+np6erXr58ee+wx7dmzp8511Ff7ADtwW10AECk2bNggp/P4vuf64IMPNGPGDIJ7LS1atEhOp1N/+9vfFBsbe8zzPR6P/vrXv0qSSkpKtHXrVv373//WVVddpX79+undd99VSkrKcdcxe/ZsrVmzRuPGjTvu+9bWAw88oHvvvbfeHh8AUDdTpkxRmzZtZIxRTk6OZs2apUsvvVT//ve/ddlll1ldXp2tW7dODz/8sPr16xfWEeDvvvtOW7du1V/+8hfdeOONtbrPbbfdprPOOks+n0979uzRJ598okmTJunpp5/WG2+8oQsvvPC466iv9h2qVatWKikpUUxMTL08PlATQjtQSx6Px+oSjltRUZESExOtLqPWdu/erfj4+FoFdklyu9365S9/GXLskUce0eOPP66JEyfqpptu0j//+c/6KPWEud1uud28BQOA3QwePFhnnnlm8O+jRo1Senq6/vGPf0R0aK8vu3fvliSlpqbW+j7nn3++rrrqqpBjX331lS655BINHTpU69atU2ZmZjjLDAuHw6G4uDiry8BJiOnxQC0dfk17RUWFHn74YXXo0EFxcXFq3LixzjvvPM2fP19S1fTtGTNmSFLIVLCAoqIi3XnnnWrRooU8Ho86duyo3//+9zLGhPzekpIS3XbbbWrSpImSk5P105/+VDt27DjimrbANdLr1q3T9ddfr0aNGum8886TJK1evVojRoxQ27ZtFRcXp4yMDP3617/Wvn37Qn5X4DG+/fZb/fKXv5TX61XTpk314IMPyhij7du364orrlBKSooyMjL0hz/8oVbPXWVlpX73u9+pXbt28ng8at26te677z6VlZUFz3E4HJo5c6aKioqCz1Vtrhmrzr333qtLLrlEb775pr799tvg8XfffVdDhgxRVlaWPB6P2rVrp9/97nfy+XzBc/r166f3339fW7duDdZx6Df2ZWVlmjRpktq3by+Px6MWLVpowoQJIW2pjequaS8rK9Mdd9yhpk2bBl/rH374oU7PAQAgPFJTUxUfH3/EF63H6sdLSkrUqVMnderUSSUlJcH77d+/X5mZmTr33HOD/c+IESOUlJSk77//XgMHDlRiYqKysrI0ZcqUIz4XVOfLL7/U4MGDlZKSoqSkJF100UX69NNPg7fPmjVLV199tSSpf//+wf5tyZIlR33cRYsW6fzzz1diYqJSU1N1xRVXaP369cHbR4wYoZ/85CeSpKuvvloOh0P9+vU7Zr3V6d69u6ZNm6bc3Fz96U9/Ch7funWrbrnlFnXs2FHx8fFq3Lixrr766pBp8LVp35w5c4JtSU5O1pAhQ7R27drjqrGma9rfeecdnXbaaYqLi9Npp52mt99++7jbDxwNwzw4qeXl5Wnv3r1HHK+oqDjmfSdPnqypU6fqxhtv1Nlnn638/HytWLFCX3zxhS6++GL95je/0c6dOzV//ny9+uqrIfc1xuinP/2pFi9erFGjRqlHjx768MMPdffdd2vHjh165plngueOGDFCb7zxhm644Qadc845Wrp0qYYMGVJjXVdffbU6dOigxx57LNjRz58/X99//71GjhypjIwMrV27Vi+++KLWrl2rTz/99IjweM0116hz5856/PHH9f777+uRRx5RWlqa/vznP+vCCy/UE088oddee0133XWXzjrrLF1wwQVHfa5uvPFGvfzyy7rqqqt05513avny5Zo6darWr18f7NheffVVvfjii/rss8+CU97PPffcY74ONbnhhhs0b948zZ8/X6eeeqqkqk49KSlJ48ePV1JSkhYtWqSHHnpI+fn5euqppyRJ999/v/Ly8vTDDz8EX4ekpCRJkt/v109/+lN9/PHHGj16tDp37qyvv/5azzzzjL799lu98847da5Xqnqe/v73v+v666/Xueeeq0WLFh31tQYAhF/gs4ExRrt379b06dNVWFgYMrOrNv14fHy8Xn75ZfXt21f333+/nn76aUnSmDFjlJeXp1mzZsnlcgUf0+fzadCgQTrnnHP05JNPau7cuZo0aZIqKys1ZcqUGutdu3atzj//fKWkpGjChAmKiYnRn//8Z/Xr109Lly5V7969dcEFF+i2227Ts88+q/vuu0+dO3eWpOB/q7NgwQINHjxYbdu21eTJk1VSUqLp06erb9+++uKLL9S6dWv95je/UfPmzfXYY48Fp7ynp6fX+bm/6qqrNGrUKM2bN0+PPvqopKpF7j755BNde+21OuWUU7RlyxY9//zz6tevn9atW6eEhIRjtu/VV1/V8OHDNXDgQD3xxBMqLi7W888/r/POO09ffvnlCU2nnzdvnoYOHaouXbpo6tSp2rdvn0aOHKlTTjmlzo8JHMEAJ6GZM2caSUf96dq1a8h9WrVqZYYPHx78e/fu3c2QIUOO+nvGjBljqvvf7J133jGSzCOPPBJy/KqrrjIOh8Ns2rTJGGPMypUrjSQzbty4kPNGjBhhJJlJkyYFj02aNMlIMtddd90Rv6+4uPiIY//4xz+MJPPRRx8d8RijR48OHqusrDSnnHKKcTgc5vHHHw8eP3DggImPjw95TqqzatUqI8nceOONIcfvuusuI8ksWrQoeGz48OEmMTHxqI9X23O//PJLI8nccccdwWPVPQ+/+c1vTEJCgiktLQ0eGzJkiGnVqtUR57766qvG6XSa//73vyHHX3jhBSPJ/O9//6tV7cb8+FwHBJ6nW265JeS866+//ojXGgAQfjV9NvB4PGbWrFkh59a2HzfGmIkTJxqn02k++ugj8+abbxpJZtq0aSH3Gz58uJFkbr31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VFRUmIcffti0adPGxMTEmBYtWpiJEyeGbLN2tN9TncD2OIGfhIQE07p1azN06FDzr3/9y/h8viPu87///c+cc845Jj4+3mRlZZkJEyaYDz/88IgtYgoLC831119vUlNTj9iypby83DzxxBOma9euxuPxmEaNGplevXqZhx9+2OTl5dWqdmOO3PLNGGNKSkrMbbfdZho3bmwSExPN5ZdfbrZv386WbwDQAKrb8i0uLs706NHDPP/880f0z8fqx1euXGncbnfINm7GVH02OOuss0xWVpY5cOCAMebH/u+7774zl1xyiUlISDDp6elm0qRJR/Rn1fUJX3zxhRk4cKBJSkoyCQkJpn///uaTTz45oo1/+ctfTNu2bY3L5arV9m8LFiwwffv2NfHx8SYlJcVcfvnlZt26dSHn1GXLt8BPTEyMadq0qbngggvMo48+anbv3n3EfQ4cOGBGjhxpmjRpYpKSkszAgQPNN998c8TnsmO1b/HixWbgwIHG6/WauLg4065dOzNixAizYsWKY9YdUN2Wb8YY83//93+mc+fOxuPxmC5dupi33nrLDB8+nC3fEDYOY2q5ihQA21i1apV69uypv//97xo2bJjV5QAAgBMwYsQI/etf/2JkFkC1uKYdsLmSkpIjjk2bNk1OpzNkQTUAAAAA0Ydr2gGbe/LJJ7Vy5Ur1799fbrdbc+bM0Zw5czR69Gi2GLOhvLy8ar9oOVR1W84AAABrlJeXa//+/Uc9x+v1VrutLtAQCO2AzZ177rmaP3++fve736mwsFAtW7bU5MmTdf/991tdGqpx++236+WXXz7qOVyVBACAfXzyySfHXBh35syZGjFiRMMUBByGa9oBIIzWrVunnTt3HvWccO8TCwAA6u7AgQNauXLlUc/p2rWrMjMzG6giIBShHQAAAAAAm2IhOgAAAAAAbIpr2iX5/X7t3LlTycnJcjgcVpcDADjJGWNUUFCgrKwsOZ18vx4O9PUAALupbX9PaJe0c+dOVuEGANjO9u3bdcopp1hdRlSgrwcA2NWx+ntCu6Tk5GRJVU9WSkqKxdUAAE52+fn5atGiRbB/womjrwcA2E1t+3tCuxScJpeSkkJHDgCwDaZxhw99PQDAro7V33OhHAAAAAAANkVoBwAAAADApgjtAAAAAADYFKEdAAAAAACbIrQDAAAAAGBThHYAAAAAAGyK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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "class DataPreprocessor:\n",
        "    def __init__(self):\n",
        "\n",
        "        self.categorical_transformer = Pipeline(steps=[\n",
        "            ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "            ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "        ])\n",
        "\n",
        "        self.numerical_transformer = Pipeline(steps=[\n",
        "            ('imputer', SimpleImputer(strategy='median')),\n",
        "            ('transformer', PowerTransformer(method='yeo-johnson')),\n",
        "            ('scaler', StandardScaler())\n",
        "        ])\n",
        "\n",
        "\n",
        "        self.preprocessor = None\n",
        "\n",
        "    def fit(self, X, categorical_features, numerical_features):\n",
        "        \"\"\"\n",
        "        Fit the preprocessing pipelines on the data.\n",
        "        \"\"\"\n",
        "        self.preprocessor = ColumnTransformer(\n",
        "            transformers=[\n",
        "                ('num', self.numerical_transformer, numerical_features),\n",
        "                ('cat', self.categorical_transformer, categorical_features)\n",
        "            ])\n",
        "\n",
        "        self.preprocessor.fit(X)\n",
        "\n",
        "    def transform(self, X):\n",
        "        \"\"\"\n",
        "        Apply the transformations to the data.\n",
        "        \"\"\"\n",
        "        return self.preprocessor.transform(X)\n",
        "\n",
        "    def fit_transform(self, X, categorical_features, numerical_features):\n",
        "        \"\"\"\n",
        "        Fit and transform the data.\n",
        "        \"\"\"\n",
        "        self.fit(X, categorical_features, numerical_features)\n",
        "        return self.transform(X)\n"
      ],
      "metadata": {
        "id": "yOHNfexZ4Wdp"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Linear Regression"
      ],
      "metadata": {
        "id": "WH296etyRORD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "id": "AqZsQqAnQGH7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39826162-0fb0-4d6e-ff65-e7d1c8a9ffd3"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1599.2545266942225\n",
            "Mean Squared Error (MSE): 3304169.9674862134\n",
            "Root Mean Squared Error (RMSE): 1817.7375958829189\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Linear Regression CV"
      ],
      "metadata": {
        "id": "_WxTaBXIW0Yw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('Date_id', axis=1)\n",
        "y = df['Date_id']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model1 = LinearRegression()\n",
        "model1.fit(X_train, y_train)\n",
        "y_pred = model1.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")"
      ],
      "metadata": {
        "id": "7QhEDuu2Wqii",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99f62449-256b-48fa-d9c0-a3ebb343892b"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 936.5608165375786\n",
            "Mean Squared Error (MSE): 1165808.3618426772\n",
            "Root Mean Squared Error (RMSE): 1079.726058703168\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree"
      ],
      "metadata": {
        "id": "mMoz0CV2eUkC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model2 = DecisionTreeRegressor(random_state=42)\n",
        "\n",
        "model2.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model2.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "6_Tf2pwJWUCA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1fa5e449-610e-46b2-fa92-fc9b9f74120a"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Squared Error (MSE): 4018457.146374829\n",
            "Root Mean Squared Error (RMSE): 2004.6089759289289\n",
            "Mean Absolute Error (MAE): 1458.7989056087551\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest"
      ],
      "metadata": {
        "id": "nihe0CMCiXh9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model3 = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model3.fit(X_train, y_train)\n",
        "y_pred = model3.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n"
      ],
      "metadata": {
        "id": "SMXgyl8zgGUE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1eebb9f4-da46-4fc0-8475-98bf06e25f1e"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Squared Error (MSE): 2966127.3181276335\n",
            "Root Mean Squared Error (RMSE): 1722.244848483407\n",
            "Mean Absolute Error (MAE): 1392.707948016416\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVR"
      ],
      "metadata": {
        "id": "Gs8hgqjqHFqB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "scaler_X = StandardScaler()\n",
        "scaler_y = StandardScaler()\n",
        "X_scaled = scaler_X.fit_transform(X)\n",
        "y_scaled = scaler_y.fit_transform(y.values.reshape(-1, 1)).flatten()\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)\n",
        "model4 = SVR(kernel='rbf')\n",
        "model4.fit(X_train, y_train)\n",
        "y_pred = model4.predict(X_test)\n",
        "y_pred_rescaled = scaler_y.inverse_transform(y_pred.reshape(-1, 1)).flatten()\n",
        "y_test_rescaled = scaler_y.inverse_transform(y_test.reshape(-1, 1)).flatten()\n",
        "mae = mean_absolute_error(y_test_rescaled, y_pred_rescaled)\n",
        "mse = mean_squared_error(y_test_rescaled, y_pred_rescaled)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LGVcpntlG6io",
        "outputId": "5b7fcab7-9345-4549-95ca-a2f06da0e981"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1396.6392177704988\n",
            "Mean Squared Error (MSE): 3837888.036293995\n",
            "Root Mean Squared Error (RMSE): 1959.0528416288303\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bagging Regressor"
      ],
      "metadata": {
        "id": "TmQD6xT_KD9h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import BaggingRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model5 = BaggingRegressor(base_estimator=DecisionTreeRegressor(),\n",
        "                         n_estimators=10,\n",
        "                         random_state=42)\n",
        "\n",
        "\n",
        "model5.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model5.predict(X_test)\n",
        "\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pNaIMkDMIfel",
        "outputId": "66603ec6-bdf1-4a9f-8377-8151a4debaa4"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error (MAE): 1392.2114911080712\n",
            "Mean Squared Error (MSE): 3058870.9944186048\n",
            "Root Mean Squared Error (RMSE): 1748.9628339157482\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "NuSVR"
      ],
      "metadata": {
        "id": "YrhwFlMcNeLA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import NuSVR\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "scaler_X = StandardScaler()\n",
        "scaler_y = StandardScaler()\n",
        "\n",
        "X_scaled = scaler_X.fit_transform(X)\n",
        "y_scaled = scaler_y.fit_transform(y.values.reshape(-1, 1)).flatten()\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)\n",
        "\n",
        "model6 = NuSVR(nu=0.5, C=1.0, kernel='rbf')\n",
        "model6.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model6.predict(X_test)\n",
        "y_pred_rescaled = scaler_y.inverse_transform(y_pred.reshape(-1, 1)).flatten()\n",
        "y_test_rescaled = scaler_y.inverse_transform(y_test.reshape(-1, 1)).flatten()\n",
        "\n",
        "mae = mean_absolute_error(y_test_rescaled, y_pred_rescaled)\n",
        "mse = mean_squared_error(y_test_rescaled, y_pred_rescaled)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oy9K6Ff0NI83",
        "outputId": "4c5c7cfc-aa67-42a7-ab69-37eb0ffa70c0"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1705.763397484607\n",
            "Mean Squared Error (MSE): 3416354.496997203\n",
            "Root Mean Squared Error (RMSE): 1848.338306965801\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "K Nearest Neighbour"
      ],
      "metadata": {
        "id": "K5dDUiynN8de"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "scaler_X = StandardScaler()\n",
        "X_scaled = scaler_X.fit_transform(X)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "model7 = KNeighborsRegressor(n_neighbors=5)\n",
        "model7.fit(X_train, y_train)\n",
        "y_pred = model7.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "50qQ_1FpNf2b",
        "outputId": "12a56407-dbed-46e0-feff-5e690637fe45"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1845.2358413132695\n",
            "Mean Squared Error (MSE): 4554008.101504788\n",
            "Root Mean Squared Error (RMSE): 2134.0122074404326\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "XGB Regressor"
      ],
      "metadata": {
        "id": "hZBsOGA6OpBR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model8 = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\n",
        "model8.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model8.predict(X_test)\n",
        "\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gvn1AmIbN6li",
        "outputId": "38cfff95-7e53-48bb-8dfd-2f5200f1df92"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1626.2201634105677\n",
            "Mean Squared Error (MSE): 3381358.350297526\n",
            "Root Mean Squared Error (RMSE): 1838.8470165561696\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Poisson Regressor"
      ],
      "metadata": {
        "id": "NiHlgy1eQKaV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import PoissonRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model9 = PoissonRegressor(alpha=1.0, max_iter=100, tol=0.0001)\n",
        "model9.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model9.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPXtWj7FOuEj",
        "outputId": "c8abcc7e-21b3-4eef-b596-50b58a34b132"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "Mean Absolute Error (MAE): 1601.8841302497915\n",
            "Mean Squared Error (MSE): 3340286.024431865\n",
            "Root Mean Squared Error (RMSE): 1827.6449393774124\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LGBM Regressor"
      ],
      "metadata": {
        "id": "qc9_PYmfQxO8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from lightgbm import LGBMRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('births', axis=1)\n",
        "y = df['births']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model10 = LGBMRegressor(n_estimators=100, learning_rate=0.1, num_leaves=31, random_state=42)\n",
        "model10.fit(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric='rmse')\n",
        "\n",
        "y_pred = model10.predict(X_test)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Mean Absolute Error (MAE): {mae}\")\n",
        "print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LCY4jn5QVZK",
        "outputId": "97f03a87-94a3-464e-a2de-ba55e2bb3cc3"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000197 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 255\n",
            "[LightGBM] [Info] Number of data points in the train set: 2921, number of used features: 1\n",
            "[LightGBM] [Info] Start training from score 10864.259843\n",
            "Mean Absolute Error (MAE): 1656.4053492574276\n",
            "Mean Squared Error (MSE): 3569586.8671962474\n",
            "Root Mean Squared Error (RMSE): 1889.335033072813\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model = LinearRegression(fit_intercept = True,copy_X = False,positive = False,n_jobs = 4)\n",
        "model.fit(X_train,y_train)\n",
        "LR_pred = model.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "id": "S5HK7U79OIn3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "6bbb27f4-79eb-46ea-cbb6-2b688445f668"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:urllib3.connectionpool:Retrying (Retry(total=4, connect=5, read=4, redirect=5, status=5)) after connection broken by 'RemoteDisconnected('Remote end closed connection without response')': /gowthamiabbaraju/USbirthsproject.mlflow/api/2.0/mlflow/runs/create\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with mlflow.start_run() as run:\n",
        "    mlflow.sklearn.log_model(\n",
        "    sk_model = model,\n",
        "    artifact_path=\"LinearRegression-model\",\n",
        "    input_example = X_train,\n",
        "    registered_model_name = \"LinearRegr_model\")"
      ],
      "metadata": {
        "id": "EURlxYI1SZMU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model1 = LinearRegression(fit_intercept = True,copy_X = False,positive = False,n_jobs = 4)\n",
        "model1.fit(X_train,y_train)\n",
        "LR_pred = model1.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "id": "mMTwGwxCTQBE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model2 = DecisionTreeRegressor()\n",
        "model2.fit(X_train,y_train)\n",
        "LR_pred = model2.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "id": "RSIGPR0Za6WD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model3 = RandomForestRegressor()\n",
        "model3.fit(X_train,y_train)\n",
        "LR_pred = model3.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "id": "kOTBrJSBihqB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model4 = SVR(kernel='rbf')\n",
        "model4.fit(X_train,y_train)\n",
        "LR_pred = model4.predict(X_test)\n",
        "y_pred_rescaled = scaler_y.inverse_transform(LR_pred.reshape(-1, 1)).flatten()\n",
        "y_test_rescaled = scaler_y.inverse_transform(y_test.reshape(-1, 1)).flatten()\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, y_pred_rescaled))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test_rescaled, y_pred_rescaled))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test_rescaled, y_pred_rescaled)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gu8Z8mN7HmY4",
        "outputId": "54a28579-1ee7-4c78-e481-c1f3627cec52"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import BaggingRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model5 = BaggingRegressor(base_estimator=DecisionTreeRegressor(),n_estimators=10,random_state=42)\n",
        "model5.fit(X_train,y_train)\n",
        "LR_pred = model5.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3ZJr02i3LucU",
        "outputId": "c03851ad-2f6d-41c5-f54b-8ab3fb7537a9"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import NuSVR\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model6 = NuSVR(nu=0.5,C=1.0,kernel='rbf')\n",
        "model6.fit(X_train,y_train)\n",
        "LR_pred = model6.predict(X_test)\n",
        "y_pred_rescaled = scaler_y.inverse_transform(LR_pred.reshape(-1, 1)).flatten()\n",
        "y_test_rescaled = scaler_y.inverse_transform(y_test.to_numpy().reshape(-1, 1)).flatten()\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test_rescaled, y_pred_rescaled))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test_rescaled, y_pred_rescaled))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test_rescaled, y_pred_rescaled)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3v_uxZBJRiNU",
        "outputId": "77d103c8-d5ee-40f5-c92a-2d7ba890d2e5"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "#from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model7 = KNeighborsRegressor(n_neighbors=5)\n",
        "model7.fit(X_train,y_train)\n",
        "LR_pred = model7.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_FGkg26XUdt2",
        "outputId": "06957529-3fe3-4f98-88de-c72d000e183e"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from xgboost import XGBRegressor\n",
        "#from sklearn.tree import DecisionTreeRegressor\n",
        "#from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model8 = XGBRegressor(n_estimators=100,learning_rate=0.1,max_dept=3,random_state=42)\n",
        "model8.fit(X_train,y_train)\n",
        "LR_pred = model8.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eQUYzaEgWhwk",
        "outputId": "12cd7f1b-8a58-47f1-d6cc-1a41bfcdfed2"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [21:44:36] WARNING: /workspace/src/learner.cc:742: \n",
            "Parameters: { \"max_dept\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import PoissonRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model9 = PoissonRegressor(alpha=1.0,max_iter=100,tol=0.0001)\n",
        "model9.fit(X_train,y_train)\n",
        "LR_pred = model9.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZEv9_6K6YCXg",
        "outputId": "81120bcc-5733-43f8-88a7-9d90d252871e"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "!pip install dagshub\n",
        "import dagshub\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "#from sklearn.linear_model import DecisionTreeRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from lightgbm import LGBMRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "dagshub.init(\"USbirthsproject\", \"gowthamiabbaraju\", mlflow=True)\n",
        "#mlflow.set_tracking_uri(\"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\")\n",
        "mlflow.end_run()\n",
        "mlflow.start_run()\n",
        "mlflow.log_param('fit_intercept',True)\n",
        "mlflow.log_param('copy_X',False)\n",
        "mlflow.log_param('positive',False)\n",
        "mlflow.log_param('n_jobs',4)\n",
        "model10 = LGBMRegressor(n_estimators=100,learning_rate=0.1,num_leaves=31,random_state=42)\n",
        "model10.fit(X_train,y_train)\n",
        "LR_pred = model10.predict(X_test)\n",
        "mlflow.log_metric('mean_absolute_error',mean_absolute_error(y_test, LR_pred))\n",
        "mlflow.log_metric('mean_squared_error',mean_squared_error(y_test, LR_pred))\n",
        "mlflow.log_metric('root_mean_absolute_error',np.sqrt(mean_squared_error(y_test, LR_pred)))\n",
        "mlflow.end_run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2lQXpvKoZgrj",
        "outputId": "12c4ef45-c009-4da8-daa5-4efdf82cf9f0"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlflow in /usr/local/lib/python3.10/dist-packages (2.12.2)\n",
            "Requirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.5)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.13.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.2.1)\n",
            "Requirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.0.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.43)\n",
            "Requirement already satisfied: graphene<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.3)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (7.1.0)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.6)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.7.1)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.25.2)\n",
            "Requirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow) (24.0)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.3)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.20.3)\n",
            "Requirement already satisfied: pyarrow<16,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (14.0.2)\n",
            "Requirement already satisfied: pytz<2025 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2023.4)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow) (6.0.1)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.31.0)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.2.2)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow) (1.11.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (2.0.30)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow) (0.5.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow) (3.1.4)\n",
            "Requirement already satisfied: gunicorn<23 in /usr/local/lib/python3.10/dist-packages (from mlflow) (22.0.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow) (4.11.0)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow) (2.0.7)\n",
            "Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (3.0.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.3)\n",
            "Requirement already satisfied: graphql-relay<3.3,>=3.1 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (3.2.0)\n",
            "Requirement already satisfied: aniso8601<10,>=8 in /usr/local/lib/python3.10/dist-packages (from graphene<4->mlflow) (9.0.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.18.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow) (2.1.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow) (2024.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from querystring-parser<2->mlflow) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\n",
            "Requirement already satisfied: dagshub in /usr/local/lib/python3.10/dist-packages (0.3.27)\n",
            "Requirement already satisfied: PyYAML>=5 in /usr/local/lib/python3.10/dist-packages (from dagshub) (6.0.1)\n",
            "Requirement already satisfied: fusepy>=3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.4.4)\n",
            "Requirement already satisfied: click>=8.0.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.1.7)\n",
            "Requirement already satisfied: httpx~=0.23.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.23.3)\n",
            "Requirement already satisfied: GitPython>=3.1.29 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.1.43)\n",
            "Requirement already satisfied: rich~=13.1.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (13.1.0)\n",
            "Requirement already satisfied: dacite~=1.6.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.0)\n",
            "Requirement already satisfied: tenacity~=8.2.2 in /usr/local/lib/python3.10/dist-packages (from dagshub) (8.2.3)\n",
            "Requirement already satisfied: gql[requests] in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.5.0)\n",
            "Requirement already satisfied: dataclasses-json in /usr/local/lib/python3.10/dist-packages (from dagshub) (0.6.6)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.0.3)\n",
            "Requirement already satisfied: treelib~=1.6.4 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.6.4)\n",
            "Requirement already satisfied: pathvalidate~=3.0.0 in /usr/local/lib/python3.10/dist-packages (from dagshub) (3.0.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dagshub) (2.8.2)\n",
            "Requirement already satisfied: boto3 in /usr/local/lib/python3.10/dist-packages (from dagshub) (1.34.106)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from GitPython>=3.1.29->dagshub) (4.0.11)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (2024.2.2)\n",
            "Requirement already satisfied: httpcore<0.17.0,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (0.16.3)\n",
            "Requirement already satisfied: rfc3986[idna2008]<2,>=1.3 in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.5.0)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.23.0->dagshub) (1.3.1)\n",
            "Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (0.9.1)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from rich~=13.1.0->dagshub) (2.16.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from treelib~=1.6.4->dagshub) (1.16.0)\n",
            "Requirement already satisfied: botocore<1.35.0,>=1.34.106 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.34.106)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.11.0,>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from boto3->dagshub) (0.10.1)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (3.21.2)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json->dagshub) (0.9.0)\n",
            "Requirement already satisfied: graphql-core<3.3,>=3.2 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.2.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.9.4)\n",
            "Requirement already satisfied: backoff<3.0,>=1.11.1 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.2.1)\n",
            "Requirement already satisfied: anyio<5,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (3.7.1)\n",
            "Requirement already satisfied: requests<3,>=2.26 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (2.31.0)\n",
            "Requirement already satisfied: requests-toolbelt<2,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from gql[requests]->dagshub) (1.0.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->dagshub) (1.25.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (3.7)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.0->gql[requests]->dagshub) (1.2.1)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.10/dist-packages (from botocore<1.35.0,>=1.34.106->boto3->dagshub) (2.0.7)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->GitPython>=3.1.29->dagshub) (5.0.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore<0.17.0,>=0.15.0->httpx~=0.23.0->dagshub) (0.14.0)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json->dagshub) (24.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.26->gql[requests]->dagshub) (3.3.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (1.0.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json->dagshub) (4.11.0)\n",
            "Requirement already satisfied: multidict>=4.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.6->gql[requests]->dagshub) (6.0.5)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Initialized MLflow to track repo \u001b[32m\"gowthamiabbaraju/USbirthsproject\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"gowthamiabbaraju/USbirthsproject\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Repository gowthamiabbaraju/USbirthsproject initialized!\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository gowthamiabbaraju/USbirthsproject initialized!\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000066 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 255\n",
            "[LightGBM] [Info] Number of data points in the train set: 2921, number of used features: 1\n",
            "[LightGBM] [Info] Start training from score 10864.259843\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Navigate to the directory where the file is located, if needed\n",
        "# os.chdir(\"path_to_directory_containing_group_project.py\")\n",
        "\n",
        "# Create a new directory named iris-classifier\n",
        "#os.mkdir(\"eas503\")\n",
        "\n",
        "# Move the downloaded script into the iris-classifier directory\n",
        "os.rename(\"group_project.py\", \"Eas503-final/group_project.py\")\n",
        "\n",
        "# Now, your iris-classifier directory should contain the script needed for the classifier"
      ],
      "metadata": {
        "id": "yPRNx2zDrtFI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "#os.environ[\"MLFLOW_TRACKING_URI\"] = \"https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\"\n",
        "#!mlflow models serve -m \"runs:/d37c2496cf29418086503e53c7153f87/DecisionTree\" -p 5000\n",
        "%env MLFLOW_TRACKING_URI=https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\n",
        "\n",
        "# Replace 'your_run\n",
        "!run_id=\"d37c2496cf29418086503e53c7153f87\"\n",
        "\n",
        "# Retrieve the model URI using the run ID\n",
        "!model_uri=$(mlflow models uri --no-conda -m \"runs:/$run_id/\")\n",
        "\n",
        "# Build the Docker image with the specified model name and model URI\n",
        "!mlflow models build-docker --name eas503 --model-uri $model_uri"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WiELzCL_9QVp",
        "outputId": "321a0cf0-c3de-48de-b12e-ff350fcebe7f"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "env: MLFLOW_TRACKING_URI=https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow\n",
            "Usage: mlflow models [OPTIONS] COMMAND [ARGS]...\n",
            "Try 'mlflow models --help' for help.\n",
            "\n",
            "Error: No such command 'uri'.\n",
            "Error: Option '--model-uri' requires an argument.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mlflow models list\n",
        "!mlflow models serve -m \"runs:/d37c2496cf29418086503e53c7153f87/DecisionTree\" -p 5000\n",
        "import requests\n",
        "response = requests.get('http://localhost:8080/api/data')\n",
        "print(response.json())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "atg0CmZBREZH",
        "outputId": "499806e1-12f2-4d75-b7dc-15f11658e086"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Usage: mlflow models [OPTIONS] COMMAND [ARGS]...\n",
            "Try 'mlflow models --help' for help.\n",
            "\n",
            "Error: No such command 'list'.\n",
            "Downloading artifacts:   0% 0/1 [01:04<?, ?it/s]\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/mlflow\", line 8, in <module>\n",
            "    sys.exit(cli())\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1157, in __call__\n",
            "    return self.main(*args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1078, in main\n",
            "    rv = self.invoke(ctx)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1688, in invoke\n",
            "    return _process_result(sub_ctx.command.invoke(sub_ctx))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1688, in invoke\n",
            "    return _process_result(sub_ctx.command.invoke(sub_ctx))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1434, in invoke\n",
            "    return ctx.invoke(self.callback, **ctx.params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 783, in invoke\n",
            "    return __callback(*args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/mlflow/models/cli.py\", line 104, in serve\n",
            "    return get_flavor_backend(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/mlflow/models/flavor_backend_registry.py\", line 44, in get_flavor_backend\n",
            "    local_path = _download_artifact_from_uri(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/mlflow/tracking/artifact_utils.py\", line 106, in _download_artifact_from_uri\n",
            "    return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/mlflow/store/artifact/runs_artifact_repo.py\", line 131, in download_artifacts\n",
            "    return self.repo.download_artifacts(artifact_path, dst_path)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/mlflow/store/artifact/artifact_repo.py\", line 279, in download_artifacts\n",
            "    raise MlflowException(\n",
            "mlflow.exceptions.MlflowException: The following failures occurred while downloading one or more artifacts from https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow/api/2.0/mlflow-artifacts/artifacts/7de07264f4964f83bc33601009ffd1dc/d37c2496cf29418086503e53c7153f87/artifacts/DecisionTree:\n",
            "##### File MLmodel #####\n",
            "API request to https://dagshub.com/gowthamiabbaraju/USbirthsproject.mlflow/api/2.0/mlflow-artifacts/artifacts/7de07264f4964f83bc33601009ffd1dc/d37c2496cf29418086503e53c7153f87/artifacts/DecisionTree/MLmodel failed with exception HTTPSConnectionPool(host='dagshub.com', port=443): Max retries exceeded with url: /gowthamiabbaraju/USbirthsproject.mlflow/api/2.0/mlflow-artifacts/artifacts/7de07264f4964f83bc33601009ffd1dc/d37c2496cf29418086503e53c7153f87/artifacts/DecisionTree/MLmodel (Caused by ResponseError('too many 500 error responses'))\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "JSONDecodeError",
          "evalue": "Expecting value: line 1 column 1 (char 0)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mJSONDecodeError\u001b[0m                           Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mjson\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    970\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 971\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcomplexjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    972\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mJSONDecodeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/json/__init__.py\u001b[0m in \u001b[0;36mloads\u001b[0;34m(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\u001b[0m\n\u001b[1;32m    345\u001b[0m             parse_constant is None and object_pairs_hook is None and not kw):\n\u001b[0;32m--> 346\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_default_decoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    347\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/json/decoder.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(self, s, _w)\u001b[0m\n\u001b[1;32m    336\u001b[0m         \"\"\"\n\u001b[0;32m--> 337\u001b[0;31m         \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_w\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    338\u001b[0m         \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_w\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/json/decoder.py\u001b[0m in \u001b[0;36mraw_decode\u001b[0;34m(self, s, idx)\u001b[0m\n\u001b[1;32m    354\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 355\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mJSONDecodeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Expecting value\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    356\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mJSONDecodeError\u001b[0m: Expecting value: line 1 column 1 (char 0)",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mJSONDecodeError\u001b[0m                           Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-123-0d53d06049ef>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'http://localhost:8080/api/data'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mjson\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    973\u001b[0m             \u001b[0;31m# Catch JSON-related errors and raise as requests.JSONDecodeError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    974\u001b[0m             \u001b[0;31m# This aliases json.JSONDecodeError and simplejson.JSONDecodeError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 975\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mRequestsJSONDecodeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    976\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    977\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mJSONDecodeError\u001b[0m: Expecting value: line 1 column 1 (char 0)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!docker login"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8NEP22gSphNU",
        "outputId": "dd28bac5-9cb4-4b38-aadc-b501e3deeda3"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/bin/bash: line 1: docker: command not found\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "print(data)\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "df=data\n",
        "print(df.describe())\n",
        "X = df.drop('Date_id', axis=1)\n",
        "y = df['Date_id']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "import json\n",
        "print(json.dumps(X_test.iloc[0].to_dict(), indent=2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1mVjLXR2CMpS",
        "outputId": "f0181621-6977-47d6-cd44-bf5cb57f79f4"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Date_id  births\n",
            "0           1    8096\n",
            "1           2    7772\n",
            "2           3   10142\n",
            "3           4   11248\n",
            "4           5   11053\n",
            "...       ...     ...\n",
            "3647     3648    8646\n",
            "3648     3649    7645\n",
            "3649     3650   12823\n",
            "3650     3651   14438\n",
            "3651     3652   12374\n",
            "\n",
            "[3652 rows x 2 columns]\n",
            "           Date_id        births\n",
            "count  3652.000000   3652.000000\n",
            "mean   1826.500000  10876.817360\n",
            "std    1054.385919   1858.566631\n",
            "min       1.000000   6443.000000\n",
            "25%     913.750000   8844.500000\n",
            "50%    1826.500000  11615.000000\n",
            "75%    2739.250000  12274.250000\n",
            "max    3652.000000  14540.000000\n",
            "{\n",
            "  \"births\": 12046\n",
            "}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HxL9H4JJGSij",
        "outputId": "9ba0b04d-ed2f-49f4-d500-23d9ff50fcf4"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.34.0-py2.py3-none-any.whl (8.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.5/8.5 MB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/lib/python3/dist-packages (from streamlit) (1.4)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.3.3)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: numpy<2,>=1.19.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.25.2)\n",
            "Requirement already satisfied: packaging<25,>=16.8 in /usr/local/lib/python3.10/dist-packages (from streamlit) (24.0)\n",
            "Requirement already satisfied: pandas<3,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.0.3)\n",
            "Requirement already satisfied: pillow<11,>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.4.0)\n",
            "Requirement already satisfied: protobuf<5,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.20.3)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (14.0.2)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.31.0)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.7.1)\n",
            "Requirement already satisfied: tenacity<9,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.3.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.11.0)\n",
            "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
            "  Downloading GitPython-3.1.43-py3-none-any.whl (207 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.3/207.3 kB\u001b[0m \u001b[31m17.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m40.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.3)\n",
            "Collecting watchdog>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-4.0.0-py3-none-manylinux2014_x86_64.whl (82 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m83.0/83.0 kB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.1)\n",
            "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.3.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.3.0->streamlit) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.3.0->streamlit) (2024.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2024.2.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (2.16.1)\n",
            "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.5)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.12.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.18.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.3.0->streamlit) (1.16.0)\n",
            "Installing collected packages: watchdog, smmap, pydeck, gitdb, gitpython, streamlit\n",
            "Successfully installed gitdb-4.0.11 gitpython-3.1.43 pydeck-0.9.1 smmap-5.0.1 streamlit-1.34.0 watchdog-4.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "\n",
        "# Load data\n",
        "data = pd.read_sql_query(\"select * from Births\",conn)\n",
        "\n",
        "# Calculate statistics\n",
        "date_id_stats = data['Date_id'].describe()\n",
        "births_stats = data['births'].describe()\n",
        "\n",
        "# Display statistics\n",
        "st.subheader(\"Statistics for Date_id:\")\n",
        "st.write(date_id_stats)\n",
        "\n",
        "st.subheader(\"Statistics for Births:\")\n",
        "st.write(births_stats)"
      ],
      "metadata": {
        "id": "byRP_lsQGwb8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " !streamlit run group_project.ipynb\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WO1CFBpNHRTr",
        "outputId": "2baf669c-ebe1-4804-8c58-923008199a5a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Usage: streamlit run [OPTIONS] TARGET [ARGS]...\n",
            "Try 'streamlit run --help' for help.\n",
            "\n",
            "Error: Streamlit requires raw Python (.py) files, not .ipynb.\n",
            "For more information, please see https://docs.streamlit.io\n"
          ]
        }
      ]
    }
  ]
}